{"version":3,"file":"ml.min.js","sources":["../node_modules/ml-array-rescale/node_modules/is-any-array/src/index.js","../node_modules/ml-array-rescale/node_modules/ml-array-max/lib-es6/index.js","../node_modules/ml-array-rescale/node_modules/ml-array-min/lib-es6/index.js","../node_modules/ml-array-rescale/lib-es6/index.js","../node_modules/ml-matrix/src/inspect.js","../node_modules/ml-matrix/src/mathOperations.js","../node_modules/ml-matrix/src/util.js","../node_modules/ml-matrix/src/stat.js","../node_modules/ml-matrix/src/matrix.js","../node_modules/ml-matrix/src/views/base.js","../node_modules/ml-matrix/src/views/column.js","../node_modules/ml-matrix/src/views/columnSelection.js","../node_modules/ml-matrix/src/views/flipColumn.js","../node_modules/ml-matrix/src/views/flipRow.js","../node_modules/ml-matrix/src/views/row.js","../node_modules/ml-matrix/src/views/rowSelection.js","../node_modules/ml-matrix/src/views/selection.js","../node_modules/ml-matrix/src/views/sub.js","../node_modules/ml-matrix/src/views/transpose.js","../node_modules/ml-matrix/src/wrap/WrapperMatrix1D.js","../node_modules/ml-matrix/src/wrap/WrapperMatrix2D.js","../node_modules/ml-matrix/src/wrap/wrap.js","../node_modules/ml-matrix/src/dc/lu.js","../node_modules/ml-matrix/src/dc/util.js","../node_modules/ml-matrix/src/dc/qr.js","../node_modules/ml-matrix/src/dc/svd.js","../node_modules/ml-matrix/src/decompositions.js","../node_modules/ml-matrix/src/determinant.js","../node_modules/ml-matrix/src/linearDependencies.js","../node_modules/ml-matrix/src/pseudoInverse.js","../node_modules/ml-matrix/src/covariance.js","../node_modules/ml-matrix/src/correlation.js","../node_modules/ml-matrix/src/dc/evd.js","../node_modules/ml-matrix/src/dc/cholesky.js","../node_modules/ml-matrix/src/dc/nipals.js","../node_modules/ml-array-sum/node_modules/is-any-array/src/index.js","../node_modules/ml-array-sum/lib-es6/index.js","../node_modules/ml-array-mean/lib-es6/index.js","../node_modules/ml-cart/src/utils.js","../node_modules/ml-cart/src/TreeNode.js","../node_modules/ml-cart/src/DecisionTreeClassifier.js","../node_modules/ml-cart/src/DecisionTreeRegression.js","../node_modules/random-js/dist/random-js.esm.js","../node_modules/ml-random-forest/src/utils.js","../node_modules/ml-random-forest/src/RandomForestBase.js","../node_modules/ml-random-forest/src/RandomForestClassifier.js","../node_modules/ml-array-median/node_modules/is-any-array/src/index.js","../node_modules/median-quickselect/lib/median-quickselect.min.js","../node_modules/ml-array-median/lib-es6/index.js","../node_modules/ml-random-forest/src/RandomForestRegression.js","../node_modules/ml-pca/src/pca.js","../node_modules/ml-distance-euclidean/lib-es6/euclidean.js","../node_modules/ml-distance-matrix/src/index.js","../node_modules/heap/lib/heap.js","../node_modules/heap/index.js","../node_modules/ml-hclust/src/Cluster.js","../node_modules/ml-hclust/src/agnes.js","../node_modules/ml-nearest-vector/lib-es6/index.js","../node_modules/ml-kmeans/src/utils.js","../node_modules/ml-xsadd/lib-es6/xsadd.js","../node_modules/ml-random/lib-es6/choice.js","../node_modules/ml-random/lib-es6/index.js","../node_modules/ml-kmeans/src/initialization.js","../node_modules/ml-kmeans/src/KMeansResult.js","../node_modules/ml-kmeans/src/kmeans.js","../node_modules/ml-naivebayes/src/utils.js","../node_modules/ml-naivebayes/src/GaussianNB.js","../node_modules/ml-naivebayes/src/MultinomialNB.js","../node_modules/ml-knn/src/KDTree.js","../node_modules/ml-knn/src/index.js","../node_modules/ml-pls/src/util/utils.js","../node_modules/ml-pls/src/PLS.js","../node_modules/ml-pls/src/KOPLS.js","../node_modules/ml-confusion-matrix/src/index.js","../node_modules/ml-combinations/lib/index.js","../node_modules/ml-cross-validation/src/getFolds.js","../node_modules/ml-cross-validation/src/sampleAClass.js","../node_modules/ml-cross-validation/src/index.js","../node_modules/ml-pls/src/OPLSNipals.js","../node_modules/ml-pls/src/util/tss.js","../node_modules/ml-pls/src/OPLS.js","../node_modules/ml-fnn/FeedForwardNeuralNetwork.js","../node_modules/ml-som/src/node-square.js","../node_modules/ml-som/src/node-hexagonal.js","../node_modules/ml-som/src/index.js","../node_modules/ml-regression-base/src/maybeToPrecision.js","../node_modules/ml-regression-base/src/checkArrayLength.js","../node_modules/ml-regression-base/src/index.js","../node_modules/ml-regression-polynomial/src/index.js","../node_modules/ml-regression-simple-linear/src/index.js","../node_modules/ml-regression-exponential/src/index.js","../node_modules/ml-regression-power/src/index.js","../node_modules/ml-regression-multivariate-linear/src/index.js","../node_modules/ml-kernel-gaussian/gaussian-kernel.js","../node_modules/ml-kernel-polynomial/polynomial-kernel.js","../node_modules/ml-kernel-sigmoid/sigmoid-kernel.js","../node_modules/ml-kernel/src/kernels/anova-kernel.js","../node_modules/ml-kernel/src/kernels/cauchy-kernel.js","../node_modules/ml-kernel/src/kernels/exponential-kernel.js","../node_modules/ml-kernel/src/kernels/histogram-intersection-kernel.js","../node_modules/ml-kernel/src/kernels/laplacian-kernel.js","../node_modules/ml-kernel/src/kernels/multiquadratic-kernel.js","../node_modules/ml-kernel/src/kernels/rational-quadratic-kernel.js","../node_modules/ml-kernel/src/kernel.js","../node_modules/ml-regression-theil-sen/src/index.js","../node_modules/ml-regression-robust-polynomial/src/index.js","../node_modules/ml-levenberg-marquardt/node_modules/is-any-array/src/index.js","../node_modules/ml-levenberg-marquardt/src/errorCalculation.js","../node_modules/ml-levenberg-marquardt/src/step.js","../node_modules/ml-levenberg-marquardt/src/index.js","../node_modules/ml-fcnnls/src/util/selection.js","../node_modules/ml-fcnnls/src/util/sortCollectionSet.js","../node_modules/ml-fcnnls/src/cssls.js","../node_modules/ml-fcnnls/src/initialisation.js","../node_modules/ml-fcnnls/src/util/setDifference.js","../node_modules/ml-fcnnls/src/optimality.js","../node_modules/ml-fcnnls/src/fcnnls.js","../node_modules/ml-fcnnls/src/fcnnlsVector.js","../node_modules/binary-search/index.js","../node_modules/num-sort/index.js","../node_modules/ml-hash-table/src/primeFinder.js","../node_modules/ml-hash-table/src/HashTable.js","../node_modules/ml-sparse-matrix/src/index.js","../node_modules/ml-distance/src/distances/additiveSymmetric.js","../node_modules/ml-distance/src/distances/avg.js","../node_modules/ml-distance/src/distances/bhattacharyya.js","../node_modules/ml-distance/src/distances/canberra.js","../node_modules/ml-distance/src/distances/chebyshev.js","../node_modules/ml-distance/src/distances/clark.js","../node_modules/ml-distance/src/similarities/czekanowski.js","../node_modules/ml-distance/src/distances/czekanowski.js","../node_modules/ml-distance/src/distances/dice.js","../node_modules/ml-distance/src/distances/divergence.js","../node_modules/ml-distance/src/distances/fidelity.js","../node_modules/ml-distance/src/distances/gower.js","../node_modules/ml-distance/src/distances/harmonicMean.js","../node_modules/ml-distance/src/distances/hellinger.js","../node_modules/ml-distance/src/distances/innerProduct.js","../node_modules/ml-distance/src/distances/intersection.js","../node_modules/ml-distance/src/distances/jaccard.js","../node_modules/ml-distance/src/distances/jeffreys.js","../node_modules/ml-distance/src/distances/jensenDifference.js","../node_modules/ml-distance/src/distances/jensenShannon.js","../node_modules/ml-distance/src/distances/kdivergence.js","../node_modules/ml-distance/src/distances/kulczynski.js","../node_modules/ml-distance/src/distances/kullbackLeibler.js","../node_modules/ml-distance/src/distances/kumarHassebrook.js","../node_modules/ml-distance/src/distances/kumarJohnson.js","../node_modules/ml-distance/src/distances/lorentzian.js","../node_modules/ml-distance/src/distances/manhattan.js","../node_modules/ml-distance/src/distances/matusita.js","../node_modules/ml-distance/src/distances/minkowski.js","../node_modules/ml-distance/src/distances/motyka.js","../node_modules/ml-distance/src/distances/neyman.js","../node_modules/ml-distance/src/distances/pearson.js","../node_modules/ml-distance/src/distances/probabilisticSymmetric.js","../node_modules/ml-distance/src/distances/ruzicka.js","../node_modules/ml-distance/src/distances/soergel.js","../node_modules/ml-distance/src/distances/sorensen.js","../node_modules/ml-distance/src/distances/squared.js","../node_modules/ml-distance/src/distances/squaredChord.js","../node_modules/ml-distance/src/distances/taneja.js","../node_modules/ml-distance/src/similarities/tanimoto.js","../node_modules/ml-distance/src/distances/tanimoto.js","../node_modules/ml-distance/src/distances/topsoe.js","../node_modules/ml-distance/src/distances/waveHedges.js","../node_modules/ml-tree-similarity/src/createTree.js","../node_modules/ml-tree-similarity/src/getSimilarity.js","../node_modules/ml-tree-similarity/src/index.js","../node_modules/ml-distance/src/similarities/cosine.js","../node_modules/ml-distance/src/similarities/dice.js","../node_modules/ml-distance/src/similarities/intersection.js","../node_modules/ml-distance/src/similarities/jaccard.js","../node_modules/ml-distance/src/similarities/kulczynski.js","../node_modules/ml-distance/src/similarities/motyka.js","../node_modules/ml-distance/src/similarities/pearson.js","../node_modules/ml-distance/src/similarities/squaredChord.js","../node_modules/ml-ngmca/src/util/zeroInsteadOfNegative.js","../node_modules/ml-ngmca/src/stages/checkMatrixS.js","../node_modules/ml-ngmca/src/util/normBy.js","../node_modules/ml-ngmca/src/util/normProj.js","../node_modules/ml-ngmca/src/stages/updateMatrixA.js","../node_modules/ml-ngmca/src/util/getMax.js","../node_modules/ml-ngmca/src/stages/updateMatrixS.js","../node_modules/ml-ngmca/src/stages/initialize.js","../node_modules/ml-ngmca/src/stages/normalize.js","../node_modules/ml-ngmca/src/util/getMedians.js","../node_modules/ml-ngmca/src/util/dimMADstd.js","../node_modules/ml-ngmca/src/stages/updateLambda.js","../node_modules/ml-ngmca/src/nGMCA.js","../node_modules/ml-performance/src/measures.js","../node_modules/ml-performance/src/index.js","../node_modules/ml-pad-array/src/index.js","../node_modules/ml-savitzky-golay/src/index.js","../node_modules/ml-bit-array/src/creator.js","../node_modules/ml-bit-array/src/index.js","../node_modules/ml-gsd/node_modules/ml-savitzky-golay-generalized/src/index.js","../node_modules/ml-gsd/src/gsd.js","../node_modules/ml-optimize-lorentzian/src/sumOfGaussians.js","../node_modules/ml-optimize-lorentzian/src/optimizeGaussianSum.js","../node_modules/ml-optimize-lorentzian/src/singleGaussian.js","../node_modules/ml-optimize-lorentzian/src/optimizeSingleGaussian.js","../node_modules/ml-optimize-lorentzian/src/sumOfLorentzians.js","../node_modules/ml-optimize-lorentzian/src/optimizeLorentzianSum.js","../node_modules/ml-optimize-lorentzian/src/singleLorentzian.js","../node_modules/ml-optimize-lorentzian/src/optimizeSingleLorentzian.js","../node_modules/ml-gsd/src/post/optimizePeaks.js","../node_modules/ml-gsd/src/post/joinBroadPeaks.js","../node_modules/ml-gsd/src/post/broadenPeaks.js","../node_modules/is-any-array/src/index.js","../node_modules/ml-array-min/lib-es6/index.js","../node_modules/ml-array-max/lib-es6/index.js","../node_modules/ml-array-mode/lib-es6/index.js","../node_modules/ml-array-normed/node_modules/is-any-array/src/index.js","../node_modules/ml-array-normed/node_modules/ml-array-max/lib-es6/index.js","../node_modules/ml-array-normed/lib-es6/index.js","../node_modules/ml-array-sequential-fill/lib-es6/index.js","../node_modules/ml-array-variance/node_modules/is-any-array/src/index.js","../node_modules/ml-array-variance/lib-es6/index.js","../node_modules/ml-array-standard-deviation/lib-es6/index.js","../node_modules/ml-array-xy-centroids-merge/src/index.js","../node_modules/ml-arrayxy-closestx/src/index.js","../node_modules/ml-array-xy-covariance/src/index.js","../node_modules/ml-array-xy-max-merge/src/index.js","../node_modules/ml-array-xy-max-y/src/index.js","../node_modules/ml-array-xy-sort-x/src/index.js","../node_modules/ml-arrayxy-uniquex/src/index.js","../node_modules/ml-array-xy-weighted-merge/src/index.js","../node_modules/ml-zones/src/normalize.js","../node_modules/ml-zones/src/invert.js","../node_modules/ml-zones/src/zonesWithPoints.js","../node_modules/ml-array-xy-equally-spaced/src/integral.js","../node_modules/ml-array-xy-equally-spaced/src/equallySpacedSmooth.js","../node_modules/ml-array-xy-equally-spaced/src/equallySpacedSlot.js","../node_modules/ml-array-xy-equally-spaced/src/index.js","../node_modules/ml-array-xy-filter-x/src/getZones.js","../node_modules/ml-array-xy-filter-x/src/index.js","../src/index.js"],"sourcesContent":["const toString = Object.prototype.toString;\n\nexport default function isAnyArray(object) {\n  return toString.call(object).endsWith('Array]');\n}\n","import isArray from 'is-any-array';\n\nfunction max(input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!isArray(input)) {\n    throw new TypeError('input must be an array');\n  }\n\n  if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  var _options$fromIndex = options.fromIndex,\n      fromIndex = _options$fromIndex === void 0 ? 0 : _options$fromIndex,\n      _options$toIndex = options.toIndex,\n      toIndex = _options$toIndex === void 0 ? input.length : _options$toIndex;\n\n  if (fromIndex < 0 || fromIndex >= input.length || !Number.isInteger(fromIndex)) {\n    throw new Error('fromIndex must be a positive integer smaller than length');\n  }\n\n  if (toIndex <= fromIndex || toIndex > input.length || !Number.isInteger(toIndex)) {\n    throw new Error('toIndex must be an integer greater than fromIndex and at most equal to length');\n  }\n\n  var maxValue = input[fromIndex];\n\n  for (var i = fromIndex + 1; i < toIndex; i++) {\n    if (input[i] > maxValue) maxValue = input[i];\n  }\n\n  return maxValue;\n}\n\nexport default max;\n","import isArray from 'is-any-array';\n\nfunction min(input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!isArray(input)) {\n    throw new TypeError('input must be an array');\n  }\n\n  if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  var _options$fromIndex = options.fromIndex,\n      fromIndex = _options$fromIndex === void 0 ? 0 : _options$fromIndex,\n      _options$toIndex = options.toIndex,\n      toIndex = _options$toIndex === void 0 ? input.length : _options$toIndex;\n\n  if (fromIndex < 0 || fromIndex >= input.length || !Number.isInteger(fromIndex)) {\n    throw new Error('fromIndex must be a positive integer smaller than length');\n  }\n\n  if (toIndex <= fromIndex || toIndex > input.length || !Number.isInteger(toIndex)) {\n    throw new Error('toIndex must be an integer greater than fromIndex and at most equal to length');\n  }\n\n  var minValue = input[fromIndex];\n\n  for (var i = fromIndex + 1; i < toIndex; i++) {\n    if (input[i] < minValue) minValue = input[i];\n  }\n\n  return minValue;\n}\n\nexport default min;\n","import isArray from 'is-any-array';\nimport max from 'ml-array-max';\nimport min from 'ml-array-min';\n\nfunction rescale(input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!isArray(input)) {\n    throw new TypeError('input must be an array');\n  } else if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  var output;\n\n  if (options.output !== undefined) {\n    if (!isArray(options.output)) {\n      throw new TypeError('output option must be an array if specified');\n    }\n\n    output = options.output;\n  } else {\n    output = new Array(input.length);\n  }\n\n  var currentMin = min(input);\n  var currentMax = max(input);\n\n  if (currentMin === currentMax) {\n    throw new RangeError('minimum and maximum input values are equal. Cannot rescale a constant array');\n  }\n\n  var _options$min = options.min,\n      minValue = _options$min === void 0 ? options.autoMinMax ? currentMin : 0 : _options$min,\n      _options$max = options.max,\n      maxValue = _options$max === void 0 ? options.autoMinMax ? currentMax : 1 : _options$max;\n\n  if (minValue >= maxValue) {\n    throw new RangeError('min option must be smaller than max option');\n  }\n\n  var factor = (maxValue - minValue) / (currentMax - currentMin);\n\n  for (var i = 0; i < input.length; i++) {\n    output[i] = (input[i] - currentMin) * factor + minValue;\n  }\n\n  return output;\n}\n\nexport default rescale;\n","const indent = ' '.repeat(2);\r\nconst indentData = ' '.repeat(4);\r\n\r\nexport function inspectMatrix() {\r\n  return inspectMatrixWithOptions(this);\r\n}\r\n\r\nexport function inspectMatrixWithOptions(matrix, options = {}) {\r\n  const { maxRows = 15, maxColumns = 10, maxNumSize = 8 } = options;\r\n  return `${matrix.constructor.name} {\r\n${indent}[\r\n${indentData}${inspectData(matrix, maxRows, maxColumns, maxNumSize)}\r\n${indent}]\r\n${indent}rows: ${matrix.rows}\r\n${indent}columns: ${matrix.columns}\r\n}`;\r\n}\r\n\r\nfunction inspectData(matrix, maxRows, maxColumns, maxNumSize) {\r\n  const { rows, columns } = matrix;\r\n  const maxI = Math.min(rows, maxRows);\r\n  const maxJ = Math.min(columns, maxColumns);\r\n  const result = [];\r\n  for (let i = 0; i < maxI; i++) {\r\n    let line = [];\r\n    for (let j = 0; j < maxJ; j++) {\r\n      line.push(formatNumber(matrix.get(i, j), maxNumSize));\r\n    }\r\n    result.push(`${line.join(' ')}`);\r\n  }\r\n  if (maxJ !== columns) {\r\n    result[result.length - 1] += ` ... ${columns - maxColumns} more columns`;\r\n  }\r\n  if (maxI !== rows) {\r\n    result.push(`... ${rows - maxRows} more rows`);\r\n  }\r\n  return result.join(`\\n${indentData}`);\r\n}\r\n\r\nfunction formatNumber(num, maxNumSize) {\r\n  const numStr = String(num);\r\n  if (numStr.length <= maxNumSize) {\r\n    return numStr.padEnd(maxNumSize, ' ');\r\n  }\r\n  const precise = num.toPrecision(maxNumSize - 2);\r\n  if (precise.length <= maxNumSize) {\r\n    return precise;\r\n  }\r\n  const exponential = num.toExponential(maxNumSize - 2);\r\n  const eIndex = exponential.indexOf('e');\r\n  const e = exponential.slice(eIndex);\r\n  return exponential.slice(0, maxNumSize - e.length) + e;\r\n}\r\n","export function installMathOperations(AbstractMatrix, Matrix) {\r\n  AbstractMatrix.prototype.add = function add(value) {\r\n    if (typeof value === 'number') return this.addS(value);\r\n    return this.addM(value);\r\n  };\r\n\r\n  AbstractMatrix.prototype.addS = function addS(value) {\r\n    for (let i = 0; i < this.rows; i++) {\r\n      for (let j = 0; j < this.columns; j++) {\r\n        this.set(i, j, this.get(i, j) + value);\r\n      }\r\n    }\r\n    return this;\r\n  };\r\n\r\n  AbstractMatrix.prototype.addM = function addM(matrix) {\r\n    matrix = Matrix.checkMatrix(matrix);\r\n    if (this.rows !== matrix.rows ||\r\n      this.columns !== matrix.columns) {\r\n      throw new RangeError('Matrices dimensions must be equal');\r\n    }\r\n    for (let i = 0; i < this.rows; i++) {\r\n      for (let j = 0; j < this.columns; j++) {\r\n        this.set(i, j, this.get(i, j) + matrix.get(i, j));\r\n      }\r\n    }\r\n    return this;\r\n  };\r\n\r\n  AbstractMatrix.add = function add(matrix, value) {\r\n    const newMatrix = new Matrix(matrix);\r\n    return newMatrix.add(value);\r\n  };\r\n\r\n  AbstractMatrix.prototype.sub = function sub(value) {\r\n    if (typeof value === 'number') return this.subS(value);\r\n    return this.subM(value);\r\n  };\r\n\r\n  AbstractMatrix.prototype.subS = function subS(value) {\r\n    for (let i = 0; i < this.rows; i++) {\r\n      for (let j = 0; j < this.columns; j++) {\r\n        this.set(i, j, this.get(i, j) - value);\r\n      }\r\n    }\r\n    return this;\r\n  };\r\n\r\n  AbstractMatrix.prototype.subM = function subM(matrix) {\r\n    matrix = Matrix.checkMatrix(matrix);\r\n    if (this.rows !== matrix.rows ||\r\n      this.columns !== matrix.columns) {\r\n      throw new RangeError('Matrices dimensions must be equal');\r\n    }\r\n    for (let i = 0; i < this.rows; i++) {\r\n      for (let j = 0; j < this.columns; j++) {\r\n        this.set(i, j, this.get(i, j) - matrix.get(i, j));\r\n      }\r\n    }\r\n    return this;\r\n  };\r\n\r\n  AbstractMatrix.sub = function sub(matrix, value) {\r\n    const newMatrix = new Matrix(matrix);\r\n    return newMatrix.sub(value);\r\n  };\r\n  AbstractMatrix.prototype.subtract = AbstractMatrix.prototype.sub;\r\n  AbstractMatrix.prototype.subtractS = AbstractMatrix.prototype.subS;\r\n  AbstractMatrix.prototype.subtractM = AbstractMatrix.prototype.subM;\r\n  AbstractMatrix.subtract = AbstractMatrix.sub;\r\n\r\n  AbstractMatrix.prototype.mul = function mul(value) {\r\n    if (typeof value === 'number') return this.mulS(value);\r\n    return this.mulM(value);\r\n  };\r\n\r\n  AbstractMatrix.prototype.mulS = function mulS(value) {\r\n    for (let i = 0; i < this.rows; i++) {\r\n      for (let j = 0; j < this.columns; j++) {\r\n        this.set(i, j, this.get(i, j) * value);\r\n      }\r\n    }\r\n    return this;\r\n  };\r\n\r\n  AbstractMatrix.prototype.mulM = function mulM(matrix) {\r\n    matrix = Matrix.checkMatrix(matrix);\r\n    if (this.rows !== matrix.rows ||\r\n      this.columns !== matrix.columns) {\r\n      throw new RangeError('Matrices dimensions must be equal');\r\n    }\r\n    for (let i = 0; i < this.rows; i++) {\r\n      for (let j = 0; j < this.columns; j++) {\r\n        this.set(i, j, this.get(i, j) * matrix.get(i, j));\r\n      }\r\n    }\r\n    return this;\r\n  };\r\n\r\n  AbstractMatrix.mul = function mul(matrix, value) {\r\n    const newMatrix = new Matrix(matrix);\r\n    return newMatrix.mul(value);\r\n  };\r\n  AbstractMatrix.prototype.multiply = AbstractMatrix.prototype.mul;\r\n  AbstractMatrix.prototype.multiplyS = AbstractMatrix.prototype.mulS;\r\n  AbstractMatrix.prototype.multiplyM = AbstractMatrix.prototype.mulM;\r\n  AbstractMatrix.multiply = AbstractMatrix.mul;\r\n\r\n  AbstractMatrix.prototype.div = function div(value) {\r\n    if (typeof value === 'number') return this.divS(value);\r\n    return this.divM(value);\r\n  };\r\n\r\n  AbstractMatrix.prototype.divS = function divS(value) {\r\n    for (let i = 0; i < this.rows; i++) {\r\n      for (let j = 0; j < this.columns; j++) {\r\n        this.set(i, j, this.get(i, j) / value);\r\n      }\r\n    }\r\n    return this;\r\n  };\r\n\r\n  AbstractMatrix.prototype.divM = function divM(matrix) {\r\n    matrix = Matrix.checkMatrix(matrix);\r\n    if (this.rows !== matrix.rows ||\r\n      this.columns !== matrix.columns) {\r\n      throw new RangeError('Matrices dimensions must be equal');\r\n    }\r\n    for (let i = 0; i < this.rows; i++) {\r\n      for (let j = 0; j < this.columns; j++) {\r\n        this.set(i, j, this.get(i, j) / matrix.get(i, j));\r\n      }\r\n    }\r\n    return this;\r\n  };\r\n\r\n  AbstractMatrix.div = function div(matrix, value) {\r\n    const newMatrix = new Matrix(matrix);\r\n    return newMatrix.div(value);\r\n  };\r\n  AbstractMatrix.prototype.divide = AbstractMatrix.prototype.div;\r\n  AbstractMatrix.prototype.divideS = AbstractMatrix.prototype.divS;\r\n  AbstractMatrix.prototype.divideM = AbstractMatrix.prototype.divM;\r\n  AbstractMatrix.divide = AbstractMatrix.div;\r\n\r\n  AbstractMatrix.prototype.mod = function mod(value) {\r\n    if (typeof value === 'number') return this.modS(value);\r\n    return this.modM(value);\r\n  };\r\n\r\n  AbstractMatrix.prototype.modS = function modS(value) {\r\n    for (let i = 0; i < this.rows; i++) {\r\n      for (let j = 0; j < this.columns; j++) {\r\n        this.set(i, j, this.get(i, j) % value);\r\n      }\r\n    }\r\n    return this;\r\n  };\r\n\r\n  AbstractMatrix.prototype.modM = function modM(matrix) {\r\n    matrix = Matrix.checkMatrix(matrix);\r\n    if (this.rows !== matrix.rows ||\r\n      this.columns !== matrix.columns) {\r\n      throw new RangeError('Matrices dimensions must be equal');\r\n    }\r\n    for (let i = 0; i < this.rows; i++) {\r\n      for (let j = 0; j < this.columns; j++) {\r\n        this.set(i, j, this.get(i, j) % matrix.get(i, j));\r\n      }\r\n    }\r\n    return this;\r\n  };\r\n\r\n  AbstractMatrix.mod = function mod(matrix, value) {\r\n    const newMatrix = new Matrix(matrix);\r\n    return newMatrix.mod(value);\r\n  };\r\n  AbstractMatrix.prototype.modulus = AbstractMatrix.prototype.mod;\r\n  AbstractMatrix.prototype.modulusS = AbstractMatrix.prototype.modS;\r\n  AbstractMatrix.prototype.modulusM = AbstractMatrix.prototype.modM;\r\n  AbstractMatrix.modulus = AbstractMatrix.mod;\r\n\r\n  AbstractMatrix.prototype.and = function and(value) {\r\n    if (typeof value === 'number') return this.andS(value);\r\n    return this.andM(value);\r\n  };\r\n\r\n  AbstractMatrix.prototype.andS = function andS(value) {\r\n    for (let i = 0; i < this.rows; i++) {\r\n      for (let j = 0; j < this.columns; j++) {\r\n        this.set(i, j, this.get(i, j) & value);\r\n      }\r\n    }\r\n    return this;\r\n  };\r\n\r\n  AbstractMatrix.prototype.andM = function andM(matrix) {\r\n    matrix = Matrix.checkMatrix(matrix);\r\n    if (this.rows !== matrix.rows ||\r\n      this.columns !== matrix.columns) {\r\n      throw new RangeError('Matrices dimensions must be equal');\r\n    }\r\n    for (let i = 0; i < this.rows; i++) {\r\n      for (let j = 0; j < this.columns; j++) {\r\n        this.set(i, j, this.get(i, j) & matrix.get(i, j));\r\n      }\r\n    }\r\n    return this;\r\n  };\r\n\r\n  AbstractMatrix.and = function and(matrix, value) {\r\n    const newMatrix = new Matrix(matrix);\r\n    return newMatrix.and(value);\r\n  };\r\n\r\n  AbstractMatrix.prototype.or = function or(value) {\r\n    if (typeof value === 'number') return this.orS(value);\r\n    return this.orM(value);\r\n  };\r\n\r\n  AbstractMatrix.prototype.orS = function orS(value) {\r\n    for (let i = 0; i < this.rows; i++) {\r\n      for (let j = 0; j < this.columns; j++) {\r\n        this.set(i, j, this.get(i, j) | value);\r\n      }\r\n    }\r\n    return this;\r\n  };\r\n\r\n  AbstractMatrix.prototype.orM = function orM(matrix) {\r\n    matrix = Matrix.checkMatrix(matrix);\r\n    if (this.rows !== matrix.rows ||\r\n      this.columns !== matrix.columns) {\r\n      throw new RangeError('Matrices dimensions must be equal');\r\n    }\r\n    for (let i = 0; i < this.rows; i++) {\r\n      for (let j = 0; j < this.columns; j++) {\r\n        this.set(i, j, this.get(i, j) | matrix.get(i, j));\r\n      }\r\n    }\r\n    return this;\r\n  };\r\n\r\n  AbstractMatrix.or = function or(matrix, value) {\r\n    const newMatrix = new Matrix(matrix);\r\n    return newMatrix.or(value);\r\n  };\r\n\r\n  AbstractMatrix.prototype.xor = function xor(value) {\r\n    if (typeof value === 'number') return this.xorS(value);\r\n    return this.xorM(value);\r\n  };\r\n\r\n  AbstractMatrix.prototype.xorS = function xorS(value) {\r\n    for (let i = 0; i < this.rows; i++) {\r\n      for (let j = 0; j < this.columns; j++) {\r\n        this.set(i, j, this.get(i, j) ^ value);\r\n      }\r\n    }\r\n    return this;\r\n  };\r\n\r\n  AbstractMatrix.prototype.xorM = function xorM(matrix) {\r\n    matrix = Matrix.checkMatrix(matrix);\r\n    if (this.rows !== matrix.rows ||\r\n      this.columns !== matrix.columns) {\r\n      throw new RangeError('Matrices dimensions must be equal');\r\n    }\r\n    for (let i = 0; i < this.rows; i++) {\r\n      for (let j = 0; j < this.columns; j++) {\r\n        this.set(i, j, this.get(i, j) ^ matrix.get(i, j));\r\n      }\r\n    }\r\n    return this;\r\n  };\r\n\r\n  AbstractMatrix.xor = function xor(matrix, value) {\r\n    const newMatrix = new Matrix(matrix);\r\n    return newMatrix.xor(value);\r\n  };\r\n\r\n  AbstractMatrix.prototype.leftShift = function leftShift(value) {\r\n    if (typeof value === 'number') return this.leftShiftS(value);\r\n    return this.leftShiftM(value);\r\n  };\r\n\r\n  AbstractMatrix.prototype.leftShiftS = function leftShiftS(value) {\r\n    for (let i = 0; i < this.rows; i++) {\r\n      for (let j = 0; j < this.columns; j++) {\r\n        this.set(i, j, this.get(i, j) << value);\r\n      }\r\n    }\r\n    return this;\r\n  };\r\n\r\n  AbstractMatrix.prototype.leftShiftM = function leftShiftM(matrix) {\r\n    matrix = Matrix.checkMatrix(matrix);\r\n    if (this.rows !== matrix.rows ||\r\n      this.columns !== matrix.columns) {\r\n      throw new RangeError('Matrices dimensions must be equal');\r\n    }\r\n    for (let i = 0; i < this.rows; i++) {\r\n      for (let j = 0; j < this.columns; j++) {\r\n        this.set(i, j, this.get(i, j) << matrix.get(i, j));\r\n      }\r\n    }\r\n    return this;\r\n  };\r\n\r\n  AbstractMatrix.leftShift = function leftShift(matrix, value) {\r\n    const newMatrix = new Matrix(matrix);\r\n    return newMatrix.leftShift(value);\r\n  };\r\n\r\n  AbstractMatrix.prototype.signPropagatingRightShift = function signPropagatingRightShift(value) {\r\n    if (typeof value === 'number') return this.signPropagatingRightShiftS(value);\r\n    return this.signPropagatingRightShiftM(value);\r\n  };\r\n\r\n  AbstractMatrix.prototype.signPropagatingRightShiftS = function signPropagatingRightShiftS(value) {\r\n    for (let i = 0; i < this.rows; i++) {\r\n      for (let j = 0; j < this.columns; j++) {\r\n        this.set(i, j, this.get(i, j) >> value);\r\n      }\r\n    }\r\n    return this;\r\n  };\r\n\r\n  AbstractMatrix.prototype.signPropagatingRightShiftM = function signPropagatingRightShiftM(matrix) {\r\n    matrix = Matrix.checkMatrix(matrix);\r\n    if (this.rows !== matrix.rows ||\r\n      this.columns !== matrix.columns) {\r\n      throw new RangeError('Matrices dimensions must be equal');\r\n    }\r\n    for (let i = 0; i < this.rows; i++) {\r\n      for (let j = 0; j < this.columns; j++) {\r\n        this.set(i, j, this.get(i, j) >> matrix.get(i, j));\r\n      }\r\n    }\r\n    return this;\r\n  };\r\n\r\n  AbstractMatrix.signPropagatingRightShift = function signPropagatingRightShift(matrix, value) {\r\n    const newMatrix = new Matrix(matrix);\r\n    return newMatrix.signPropagatingRightShift(value);\r\n  };\r\n\r\n  AbstractMatrix.prototype.rightShift = function rightShift(value) {\r\n    if (typeof value === 'number') return this.rightShiftS(value);\r\n    return this.rightShiftM(value);\r\n  };\r\n\r\n  AbstractMatrix.prototype.rightShiftS = function rightShiftS(value) {\r\n    for (let i = 0; i < this.rows; i++) {\r\n      for (let j = 0; j < this.columns; j++) {\r\n        this.set(i, j, this.get(i, j) >>> value);\r\n      }\r\n    }\r\n    return this;\r\n  };\r\n\r\n  AbstractMatrix.prototype.rightShiftM = function rightShiftM(matrix) {\r\n    matrix = Matrix.checkMatrix(matrix);\r\n    if (this.rows !== matrix.rows ||\r\n      this.columns !== matrix.columns) {\r\n      throw new RangeError('Matrices dimensions must be equal');\r\n    }\r\n    for (let i = 0; i < this.rows; i++) {\r\n      for (let j = 0; j < this.columns; j++) {\r\n        this.set(i, j, this.get(i, j) >>> matrix.get(i, j));\r\n      }\r\n    }\r\n    return this;\r\n  };\r\n\r\n  AbstractMatrix.rightShift = function rightShift(matrix, value) {\r\n    const newMatrix = new Matrix(matrix);\r\n    return newMatrix.rightShift(value);\r\n  };\r\n  AbstractMatrix.prototype.zeroFillRightShift = AbstractMatrix.prototype.rightShift;\r\n  AbstractMatrix.prototype.zeroFillRightShiftS = AbstractMatrix.prototype.rightShiftS;\r\n  AbstractMatrix.prototype.zeroFillRightShiftM = AbstractMatrix.prototype.rightShiftM;\r\n  AbstractMatrix.zeroFillRightShift = AbstractMatrix.rightShift;\r\n\r\n  AbstractMatrix.prototype.not = function not() {\r\n    for (let i = 0; i < this.rows; i++) {\r\n      for (let j = 0; j < this.columns; j++) {\r\n        this.set(i, j, ~(this.get(i, j)));\r\n      }\r\n    }\r\n    return this;\r\n  };\r\n\r\n  AbstractMatrix.not = function not(matrix) {\r\n    const newMatrix = new Matrix(matrix);\r\n    return newMatrix.not();\r\n  };\r\n\r\n  AbstractMatrix.prototype.abs = function abs() {\r\n    for (let i = 0; i < this.rows; i++) {\r\n      for (let j = 0; j < this.columns; j++) {\r\n        this.set(i, j, Math.abs(this.get(i, j)));\r\n      }\r\n    }\r\n    return this;\r\n  };\r\n\r\n  AbstractMatrix.abs = function abs(matrix) {\r\n    const newMatrix = new Matrix(matrix);\r\n    return newMatrix.abs();\r\n  };\r\n\r\n  AbstractMatrix.prototype.acos = function acos() {\r\n    for (let i = 0; i < this.rows; i++) {\r\n      for (let j = 0; j < this.columns; j++) {\r\n        this.set(i, j, Math.acos(this.get(i, j)));\r\n      }\r\n    }\r\n    return this;\r\n  };\r\n\r\n  AbstractMatrix.acos = function acos(matrix) {\r\n    const newMatrix = new Matrix(matrix);\r\n    return newMatrix.acos();\r\n  };\r\n\r\n  AbstractMatrix.prototype.acosh = function acosh() {\r\n    for (let i = 0; i < this.rows; i++) {\r\n      for (let j = 0; j < this.columns; j++) {\r\n        this.set(i, j, Math.acosh(this.get(i, j)));\r\n      }\r\n    }\r\n    return this;\r\n  };\r\n\r\n  AbstractMatrix.acosh = function acosh(matrix) {\r\n    const newMatrix = new Matrix(matrix);\r\n    return newMatrix.acosh();\r\n  };\r\n\r\n  AbstractMatrix.prototype.asin = function asin() {\r\n    for (let i = 0; i < this.rows; i++) {\r\n      for (let j = 0; j < this.columns; j++) {\r\n        this.set(i, j, Math.asin(this.get(i, j)));\r\n      }\r\n    }\r\n    return this;\r\n  };\r\n\r\n  AbstractMatrix.asin = function asin(matrix) {\r\n    const newMatrix = new Matrix(matrix);\r\n    return newMatrix.asin();\r\n  };\r\n\r\n  AbstractMatrix.prototype.asinh = function asinh() {\r\n    for (let i = 0; i < this.rows; i++) {\r\n      for (let j = 0; j < this.columns; j++) {\r\n        this.set(i, j, Math.asinh(this.get(i, j)));\r\n      }\r\n    }\r\n    return this;\r\n  };\r\n\r\n  AbstractMatrix.asinh = function asinh(matrix) {\r\n    const newMatrix = new Matrix(matrix);\r\n    return newMatrix.asinh();\r\n  };\r\n\r\n  AbstractMatrix.prototype.atan = function atan() {\r\n    for (let i = 0; i < this.rows; i++) {\r\n      for (let j = 0; j < this.columns; j++) {\r\n        this.set(i, j, Math.atan(this.get(i, j)));\r\n      }\r\n    }\r\n    return this;\r\n  };\r\n\r\n  AbstractMatrix.atan = function atan(matrix) {\r\n    const newMatrix = new Matrix(matrix);\r\n    return newMatrix.atan();\r\n  };\r\n\r\n  AbstractMatrix.prototype.atanh = function atanh() {\r\n    for (let i = 0; i < this.rows; i++) {\r\n      for (let j = 0; j < this.columns; j++) {\r\n        this.set(i, j, Math.atanh(this.get(i, j)));\r\n      }\r\n    }\r\n    return this;\r\n  };\r\n\r\n  AbstractMatrix.atanh = function atanh(matrix) {\r\n    const newMatrix = new Matrix(matrix);\r\n    return newMatrix.atanh();\r\n  };\r\n\r\n  AbstractMatrix.prototype.cbrt = function cbrt() {\r\n    for (let i = 0; i < this.rows; i++) {\r\n      for (let j = 0; j < this.columns; j++) {\r\n        this.set(i, j, Math.cbrt(this.get(i, j)));\r\n      }\r\n    }\r\n    return this;\r\n  };\r\n\r\n  AbstractMatrix.cbrt = function cbrt(matrix) {\r\n    const newMatrix = new Matrix(matrix);\r\n    return newMatrix.cbrt();\r\n  };\r\n\r\n  AbstractMatrix.prototype.ceil = function ceil() {\r\n    for (let i = 0; i < this.rows; i++) {\r\n      for (let j = 0; j < this.columns; j++) {\r\n        this.set(i, j, Math.ceil(this.get(i, j)));\r\n      }\r\n    }\r\n    return this;\r\n  };\r\n\r\n  AbstractMatrix.ceil = function ceil(matrix) {\r\n    const newMatrix = new Matrix(matrix);\r\n    return newMatrix.ceil();\r\n  };\r\n\r\n  AbstractMatrix.prototype.clz32 = function clz32() {\r\n    for (let i = 0; i < this.rows; i++) {\r\n      for (let j = 0; j < this.columns; j++) {\r\n        this.set(i, j, Math.clz32(this.get(i, j)));\r\n      }\r\n    }\r\n    return this;\r\n  };\r\n\r\n  AbstractMatrix.clz32 = function clz32(matrix) {\r\n    const newMatrix = new Matrix(matrix);\r\n    return newMatrix.clz32();\r\n  };\r\n\r\n  AbstractMatrix.prototype.cos = function cos() {\r\n    for (let i = 0; i < this.rows; i++) {\r\n      for (let j = 0; j < this.columns; j++) {\r\n        this.set(i, j, Math.cos(this.get(i, j)));\r\n      }\r\n    }\r\n    return this;\r\n  };\r\n\r\n  AbstractMatrix.cos = function cos(matrix) {\r\n    const newMatrix = new Matrix(matrix);\r\n    return newMatrix.cos();\r\n  };\r\n\r\n  AbstractMatrix.prototype.cosh = function cosh() {\r\n    for (let i = 0; i < this.rows; i++) {\r\n      for (let j = 0; j < this.columns; j++) {\r\n        this.set(i, j, Math.cosh(this.get(i, j)));\r\n      }\r\n    }\r\n    return this;\r\n  };\r\n\r\n  AbstractMatrix.cosh = function cosh(matrix) {\r\n    const newMatrix = new Matrix(matrix);\r\n    return newMatrix.cosh();\r\n  };\r\n\r\n  AbstractMatrix.prototype.exp = function exp() {\r\n    for (let i = 0; i < this.rows; i++) {\r\n      for (let j = 0; j < this.columns; j++) {\r\n        this.set(i, j, Math.exp(this.get(i, j)));\r\n      }\r\n    }\r\n    return this;\r\n  };\r\n\r\n  AbstractMatrix.exp = function exp(matrix) {\r\n    const newMatrix = new Matrix(matrix);\r\n    return newMatrix.exp();\r\n  };\r\n\r\n  AbstractMatrix.prototype.expm1 = function expm1() {\r\n    for (let i = 0; i < this.rows; i++) {\r\n      for (let j = 0; j < this.columns; j++) {\r\n        this.set(i, j, Math.expm1(this.get(i, j)));\r\n      }\r\n    }\r\n    return this;\r\n  };\r\n\r\n  AbstractMatrix.expm1 = function expm1(matrix) {\r\n    const newMatrix = new Matrix(matrix);\r\n    return newMatrix.expm1();\r\n  };\r\n\r\n  AbstractMatrix.prototype.floor = function floor() {\r\n    for (let i = 0; i < this.rows; i++) {\r\n      for (let j = 0; j < this.columns; j++) {\r\n        this.set(i, j, Math.floor(this.get(i, j)));\r\n      }\r\n    }\r\n    return this;\r\n  };\r\n\r\n  AbstractMatrix.floor = function floor(matrix) {\r\n    const newMatrix = new Matrix(matrix);\r\n    return newMatrix.floor();\r\n  };\r\n\r\n  AbstractMatrix.prototype.fround = function fround() {\r\n    for (let i = 0; i < this.rows; i++) {\r\n      for (let j = 0; j < this.columns; j++) {\r\n        this.set(i, j, Math.fround(this.get(i, j)));\r\n      }\r\n    }\r\n    return this;\r\n  };\r\n\r\n  AbstractMatrix.fround = function fround(matrix) {\r\n    const newMatrix = new Matrix(matrix);\r\n    return newMatrix.fround();\r\n  };\r\n\r\n  AbstractMatrix.prototype.log = function log() {\r\n    for (let i = 0; i < this.rows; i++) {\r\n      for (let j = 0; j < this.columns; j++) {\r\n        this.set(i, j, Math.log(this.get(i, j)));\r\n      }\r\n    }\r\n    return this;\r\n  };\r\n\r\n  AbstractMatrix.log = function log(matrix) {\r\n    const newMatrix = new Matrix(matrix);\r\n    return newMatrix.log();\r\n  };\r\n\r\n  AbstractMatrix.prototype.log1p = function log1p() {\r\n    for (let i = 0; i < this.rows; i++) {\r\n      for (let j = 0; j < this.columns; j++) {\r\n        this.set(i, j, Math.log1p(this.get(i, j)));\r\n      }\r\n    }\r\n    return this;\r\n  };\r\n\r\n  AbstractMatrix.log1p = function log1p(matrix) {\r\n    const newMatrix = new Matrix(matrix);\r\n    return newMatrix.log1p();\r\n  };\r\n\r\n  AbstractMatrix.prototype.log10 = function log10() {\r\n    for (let i = 0; i < this.rows; i++) {\r\n      for (let j = 0; j < this.columns; j++) {\r\n        this.set(i, j, Math.log10(this.get(i, j)));\r\n      }\r\n    }\r\n    return this;\r\n  };\r\n\r\n  AbstractMatrix.log10 = function log10(matrix) {\r\n    const newMatrix = new Matrix(matrix);\r\n    return newMatrix.log10();\r\n  };\r\n\r\n  AbstractMatrix.prototype.log2 = function log2() {\r\n    for (let i = 0; i < this.rows; i++) {\r\n      for (let j = 0; j < this.columns; j++) {\r\n        this.set(i, j, Math.log2(this.get(i, j)));\r\n      }\r\n    }\r\n    return this;\r\n  };\r\n\r\n  AbstractMatrix.log2 = function log2(matrix) {\r\n    const newMatrix = new Matrix(matrix);\r\n    return newMatrix.log2();\r\n  };\r\n\r\n  AbstractMatrix.prototype.round = function round() {\r\n    for (let i = 0; i < this.rows; i++) {\r\n      for (let j = 0; j < this.columns; j++) {\r\n        this.set(i, j, Math.round(this.get(i, j)));\r\n      }\r\n    }\r\n    return this;\r\n  };\r\n\r\n  AbstractMatrix.round = function round(matrix) {\r\n    const newMatrix = new Matrix(matrix);\r\n    return newMatrix.round();\r\n  };\r\n\r\n  AbstractMatrix.prototype.sign = function sign() {\r\n    for (let i = 0; i < this.rows; i++) {\r\n      for (let j = 0; j < this.columns; j++) {\r\n        this.set(i, j, Math.sign(this.get(i, j)));\r\n      }\r\n    }\r\n    return this;\r\n  };\r\n\r\n  AbstractMatrix.sign = function sign(matrix) {\r\n    const newMatrix = new Matrix(matrix);\r\n    return newMatrix.sign();\r\n  };\r\n\r\n  AbstractMatrix.prototype.sin = function sin() {\r\n    for (let i = 0; i < this.rows; i++) {\r\n      for (let j = 0; j < this.columns; j++) {\r\n        this.set(i, j, Math.sin(this.get(i, j)));\r\n      }\r\n    }\r\n    return this;\r\n  };\r\n\r\n  AbstractMatrix.sin = function sin(matrix) {\r\n    const newMatrix = new Matrix(matrix);\r\n    return newMatrix.sin();\r\n  };\r\n\r\n  AbstractMatrix.prototype.sinh = function sinh() {\r\n    for (let i = 0; i < this.rows; i++) {\r\n      for (let j = 0; j < this.columns; j++) {\r\n        this.set(i, j, Math.sinh(this.get(i, j)));\r\n      }\r\n    }\r\n    return this;\r\n  };\r\n\r\n  AbstractMatrix.sinh = function sinh(matrix) {\r\n    const newMatrix = new Matrix(matrix);\r\n    return newMatrix.sinh();\r\n  };\r\n\r\n  AbstractMatrix.prototype.sqrt = function sqrt() {\r\n    for (let i = 0; i < this.rows; i++) {\r\n      for (let j = 0; j < this.columns; j++) {\r\n        this.set(i, j, Math.sqrt(this.get(i, j)));\r\n      }\r\n    }\r\n    return this;\r\n  };\r\n\r\n  AbstractMatrix.sqrt = function sqrt(matrix) {\r\n    const newMatrix = new Matrix(matrix);\r\n    return newMatrix.sqrt();\r\n  };\r\n\r\n  AbstractMatrix.prototype.tan = function tan() {\r\n    for (let i = 0; i < this.rows; i++) {\r\n      for (let j = 0; j < this.columns; j++) {\r\n        this.set(i, j, Math.tan(this.get(i, j)));\r\n      }\r\n    }\r\n    return this;\r\n  };\r\n\r\n  AbstractMatrix.tan = function tan(matrix) {\r\n    const newMatrix = new Matrix(matrix);\r\n    return newMatrix.tan();\r\n  };\r\n\r\n  AbstractMatrix.prototype.tanh = function tanh() {\r\n    for (let i = 0; i < this.rows; i++) {\r\n      for (let j = 0; j < this.columns; j++) {\r\n        this.set(i, j, Math.tanh(this.get(i, j)));\r\n      }\r\n    }\r\n    return this;\r\n  };\r\n\r\n  AbstractMatrix.tanh = function tanh(matrix) {\r\n    const newMatrix = new Matrix(matrix);\r\n    return newMatrix.tanh();\r\n  };\r\n\r\n  AbstractMatrix.prototype.trunc = function trunc() {\r\n    for (let i = 0; i < this.rows; i++) {\r\n      for (let j = 0; j < this.columns; j++) {\r\n        this.set(i, j, Math.trunc(this.get(i, j)));\r\n      }\r\n    }\r\n    return this;\r\n  };\r\n\r\n  AbstractMatrix.trunc = function trunc(matrix) {\r\n    const newMatrix = new Matrix(matrix);\r\n    return newMatrix.trunc();\r\n  };\r\n\r\n  AbstractMatrix.pow = function pow(matrix, arg0) {\r\n    const newMatrix = new Matrix(matrix);\r\n    return newMatrix.pow(arg0);\r\n  };\r\n\r\n  AbstractMatrix.prototype.pow = function pow(value) {\r\n    if (typeof value === 'number') return this.powS(value);\r\n    return this.powM(value);\r\n  };\r\n\r\n  AbstractMatrix.prototype.powS = function powS(value) {\r\n    for (let i = 0; i < this.rows; i++) {\r\n      for (let j = 0; j < this.columns; j++) {\r\n        this.set(i, j, Math.pow(this.get(i, j), value));\r\n      }\r\n    }\r\n    return this;\r\n  };\r\n\r\n  AbstractMatrix.prototype.powM = function powM(matrix) {\r\n    matrix = Matrix.checkMatrix(matrix);\r\n    if (this.rows !== matrix.rows ||\r\n      this.columns !== matrix.columns) {\r\n      throw new RangeError('Matrices dimensions must be equal');\r\n    }\r\n    for (let i = 0; i < this.rows; i++) {\r\n      for (let j = 0; j < this.columns; j++) {\r\n        this.set(i, j, Math.pow(this.get(i, j), matrix.get(i, j)));\r\n      }\r\n    }\r\n    return this;\r\n  };\r\n}\r\n","/**\r\n * @private\r\n * Check that a row index is not out of bounds\r\n * @param {Matrix} matrix\r\n * @param {number} index\r\n * @param {boolean} [outer]\r\n */\r\nexport function checkRowIndex(matrix, index, outer) {\r\n  let max = outer ? matrix.rows : matrix.rows - 1;\r\n  if (index < 0 || index > max) {\r\n    throw new RangeError('Row index out of range');\r\n  }\r\n}\r\n\r\n/**\r\n * @private\r\n * Check that a column index is not out of bounds\r\n * @param {Matrix} matrix\r\n * @param {number} index\r\n * @param {boolean} [outer]\r\n */\r\nexport function checkColumnIndex(matrix, index, outer) {\r\n  let max = outer ? matrix.columns : matrix.columns - 1;\r\n  if (index < 0 || index > max) {\r\n    throw new RangeError('Column index out of range');\r\n  }\r\n}\r\n\r\n/**\r\n * @private\r\n * Check that the provided vector is an array with the right length\r\n * @param {Matrix} matrix\r\n * @param {Array|Matrix} vector\r\n * @return {Array}\r\n * @throws {RangeError}\r\n */\r\nexport function checkRowVector(matrix, vector) {\r\n  if (vector.to1DArray) {\r\n    vector = vector.to1DArray();\r\n  }\r\n  if (vector.length !== matrix.columns) {\r\n    throw new RangeError(\r\n      'vector size must be the same as the number of columns',\r\n    );\r\n  }\r\n  return vector;\r\n}\r\n\r\n/**\r\n * @private\r\n * Check that the provided vector is an array with the right length\r\n * @param {Matrix} matrix\r\n * @param {Array|Matrix} vector\r\n * @return {Array}\r\n * @throws {RangeError}\r\n */\r\nexport function checkColumnVector(matrix, vector) {\r\n  if (vector.to1DArray) {\r\n    vector = vector.to1DArray();\r\n  }\r\n  if (vector.length !== matrix.rows) {\r\n    throw new RangeError('vector size must be the same as the number of rows');\r\n  }\r\n  return vector;\r\n}\r\n\r\nexport function checkIndices(matrix, rowIndices, columnIndices) {\r\n  return {\r\n    row: checkRowIndices(matrix, rowIndices),\r\n    column: checkColumnIndices(matrix, columnIndices),\r\n  };\r\n}\r\n\r\nexport function checkRowIndices(matrix, rowIndices) {\r\n  if (typeof rowIndices !== 'object') {\r\n    throw new TypeError('unexpected type for row indices');\r\n  }\r\n\r\n  let rowOut = rowIndices.some((r) => {\r\n    return r < 0 || r >= matrix.rows;\r\n  });\r\n\r\n  if (rowOut) {\r\n    throw new RangeError('row indices are out of range');\r\n  }\r\n\r\n  if (!Array.isArray(rowIndices)) rowIndices = Array.from(rowIndices);\r\n\r\n  return rowIndices;\r\n}\r\n\r\nexport function checkColumnIndices(matrix, columnIndices) {\r\n  if (typeof columnIndices !== 'object') {\r\n    throw new TypeError('unexpected type for column indices');\r\n  }\r\n\r\n  let columnOut = columnIndices.some((c) => {\r\n    return c < 0 || c >= matrix.columns;\r\n  });\r\n\r\n  if (columnOut) {\r\n    throw new RangeError('column indices are out of range');\r\n  }\r\n  if (!Array.isArray(columnIndices)) columnIndices = Array.from(columnIndices);\r\n\r\n  return columnIndices;\r\n}\r\n\r\nexport function checkRange(matrix, startRow, endRow, startColumn, endColumn) {\r\n  if (arguments.length !== 5) {\r\n    throw new RangeError('expected 4 arguments');\r\n  }\r\n  checkNumber('startRow', startRow);\r\n  checkNumber('endRow', endRow);\r\n  checkNumber('startColumn', startColumn);\r\n  checkNumber('endColumn', endColumn);\r\n  if (\r\n    startRow > endRow ||\r\n    startColumn > endColumn ||\r\n    startRow < 0 ||\r\n    startRow >= matrix.rows ||\r\n    endRow < 0 ||\r\n    endRow >= matrix.rows ||\r\n    startColumn < 0 ||\r\n    startColumn >= matrix.columns ||\r\n    endColumn < 0 ||\r\n    endColumn >= matrix.columns\r\n  ) {\r\n    throw new RangeError('Submatrix indices are out of range');\r\n  }\r\n}\r\n\r\nexport function newArray(length, value = 0) {\r\n  let array = [];\r\n  for (let i = 0; i < length; i++) {\r\n    array.push(value);\r\n  }\r\n  return array;\r\n}\r\n\r\nfunction checkNumber(name, value) {\r\n  if (typeof value !== 'number') {\r\n    throw new TypeError(`${name} must be a number`);\r\n  }\r\n}\r\n","import { newArray } from './util';\r\n\r\nexport function sumByRow(matrix) {\r\n  let sum = newArray(matrix.rows);\r\n  for (let i = 0; i < matrix.rows; ++i) {\r\n    for (let j = 0; j < matrix.columns; ++j) {\r\n      sum[i] += matrix.get(i, j);\r\n    }\r\n  }\r\n  return sum;\r\n}\r\n\r\nexport function sumByColumn(matrix) {\r\n  let sum = newArray(matrix.columns);\r\n  for (let i = 0; i < matrix.rows; ++i) {\r\n    for (let j = 0; j < matrix.columns; ++j) {\r\n      sum[j] += matrix.get(i, j);\r\n    }\r\n  }\r\n  return sum;\r\n}\r\n\r\nexport function sumAll(matrix) {\r\n  let v = 0;\r\n  for (let i = 0; i < matrix.rows; i++) {\r\n    for (let j = 0; j < matrix.columns; j++) {\r\n      v += matrix.get(i, j);\r\n    }\r\n  }\r\n  return v;\r\n}\r\n\r\nexport function productByRow(matrix) {\r\n  let sum = newArray(matrix.rows, 1);\r\n  for (let i = 0; i < matrix.rows; ++i) {\r\n    for (let j = 0; j < matrix.columns; ++j) {\r\n      sum[i] *= matrix.get(i, j);\r\n    }\r\n  }\r\n  return sum;\r\n}\r\n\r\nexport function productByColumn(matrix) {\r\n  let sum = newArray(matrix.columns, 1);\r\n  for (let i = 0; i < matrix.rows; ++i) {\r\n    for (let j = 0; j < matrix.columns; ++j) {\r\n      sum[j] *= matrix.get(i, j);\r\n    }\r\n  }\r\n  return sum;\r\n}\r\n\r\nexport function productAll(matrix) {\r\n  let v = 1;\r\n  for (let i = 0; i < matrix.rows; i++) {\r\n    for (let j = 0; j < matrix.columns; j++) {\r\n      v *= matrix.get(i, j);\r\n    }\r\n  }\r\n  return v;\r\n}\r\n\r\nexport function varianceByRow(matrix, unbiased, mean) {\r\n  const rows = matrix.rows;\r\n  const cols = matrix.columns;\r\n  const variance = [];\r\n\r\n  for (let i = 0; i < rows; i++) {\r\n    let sum1 = 0;\r\n    let sum2 = 0;\r\n    let x = 0;\r\n    for (let j = 0; j < cols; j++) {\r\n      x = matrix.get(i, j) - mean[i];\r\n      sum1 += x;\r\n      sum2 += x * x;\r\n    }\r\n    if (unbiased) {\r\n      variance.push((sum2 - (sum1 * sum1) / cols) / (cols - 1));\r\n    } else {\r\n      variance.push((sum2 - (sum1 * sum1) / cols) / cols);\r\n    }\r\n  }\r\n  return variance;\r\n}\r\n\r\nexport function varianceByColumn(matrix, unbiased, mean) {\r\n  const rows = matrix.rows;\r\n  const cols = matrix.columns;\r\n  const variance = [];\r\n\r\n  for (let j = 0; j < cols; j++) {\r\n    let sum1 = 0;\r\n    let sum2 = 0;\r\n    let x = 0;\r\n    for (let i = 0; i < rows; i++) {\r\n      x = matrix.get(i, j) - mean[j];\r\n      sum1 += x;\r\n      sum2 += x * x;\r\n    }\r\n    if (unbiased) {\r\n      variance.push((sum2 - (sum1 * sum1) / rows) / (rows - 1));\r\n    } else {\r\n      variance.push((sum2 - (sum1 * sum1) / rows) / rows);\r\n    }\r\n  }\r\n  return variance;\r\n}\r\n\r\nexport function varianceAll(matrix, unbiased, mean) {\r\n  const rows = matrix.rows;\r\n  const cols = matrix.columns;\r\n  const size = rows * cols;\r\n\r\n  let sum1 = 0;\r\n  let sum2 = 0;\r\n  let x = 0;\r\n  for (let i = 0; i < rows; i++) {\r\n    for (let j = 0; j < cols; j++) {\r\n      x = matrix.get(i, j) - mean;\r\n      sum1 += x;\r\n      sum2 += x * x;\r\n    }\r\n  }\r\n  if (unbiased) {\r\n    return (sum2 - (sum1 * sum1) / size) / (size - 1);\r\n  } else {\r\n    return (sum2 - (sum1 * sum1) / size) / size;\r\n  }\r\n}\r\n\r\nexport function centerByRow(matrix, mean) {\r\n  for (let i = 0; i < matrix.rows; i++) {\r\n    for (let j = 0; j < matrix.columns; j++) {\r\n      matrix.set(i, j, matrix.get(i, j) - mean[i]);\r\n    }\r\n  }\r\n}\r\n\r\nexport function centerByColumn(matrix, mean) {\r\n  for (let i = 0; i < matrix.rows; i++) {\r\n    for (let j = 0; j < matrix.columns; j++) {\r\n      matrix.set(i, j, matrix.get(i, j) - mean[j]);\r\n    }\r\n  }\r\n}\r\n\r\nexport function centerAll(matrix, mean) {\r\n  for (let i = 0; i < matrix.rows; i++) {\r\n    for (let j = 0; j < matrix.columns; j++) {\r\n      matrix.set(i, j, matrix.get(i, j) - mean);\r\n    }\r\n  }\r\n}\r\n\r\nexport function getScaleByRow(matrix) {\r\n  const scale = [];\r\n  for (let i = 0; i < matrix.rows; i++) {\r\n    let sum = 0;\r\n    for (let j = 0; j < matrix.columns; j++) {\r\n      sum += Math.pow(matrix.get(i, j), 2) / (matrix.columns - 1);\r\n    }\r\n    scale.push(Math.sqrt(sum));\r\n  }\r\n  return scale;\r\n}\r\n\r\nexport function scaleByRow(matrix, scale) {\r\n  for (let i = 0; i < matrix.rows; i++) {\r\n    for (let j = 0; j < matrix.columns; j++) {\r\n      matrix.set(i, j, matrix.get(i, j) / scale[i]);\r\n    }\r\n  }\r\n}\r\n\r\nexport function getScaleByColumn(matrix) {\r\n  const scale = [];\r\n  for (let j = 0; j < matrix.columns; j++) {\r\n    let sum = 0;\r\n    for (let i = 0; i < matrix.rows; i++) {\r\n      sum += Math.pow(matrix.get(i, j), 2) / (matrix.rows - 1);\r\n    }\r\n    scale.push(Math.sqrt(sum));\r\n  }\r\n  return scale;\r\n}\r\n\r\nexport function scaleByColumn(matrix, scale) {\r\n  for (let i = 0; i < matrix.rows; i++) {\r\n    for (let j = 0; j < matrix.columns; j++) {\r\n      matrix.set(i, j, matrix.get(i, j) / scale[j]);\r\n    }\r\n  }\r\n}\r\n\r\nexport function getScaleAll(matrix) {\r\n  const divider = matrix.size - 1;\r\n  let sum = 0;\r\n  for (let j = 0; j < matrix.columns; j++) {\r\n    for (let i = 0; i < matrix.rows; i++) {\r\n      sum += Math.pow(matrix.get(i, j), 2) / divider;\r\n    }\r\n  }\r\n  return Math.sqrt(sum);\r\n}\r\n\r\nexport function scaleAll(matrix, scale) {\r\n  for (let i = 0; i < matrix.rows; i++) {\r\n    for (let j = 0; j < matrix.columns; j++) {\r\n      matrix.set(i, j, matrix.get(i, j) / scale);\r\n    }\r\n  }\r\n}\r\n","import rescale from 'ml-array-rescale';\r\n\r\nimport { inspectMatrix, inspectMatrixWithOptions } from './inspect';\r\nimport { installMathOperations } from './mathOperations';\r\nimport {\r\n  sumByRow,\r\n  sumByColumn,\r\n  sumAll,\r\n  productByRow,\r\n  productByColumn,\r\n  productAll,\r\n  varianceByRow,\r\n  varianceByColumn,\r\n  varianceAll,\r\n  centerByRow,\r\n  centerByColumn,\r\n  centerAll,\r\n  scaleByRow,\r\n  scaleByColumn,\r\n  scaleAll,\r\n  getScaleByRow,\r\n  getScaleByColumn,\r\n  getScaleAll,\r\n} from './stat';\r\nimport {\r\n  checkRowVector,\r\n  checkRowIndex,\r\n  checkColumnIndex,\r\n  checkColumnVector,\r\n  checkRange,\r\n  checkIndices,\r\n} from './util';\r\n\r\nexport class AbstractMatrix {\r\n  static from1DArray(newRows, newColumns, newData) {\r\n    let length = newRows * newColumns;\r\n    if (length !== newData.length) {\r\n      throw new RangeError('data length does not match given dimensions');\r\n    }\r\n    let newMatrix = new Matrix(newRows, newColumns);\r\n    for (let row = 0; row < newRows; row++) {\r\n      for (let column = 0; column < newColumns; column++) {\r\n        newMatrix.set(row, column, newData[row * newColumns + column]);\r\n      }\r\n    }\r\n    return newMatrix;\r\n  }\r\n\r\n  static rowVector(newData) {\r\n    let vector = new Matrix(1, newData.length);\r\n    for (let i = 0; i < newData.length; i++) {\r\n      vector.set(0, i, newData[i]);\r\n    }\r\n    return vector;\r\n  }\r\n\r\n  static columnVector(newData) {\r\n    let vector = new Matrix(newData.length, 1);\r\n    for (let i = 0; i < newData.length; i++) {\r\n      vector.set(i, 0, newData[i]);\r\n    }\r\n    return vector;\r\n  }\r\n\r\n  static zeros(rows, columns) {\r\n    return new Matrix(rows, columns);\r\n  }\r\n\r\n  static ones(rows, columns) {\r\n    return new Matrix(rows, columns).fill(1);\r\n  }\r\n\r\n  static rand(rows, columns, options = {}) {\r\n    if (typeof options !== 'object') {\r\n      throw new TypeError('options must be an object');\r\n    }\r\n    const { random = Math.random } = options;\r\n    let matrix = new Matrix(rows, columns);\r\n    for (let i = 0; i < rows; i++) {\r\n      for (let j = 0; j < columns; j++) {\r\n        matrix.set(i, j, random());\r\n      }\r\n    }\r\n    return matrix;\r\n  }\r\n\r\n  static randInt(rows, columns, options = {}) {\r\n    if (typeof options !== 'object') {\r\n      throw new TypeError('options must be an object');\r\n    }\r\n    const { min = 0, max = 1000, random = Math.random } = options;\r\n    if (!Number.isInteger(min)) throw new TypeError('min must be an integer');\r\n    if (!Number.isInteger(max)) throw new TypeError('max must be an integer');\r\n    if (min >= max) throw new RangeError('min must be smaller than max');\r\n    let interval = max - min;\r\n    let matrix = new Matrix(rows, columns);\r\n    for (let i = 0; i < rows; i++) {\r\n      for (let j = 0; j < columns; j++) {\r\n        let value = min + Math.round(random() * interval);\r\n        matrix.set(i, j, value);\r\n      }\r\n    }\r\n    return matrix;\r\n  }\r\n\r\n  static eye(rows, columns, value) {\r\n    if (columns === undefined) columns = rows;\r\n    if (value === undefined) value = 1;\r\n    let min = Math.min(rows, columns);\r\n    let matrix = this.zeros(rows, columns);\r\n    for (let i = 0; i < min; i++) {\r\n      matrix.set(i, i, value);\r\n    }\r\n    return matrix;\r\n  }\r\n\r\n  static diag(data, rows, columns) {\r\n    let l = data.length;\r\n    if (rows === undefined) rows = l;\r\n    if (columns === undefined) columns = rows;\r\n    let min = Math.min(l, rows, columns);\r\n    let matrix = this.zeros(rows, columns);\r\n    for (let i = 0; i < min; i++) {\r\n      matrix.set(i, i, data[i]);\r\n    }\r\n    return matrix;\r\n  }\r\n\r\n  static min(matrix1, matrix2) {\r\n    matrix1 = this.checkMatrix(matrix1);\r\n    matrix2 = this.checkMatrix(matrix2);\r\n    let rows = matrix1.rows;\r\n    let columns = matrix1.columns;\r\n    let result = new Matrix(rows, columns);\r\n    for (let i = 0; i < rows; i++) {\r\n      for (let j = 0; j < columns; j++) {\r\n        result.set(i, j, Math.min(matrix1.get(i, j), matrix2.get(i, j)));\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  static max(matrix1, matrix2) {\r\n    matrix1 = this.checkMatrix(matrix1);\r\n    matrix2 = this.checkMatrix(matrix2);\r\n    let rows = matrix1.rows;\r\n    let columns = matrix1.columns;\r\n    let result = new this(rows, columns);\r\n    for (let i = 0; i < rows; i++) {\r\n      for (let j = 0; j < columns; j++) {\r\n        result.set(i, j, Math.max(matrix1.get(i, j), matrix2.get(i, j)));\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  static checkMatrix(value) {\r\n    return AbstractMatrix.isMatrix(value) ? value : new Matrix(value);\r\n  }\r\n\r\n  static isMatrix(value) {\r\n    return value != null && value.klass === 'Matrix';\r\n  }\r\n\r\n  get size() {\r\n    return this.rows * this.columns;\r\n  }\r\n\r\n  apply(callback) {\r\n    if (typeof callback !== 'function') {\r\n      throw new TypeError('callback must be a function');\r\n    }\r\n    for (let i = 0; i < this.rows; i++) {\r\n      for (let j = 0; j < this.columns; j++) {\r\n        callback.call(this, i, j);\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n\r\n  to1DArray() {\r\n    let array = [];\r\n    for (let i = 0; i < this.rows; i++) {\r\n      for (let j = 0; j < this.columns; j++) {\r\n        array.push(this.get(i, j));\r\n      }\r\n    }\r\n    return array;\r\n  }\r\n\r\n  to2DArray() {\r\n    let copy = [];\r\n    for (let i = 0; i < this.rows; i++) {\r\n      copy.push([]);\r\n      for (let j = 0; j < this.columns; j++) {\r\n        copy[i].push(this.get(i, j));\r\n      }\r\n    }\r\n    return copy;\r\n  }\r\n\r\n  toJSON() {\r\n    return this.to2DArray();\r\n  }\r\n\r\n  isRowVector() {\r\n    return this.rows === 1;\r\n  }\r\n\r\n  isColumnVector() {\r\n    return this.columns === 1;\r\n  }\r\n\r\n  isVector() {\r\n    return this.rows === 1 || this.columns === 1;\r\n  }\r\n\r\n  isSquare() {\r\n    return this.rows === this.columns;\r\n  }\r\n\r\n  isSymmetric() {\r\n    if (this.isSquare()) {\r\n      for (let i = 0; i < this.rows; i++) {\r\n        for (let j = 0; j <= i; j++) {\r\n          if (this.get(i, j) !== this.get(j, i)) {\r\n            return false;\r\n          }\r\n        }\r\n      }\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  isEchelonForm() {\r\n    let i = 0;\r\n    let j = 0;\r\n    let previousColumn = -1;\r\n    let isEchelonForm = true;\r\n    let checked = false;\r\n    while (i < this.rows && isEchelonForm) {\r\n      j = 0;\r\n      checked = false;\r\n      while (j < this.columns && checked === false) {\r\n        if (this.get(i, j) === 0) {\r\n          j++;\r\n        } else if (this.get(i, j) === 1 && j > previousColumn) {\r\n          checked = true;\r\n          previousColumn = j;\r\n        } else {\r\n          isEchelonForm = false;\r\n          checked = true;\r\n        }\r\n      }\r\n      i++;\r\n    }\r\n    return isEchelonForm;\r\n  }\r\n\r\n  isReducedEchelonForm() {\r\n    let i = 0;\r\n    let j = 0;\r\n    let previousColumn = -1;\r\n    let isReducedEchelonForm = true;\r\n    let checked = false;\r\n    while (i < this.rows && isReducedEchelonForm) {\r\n      j = 0;\r\n      checked = false;\r\n      while (j < this.columns && checked === false) {\r\n        if (this.get(i, j) === 0) {\r\n          j++;\r\n        } else if (this.get(i, j) === 1 && j > previousColumn) {\r\n          checked = true;\r\n          previousColumn = j;\r\n        } else {\r\n          isReducedEchelonForm = false;\r\n          checked = true;\r\n        }\r\n      }\r\n      for (let k = j + 1; k < this.rows; k++) {\r\n        if (this.get(i, k) !== 0) {\r\n          isReducedEchelonForm = false;\r\n        }\r\n      }\r\n      i++;\r\n    }\r\n    return isReducedEchelonForm;\r\n  }\r\n\r\n  echelonForm() {\r\n    let result = this.clone();\r\n    let h = 0;\r\n    let k = 0;\r\n    while (h < result.rows && k < result.columns) {\r\n      let iMax = h;\r\n      for (let i = h; i < result.rows; i++) {\r\n        if (result.get(i, k) > result.get(iMax, k)) {\r\n          iMax = i;\r\n        }\r\n      }\r\n      if (result.get(iMax, k) === 0) {\r\n        k++;\r\n      } else {\r\n        result.swapRows(h, iMax);\r\n        let tmp = result.get(h, k);\r\n        for (let j = k; j < result.columns; j++) {\r\n          result.set(h, j, result.get(h, j) / tmp);\r\n        }\r\n        for (let i = h + 1; i < result.rows; i++) {\r\n          let factor = result.get(i, k) / result.get(h, k);\r\n          result.set(i, k, 0);\r\n          for (let j = k + 1; j < result.columns; j++) {\r\n            result.set(i, j, result.get(i, j) - result.get(h, j) * factor);\r\n          }\r\n        }\r\n        h++;\r\n        k++;\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  reducedEchelonForm() {\r\n    let result = this.echelonForm();\r\n    let m = result.columns;\r\n    let n = result.rows;\r\n    let h = n - 1;\r\n    while (h >= 0) {\r\n      if (result.maxRow(h) === 0) {\r\n        h--;\r\n      } else {\r\n        let p = 0;\r\n        let pivot = false;\r\n        while (p < n && pivot === false) {\r\n          if (result.get(h, p) === 1) {\r\n            pivot = true;\r\n          } else {\r\n            p++;\r\n          }\r\n        }\r\n        for (let i = 0; i < h; i++) {\r\n          let factor = result.get(i, p);\r\n          for (let j = p; j < m; j++) {\r\n            let tmp = result.get(i, j) - factor * result.get(h, j);\r\n            result.set(i, j, tmp);\r\n          }\r\n        }\r\n        h--;\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  set() {\r\n    throw new Error('set method is unimplemented');\r\n  }\r\n\r\n  get() {\r\n    throw new Error('get method is unimplemented');\r\n  }\r\n\r\n  repeat(options = {}) {\r\n    if (typeof options !== 'object') {\r\n      throw new TypeError('options must be an object');\r\n    }\r\n    const { rows = 1, columns = 1 } = options;\r\n    if (!Number.isInteger(rows) || rows <= 0) {\r\n      throw new TypeError('rows must be a positive integer');\r\n    }\r\n    if (!Number.isInteger(columns) || columns <= 0) {\r\n      throw new TypeError('columns must be a positive integer');\r\n    }\r\n    let matrix = new Matrix(this.rows * rows, this.columns * columns);\r\n    for (let i = 0; i < rows; i++) {\r\n      for (let j = 0; j < columns; j++) {\r\n        matrix.setSubMatrix(this, this.rows * i, this.columns * j);\r\n      }\r\n    }\r\n    return matrix;\r\n  }\r\n\r\n  fill(value) {\r\n    for (let i = 0; i < this.rows; i++) {\r\n      for (let j = 0; j < this.columns; j++) {\r\n        this.set(i, j, value);\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n\r\n  neg() {\r\n    return this.mulS(-1);\r\n  }\r\n\r\n  getRow(index) {\r\n    checkRowIndex(this, index);\r\n    let row = [];\r\n    for (let i = 0; i < this.columns; i++) {\r\n      row.push(this.get(index, i));\r\n    }\r\n    return row;\r\n  }\r\n\r\n  getRowVector(index) {\r\n    return Matrix.rowVector(this.getRow(index));\r\n  }\r\n\r\n  setRow(index, array) {\r\n    checkRowIndex(this, index);\r\n    array = checkRowVector(this, array);\r\n    for (let i = 0; i < this.columns; i++) {\r\n      this.set(index, i, array[i]);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  swapRows(row1, row2) {\r\n    checkRowIndex(this, row1);\r\n    checkRowIndex(this, row2);\r\n    for (let i = 0; i < this.columns; i++) {\r\n      let temp = this.get(row1, i);\r\n      this.set(row1, i, this.get(row2, i));\r\n      this.set(row2, i, temp);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  getColumn(index) {\r\n    checkColumnIndex(this, index);\r\n    let column = [];\r\n    for (let i = 0; i < this.rows; i++) {\r\n      column.push(this.get(i, index));\r\n    }\r\n    return column;\r\n  }\r\n\r\n  getColumnVector(index) {\r\n    return Matrix.columnVector(this.getColumn(index));\r\n  }\r\n\r\n  setColumn(index, array) {\r\n    checkColumnIndex(this, index);\r\n    array = checkColumnVector(this, array);\r\n    for (let i = 0; i < this.rows; i++) {\r\n      this.set(i, index, array[i]);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  swapColumns(column1, column2) {\r\n    checkColumnIndex(this, column1);\r\n    checkColumnIndex(this, column2);\r\n    for (let i = 0; i < this.rows; i++) {\r\n      let temp = this.get(i, column1);\r\n      this.set(i, column1, this.get(i, column2));\r\n      this.set(i, column2, temp);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  addRowVector(vector) {\r\n    vector = checkRowVector(this, vector);\r\n    for (let i = 0; i < this.rows; i++) {\r\n      for (let j = 0; j < this.columns; j++) {\r\n        this.set(i, j, this.get(i, j) + vector[j]);\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n\r\n  subRowVector(vector) {\r\n    vector = checkRowVector(this, vector);\r\n    for (let i = 0; i < this.rows; i++) {\r\n      for (let j = 0; j < this.columns; j++) {\r\n        this.set(i, j, this.get(i, j) - vector[j]);\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n\r\n  mulRowVector(vector) {\r\n    vector = checkRowVector(this, vector);\r\n    for (let i = 0; i < this.rows; i++) {\r\n      for (let j = 0; j < this.columns; j++) {\r\n        this.set(i, j, this.get(i, j) * vector[j]);\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n\r\n  divRowVector(vector) {\r\n    vector = checkRowVector(this, vector);\r\n    for (let i = 0; i < this.rows; i++) {\r\n      for (let j = 0; j < this.columns; j++) {\r\n        this.set(i, j, this.get(i, j) / vector[j]);\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n\r\n  addColumnVector(vector) {\r\n    vector = checkColumnVector(this, vector);\r\n    for (let i = 0; i < this.rows; i++) {\r\n      for (let j = 0; j < this.columns; j++) {\r\n        this.set(i, j, this.get(i, j) + vector[i]);\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n\r\n  subColumnVector(vector) {\r\n    vector = checkColumnVector(this, vector);\r\n    for (let i = 0; i < this.rows; i++) {\r\n      for (let j = 0; j < this.columns; j++) {\r\n        this.set(i, j, this.get(i, j) - vector[i]);\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n\r\n  mulColumnVector(vector) {\r\n    vector = checkColumnVector(this, vector);\r\n    for (let i = 0; i < this.rows; i++) {\r\n      for (let j = 0; j < this.columns; j++) {\r\n        this.set(i, j, this.get(i, j) * vector[i]);\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n\r\n  divColumnVector(vector) {\r\n    vector = checkColumnVector(this, vector);\r\n    for (let i = 0; i < this.rows; i++) {\r\n      for (let j = 0; j < this.columns; j++) {\r\n        this.set(i, j, this.get(i, j) / vector[i]);\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n\r\n  mulRow(index, value) {\r\n    checkRowIndex(this, index);\r\n    for (let i = 0; i < this.columns; i++) {\r\n      this.set(index, i, this.get(index, i) * value);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  mulColumn(index, value) {\r\n    checkColumnIndex(this, index);\r\n    for (let i = 0; i < this.rows; i++) {\r\n      this.set(i, index, this.get(i, index) * value);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  max() {\r\n    let v = this.get(0, 0);\r\n    for (let i = 0; i < this.rows; i++) {\r\n      for (let j = 0; j < this.columns; j++) {\r\n        if (this.get(i, j) > v) {\r\n          v = this.get(i, j);\r\n        }\r\n      }\r\n    }\r\n    return v;\r\n  }\r\n\r\n  maxIndex() {\r\n    let v = this.get(0, 0);\r\n    let idx = [0, 0];\r\n    for (let i = 0; i < this.rows; i++) {\r\n      for (let j = 0; j < this.columns; j++) {\r\n        if (this.get(i, j) > v) {\r\n          v = this.get(i, j);\r\n          idx[0] = i;\r\n          idx[1] = j;\r\n        }\r\n      }\r\n    }\r\n    return idx;\r\n  }\r\n\r\n  min() {\r\n    let v = this.get(0, 0);\r\n    for (let i = 0; i < this.rows; i++) {\r\n      for (let j = 0; j < this.columns; j++) {\r\n        if (this.get(i, j) < v) {\r\n          v = this.get(i, j);\r\n        }\r\n      }\r\n    }\r\n    return v;\r\n  }\r\n\r\n  minIndex() {\r\n    let v = this.get(0, 0);\r\n    let idx = [0, 0];\r\n    for (let i = 0; i < this.rows; i++) {\r\n      for (let j = 0; j < this.columns; j++) {\r\n        if (this.get(i, j) < v) {\r\n          v = this.get(i, j);\r\n          idx[0] = i;\r\n          idx[1] = j;\r\n        }\r\n      }\r\n    }\r\n    return idx;\r\n  }\r\n\r\n  maxRow(row) {\r\n    checkRowIndex(this, row);\r\n    let v = this.get(row, 0);\r\n    for (let i = 1; i < this.columns; i++) {\r\n      if (this.get(row, i) > v) {\r\n        v = this.get(row, i);\r\n      }\r\n    }\r\n    return v;\r\n  }\r\n\r\n  maxRowIndex(row) {\r\n    checkRowIndex(this, row);\r\n    let v = this.get(row, 0);\r\n    let idx = [row, 0];\r\n    for (let i = 1; i < this.columns; i++) {\r\n      if (this.get(row, i) > v) {\r\n        v = this.get(row, i);\r\n        idx[1] = i;\r\n      }\r\n    }\r\n    return idx;\r\n  }\r\n\r\n  minRow(row) {\r\n    checkRowIndex(this, row);\r\n    let v = this.get(row, 0);\r\n    for (let i = 1; i < this.columns; i++) {\r\n      if (this.get(row, i) < v) {\r\n        v = this.get(row, i);\r\n      }\r\n    }\r\n    return v;\r\n  }\r\n\r\n  minRowIndex(row) {\r\n    checkRowIndex(this, row);\r\n    let v = this.get(row, 0);\r\n    let idx = [row, 0];\r\n    for (let i = 1; i < this.columns; i++) {\r\n      if (this.get(row, i) < v) {\r\n        v = this.get(row, i);\r\n        idx[1] = i;\r\n      }\r\n    }\r\n    return idx;\r\n  }\r\n\r\n  maxColumn(column) {\r\n    checkColumnIndex(this, column);\r\n    let v = this.get(0, column);\r\n    for (let i = 1; i < this.rows; i++) {\r\n      if (this.get(i, column) > v) {\r\n        v = this.get(i, column);\r\n      }\r\n    }\r\n    return v;\r\n  }\r\n\r\n  maxColumnIndex(column) {\r\n    checkColumnIndex(this, column);\r\n    let v = this.get(0, column);\r\n    let idx = [0, column];\r\n    for (let i = 1; i < this.rows; i++) {\r\n      if (this.get(i, column) > v) {\r\n        v = this.get(i, column);\r\n        idx[0] = i;\r\n      }\r\n    }\r\n    return idx;\r\n  }\r\n\r\n  minColumn(column) {\r\n    checkColumnIndex(this, column);\r\n    let v = this.get(0, column);\r\n    for (let i = 1; i < this.rows; i++) {\r\n      if (this.get(i, column) < v) {\r\n        v = this.get(i, column);\r\n      }\r\n    }\r\n    return v;\r\n  }\r\n\r\n  minColumnIndex(column) {\r\n    checkColumnIndex(this, column);\r\n    let v = this.get(0, column);\r\n    let idx = [0, column];\r\n    for (let i = 1; i < this.rows; i++) {\r\n      if (this.get(i, column) < v) {\r\n        v = this.get(i, column);\r\n        idx[0] = i;\r\n      }\r\n    }\r\n    return idx;\r\n  }\r\n\r\n  diag() {\r\n    let min = Math.min(this.rows, this.columns);\r\n    let diag = [];\r\n    for (let i = 0; i < min; i++) {\r\n      diag.push(this.get(i, i));\r\n    }\r\n    return diag;\r\n  }\r\n\r\n  norm(type = 'frobenius') {\r\n    let result = 0;\r\n    if (type === 'max') {\r\n      return this.max();\r\n    } else if (type === 'frobenius') {\r\n      for (let i = 0; i < this.rows; i++) {\r\n        for (let j = 0; j < this.columns; j++) {\r\n          result = result + this.get(i, j) * this.get(i, j);\r\n        }\r\n      }\r\n      return Math.sqrt(result);\r\n    } else {\r\n      throw new RangeError(`unknown norm type: ${type}`);\r\n    }\r\n  }\r\n\r\n  cumulativeSum() {\r\n    let sum = 0;\r\n    for (let i = 0; i < this.rows; i++) {\r\n      for (let j = 0; j < this.columns; j++) {\r\n        sum += this.get(i, j);\r\n        this.set(i, j, sum);\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n\r\n  dot(vector2) {\r\n    if (AbstractMatrix.isMatrix(vector2)) vector2 = vector2.to1DArray();\r\n    let vector1 = this.to1DArray();\r\n    if (vector1.length !== vector2.length) {\r\n      throw new RangeError('vectors do not have the same size');\r\n    }\r\n    let dot = 0;\r\n    for (let i = 0; i < vector1.length; i++) {\r\n      dot += vector1[i] * vector2[i];\r\n    }\r\n    return dot;\r\n  }\r\n\r\n  mmul(other) {\r\n    other = Matrix.checkMatrix(other);\r\n\r\n    let m = this.rows;\r\n    let n = this.columns;\r\n    let p = other.columns;\r\n\r\n    let result = new Matrix(m, p);\r\n\r\n    let Bcolj = new Float64Array(n);\r\n    for (let j = 0; j < p; j++) {\r\n      for (let k = 0; k < n; k++) {\r\n        Bcolj[k] = other.get(k, j);\r\n      }\r\n\r\n      for (let i = 0; i < m; i++) {\r\n        let s = 0;\r\n        for (let k = 0; k < n; k++) {\r\n          s += this.get(i, k) * Bcolj[k];\r\n        }\r\n\r\n        result.set(i, j, s);\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  strassen2x2(other) {\r\n    other = Matrix.checkMatrix(other);\r\n    let result = new Matrix(2, 2);\r\n    const a11 = this.get(0, 0);\r\n    const b11 = other.get(0, 0);\r\n    const a12 = this.get(0, 1);\r\n    const b12 = other.get(0, 1);\r\n    const a21 = this.get(1, 0);\r\n    const b21 = other.get(1, 0);\r\n    const a22 = this.get(1, 1);\r\n    const b22 = other.get(1, 1);\r\n\r\n    // Compute intermediate values.\r\n    const m1 = (a11 + a22) * (b11 + b22);\r\n    const m2 = (a21 + a22) * b11;\r\n    const m3 = a11 * (b12 - b22);\r\n    const m4 = a22 * (b21 - b11);\r\n    const m5 = (a11 + a12) * b22;\r\n    const m6 = (a21 - a11) * (b11 + b12);\r\n    const m7 = (a12 - a22) * (b21 + b22);\r\n\r\n    // Combine intermediate values into the output.\r\n    const c00 = m1 + m4 - m5 + m7;\r\n    const c01 = m3 + m5;\r\n    const c10 = m2 + m4;\r\n    const c11 = m1 - m2 + m3 + m6;\r\n\r\n    result.set(0, 0, c00);\r\n    result.set(0, 1, c01);\r\n    result.set(1, 0, c10);\r\n    result.set(1, 1, c11);\r\n    return result;\r\n  }\r\n\r\n  strassen3x3(other) {\r\n    other = Matrix.checkMatrix(other);\r\n    let result = new Matrix(3, 3);\r\n\r\n    const a00 = this.get(0, 0);\r\n    const a01 = this.get(0, 1);\r\n    const a02 = this.get(0, 2);\r\n    const a10 = this.get(1, 0);\r\n    const a11 = this.get(1, 1);\r\n    const a12 = this.get(1, 2);\r\n    const a20 = this.get(2, 0);\r\n    const a21 = this.get(2, 1);\r\n    const a22 = this.get(2, 2);\r\n\r\n    const b00 = other.get(0, 0);\r\n    const b01 = other.get(0, 1);\r\n    const b02 = other.get(0, 2);\r\n    const b10 = other.get(1, 0);\r\n    const b11 = other.get(1, 1);\r\n    const b12 = other.get(1, 2);\r\n    const b20 = other.get(2, 0);\r\n    const b21 = other.get(2, 1);\r\n    const b22 = other.get(2, 2);\r\n\r\n    const m1 = (a00 + a01 + a02 - a10 - a11 - a21 - a22) * b11;\r\n    const m2 = (a00 - a10) * (-b01 + b11);\r\n    const m3 = a11 * (-b00 + b01 + b10 - b11 - b12 - b20 + b22);\r\n    const m4 = (-a00 + a10 + a11) * (b00 - b01 + b11);\r\n    const m5 = (a10 + a11) * (-b00 + b01);\r\n    const m6 = a00 * b00;\r\n    const m7 = (-a00 + a20 + a21) * (b00 - b02 + b12);\r\n    const m8 = (-a00 + a20) * (b02 - b12);\r\n    const m9 = (a20 + a21) * (-b00 + b02);\r\n    const m10 = (a00 + a01 + a02 - a11 - a12 - a20 - a21) * b12;\r\n    const m11 = a21 * (-b00 + b02 + b10 - b11 - b12 - b20 + b21);\r\n    const m12 = (-a02 + a21 + a22) * (b11 + b20 - b21);\r\n    const m13 = (a02 - a22) * (b11 - b21);\r\n    const m14 = a02 * b20;\r\n    const m15 = (a21 + a22) * (-b20 + b21);\r\n    const m16 = (-a02 + a11 + a12) * (b12 + b20 - b22);\r\n    const m17 = (a02 - a12) * (b12 - b22);\r\n    const m18 = (a11 + a12) * (-b20 + b22);\r\n    const m19 = a01 * b10;\r\n    const m20 = a12 * b21;\r\n    const m21 = a10 * b02;\r\n    const m22 = a20 * b01;\r\n    const m23 = a22 * b22;\r\n\r\n    const c00 = m6 + m14 + m19;\r\n    const c01 = m1 + m4 + m5 + m6 + m12 + m14 + m15;\r\n    const c02 = m6 + m7 + m9 + m10 + m14 + m16 + m18;\r\n    const c10 = m2 + m3 + m4 + m6 + m14 + m16 + m17;\r\n    const c11 = m2 + m4 + m5 + m6 + m20;\r\n    const c12 = m14 + m16 + m17 + m18 + m21;\r\n    const c20 = m6 + m7 + m8 + m11 + m12 + m13 + m14;\r\n    const c21 = m12 + m13 + m14 + m15 + m22;\r\n    const c22 = m6 + m7 + m8 + m9 + m23;\r\n\r\n    result.set(0, 0, c00);\r\n    result.set(0, 1, c01);\r\n    result.set(0, 2, c02);\r\n    result.set(1, 0, c10);\r\n    result.set(1, 1, c11);\r\n    result.set(1, 2, c12);\r\n    result.set(2, 0, c20);\r\n    result.set(2, 1, c21);\r\n    result.set(2, 2, c22);\r\n    return result;\r\n  }\r\n\r\n  mmulStrassen(y) {\r\n    y = Matrix.checkMatrix(y);\r\n    let x = this.clone();\r\n    let r1 = x.rows;\r\n    let c1 = x.columns;\r\n    let r2 = y.rows;\r\n    let c2 = y.columns;\r\n    if (c1 !== r2) {\r\n      // eslint-disable-next-line no-console\r\n      console.warn(\r\n        `Multiplying ${r1} x ${c1} and ${r2} x ${c2} matrix: dimensions do not match.`,\r\n      );\r\n    }\r\n\r\n    // Put a matrix into the top left of a matrix of zeros.\r\n    // `rows` and `cols` are the dimensions of the output matrix.\r\n    function embed(mat, rows, cols) {\r\n      let r = mat.rows;\r\n      let c = mat.columns;\r\n      if (r === rows && c === cols) {\r\n        return mat;\r\n      } else {\r\n        let resultat = AbstractMatrix.zeros(rows, cols);\r\n        resultat = resultat.setSubMatrix(mat, 0, 0);\r\n        return resultat;\r\n      }\r\n    }\r\n\r\n    // Make sure both matrices are the same size.\r\n    // This is exclusively for simplicity:\r\n    // this algorithm can be implemented with matrices of different sizes.\r\n\r\n    let r = Math.max(r1, r2);\r\n    let c = Math.max(c1, c2);\r\n    x = embed(x, r, c);\r\n    y = embed(y, r, c);\r\n\r\n    // Our recursive multiplication function.\r\n    function blockMult(a, b, rows, cols) {\r\n      // For small matrices, resort to naive multiplication.\r\n      if (rows <= 512 || cols <= 512) {\r\n        return a.mmul(b); // a is equivalent to this\r\n      }\r\n\r\n      // Apply dynamic padding.\r\n      if (rows % 2 === 1 && cols % 2 === 1) {\r\n        a = embed(a, rows + 1, cols + 1);\r\n        b = embed(b, rows + 1, cols + 1);\r\n      } else if (rows % 2 === 1) {\r\n        a = embed(a, rows + 1, cols);\r\n        b = embed(b, rows + 1, cols);\r\n      } else if (cols % 2 === 1) {\r\n        a = embed(a, rows, cols + 1);\r\n        b = embed(b, rows, cols + 1);\r\n      }\r\n\r\n      let halfRows = parseInt(a.rows / 2, 10);\r\n      let halfCols = parseInt(a.columns / 2, 10);\r\n      // Subdivide input matrices.\r\n      let a11 = a.subMatrix(0, halfRows - 1, 0, halfCols - 1);\r\n      let b11 = b.subMatrix(0, halfRows - 1, 0, halfCols - 1);\r\n\r\n      let a12 = a.subMatrix(0, halfRows - 1, halfCols, a.columns - 1);\r\n      let b12 = b.subMatrix(0, halfRows - 1, halfCols, b.columns - 1);\r\n\r\n      let a21 = a.subMatrix(halfRows, a.rows - 1, 0, halfCols - 1);\r\n      let b21 = b.subMatrix(halfRows, b.rows - 1, 0, halfCols - 1);\r\n\r\n      let a22 = a.subMatrix(halfRows, a.rows - 1, halfCols, a.columns - 1);\r\n      let b22 = b.subMatrix(halfRows, b.rows - 1, halfCols, b.columns - 1);\r\n\r\n      // Compute intermediate values.\r\n      let m1 = blockMult(\r\n        AbstractMatrix.add(a11, a22),\r\n        AbstractMatrix.add(b11, b22),\r\n        halfRows,\r\n        halfCols,\r\n      );\r\n      let m2 = blockMult(AbstractMatrix.add(a21, a22), b11, halfRows, halfCols);\r\n      let m3 = blockMult(a11, AbstractMatrix.sub(b12, b22), halfRows, halfCols);\r\n      let m4 = blockMult(a22, AbstractMatrix.sub(b21, b11), halfRows, halfCols);\r\n      let m5 = blockMult(AbstractMatrix.add(a11, a12), b22, halfRows, halfCols);\r\n      let m6 = blockMult(\r\n        AbstractMatrix.sub(a21, a11),\r\n        AbstractMatrix.add(b11, b12),\r\n        halfRows,\r\n        halfCols,\r\n      );\r\n      let m7 = blockMult(\r\n        AbstractMatrix.sub(a12, a22),\r\n        AbstractMatrix.add(b21, b22),\r\n        halfRows,\r\n        halfCols,\r\n      );\r\n\r\n      // Combine intermediate values into the output.\r\n      let c11 = AbstractMatrix.add(m1, m4);\r\n      c11.sub(m5);\r\n      c11.add(m7);\r\n      let c12 = AbstractMatrix.add(m3, m5);\r\n      let c21 = AbstractMatrix.add(m2, m4);\r\n      let c22 = AbstractMatrix.sub(m1, m2);\r\n      c22.add(m3);\r\n      c22.add(m6);\r\n\r\n      // Crop output to the desired size (undo dynamic padding).\r\n      let resultat = AbstractMatrix.zeros(2 * c11.rows, 2 * c11.columns);\r\n      resultat = resultat.setSubMatrix(c11, 0, 0);\r\n      resultat = resultat.setSubMatrix(c12, c11.rows, 0);\r\n      resultat = resultat.setSubMatrix(c21, 0, c11.columns);\r\n      resultat = resultat.setSubMatrix(c22, c11.rows, c11.columns);\r\n      return resultat.subMatrix(0, rows - 1, 0, cols - 1);\r\n    }\r\n    return blockMult(x, y, r, c);\r\n  }\r\n\r\n  scaleRows(options = {}) {\r\n    if (typeof options !== 'object') {\r\n      throw new TypeError('options must be an object');\r\n    }\r\n    const { min = 0, max = 1 } = options;\r\n    if (!Number.isFinite(min)) throw new TypeError('min must be a number');\r\n    if (!Number.isFinite(max)) throw new TypeError('max must be a number');\r\n    if (min >= max) throw new RangeError('min must be smaller than max');\r\n    let newMatrix = new Matrix(this.rows, this.columns);\r\n    for (let i = 0; i < this.rows; i++) {\r\n      const row = this.getRow(i);\r\n      rescale(row, { min, max, output: row });\r\n      newMatrix.setRow(i, row);\r\n    }\r\n    return newMatrix;\r\n  }\r\n\r\n  scaleColumns(options = {}) {\r\n    if (typeof options !== 'object') {\r\n      throw new TypeError('options must be an object');\r\n    }\r\n    const { min = 0, max = 1 } = options;\r\n    if (!Number.isFinite(min)) throw new TypeError('min must be a number');\r\n    if (!Number.isFinite(max)) throw new TypeError('max must be a number');\r\n    if (min >= max) throw new RangeError('min must be smaller than max');\r\n    let newMatrix = new Matrix(this.rows, this.columns);\r\n    for (let i = 0; i < this.columns; i++) {\r\n      const column = this.getColumn(i);\r\n      rescale(column, {\r\n        min: min,\r\n        max: max,\r\n        output: column,\r\n      });\r\n      newMatrix.setColumn(i, column);\r\n    }\r\n    return newMatrix;\r\n  }\r\n\r\n  flipRows() {\r\n    const middle = Math.ceil(this.columns / 2);\r\n    for (let i = 0; i < this.rows; i++) {\r\n      for (let j = 0; j < middle; j++) {\r\n        let first = this.get(i, j);\r\n        let last = this.get(i, this.columns - 1 - j);\r\n        this.set(i, j, last);\r\n        this.set(i, this.columns - 1 - j, first);\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n\r\n  flipColumns() {\r\n    const middle = Math.ceil(this.rows / 2);\r\n    for (let j = 0; j < this.columns; j++) {\r\n      for (let i = 0; i < middle; i++) {\r\n        let first = this.get(i, j);\r\n        let last = this.get(this.rows - 1 - i, j);\r\n        this.set(i, j, last);\r\n        this.set(this.rows - 1 - i, j, first);\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n\r\n  kroneckerProduct(other) {\r\n    other = Matrix.checkMatrix(other);\r\n\r\n    let m = this.rows;\r\n    let n = this.columns;\r\n    let p = other.rows;\r\n    let q = other.columns;\r\n\r\n    let result = new Matrix(m * p, n * q);\r\n    for (let i = 0; i < m; i++) {\r\n      for (let j = 0; j < n; j++) {\r\n        for (let k = 0; k < p; k++) {\r\n          for (let l = 0; l < q; l++) {\r\n            result.set(p * i + k, q * j + l, this.get(i, j) * other.get(k, l));\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  transpose() {\r\n    let result = new Matrix(this.columns, this.rows);\r\n    for (let i = 0; i < this.rows; i++) {\r\n      for (let j = 0; j < this.columns; j++) {\r\n        result.set(j, i, this.get(i, j));\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  sortRows(compareFunction = compareNumbers) {\r\n    for (let i = 0; i < this.rows; i++) {\r\n      this.setRow(i, this.getRow(i).sort(compareFunction));\r\n    }\r\n    return this;\r\n  }\r\n\r\n  sortColumns(compareFunction = compareNumbers) {\r\n    for (let i = 0; i < this.columns; i++) {\r\n      this.setColumn(i, this.getColumn(i).sort(compareFunction));\r\n    }\r\n    return this;\r\n  }\r\n\r\n  subMatrix(startRow, endRow, startColumn, endColumn) {\r\n    checkRange(this, startRow, endRow, startColumn, endColumn);\r\n    let newMatrix = new Matrix(\r\n      endRow - startRow + 1,\r\n      endColumn - startColumn + 1,\r\n    );\r\n    for (let i = startRow; i <= endRow; i++) {\r\n      for (let j = startColumn; j <= endColumn; j++) {\r\n        newMatrix.set(i - startRow, j - startColumn, this.get(i, j));\r\n      }\r\n    }\r\n    return newMatrix;\r\n  }\r\n\r\n  subMatrixRow(indices, startColumn, endColumn) {\r\n    if (startColumn === undefined) startColumn = 0;\r\n    if (endColumn === undefined) endColumn = this.columns - 1;\r\n    if (\r\n      startColumn > endColumn ||\r\n      startColumn < 0 ||\r\n      startColumn >= this.columns ||\r\n      endColumn < 0 ||\r\n      endColumn >= this.columns\r\n    ) {\r\n      throw new RangeError('Argument out of range');\r\n    }\r\n\r\n    let newMatrix = new Matrix(indices.length, endColumn - startColumn + 1);\r\n    for (let i = 0; i < indices.length; i++) {\r\n      for (let j = startColumn; j <= endColumn; j++) {\r\n        if (indices[i] < 0 || indices[i] >= this.rows) {\r\n          throw new RangeError(`Row index out of range: ${indices[i]}`);\r\n        }\r\n        newMatrix.set(i, j - startColumn, this.get(indices[i], j));\r\n      }\r\n    }\r\n    return newMatrix;\r\n  }\r\n\r\n  subMatrixColumn(indices, startRow, endRow) {\r\n    if (startRow === undefined) startRow = 0;\r\n    if (endRow === undefined) endRow = this.rows - 1;\r\n    if (\r\n      startRow > endRow ||\r\n      startRow < 0 ||\r\n      startRow >= this.rows ||\r\n      endRow < 0 ||\r\n      endRow >= this.rows\r\n    ) {\r\n      throw new RangeError('Argument out of range');\r\n    }\r\n\r\n    let newMatrix = new Matrix(endRow - startRow + 1, indices.length);\r\n    for (let i = 0; i < indices.length; i++) {\r\n      for (let j = startRow; j <= endRow; j++) {\r\n        if (indices[i] < 0 || indices[i] >= this.columns) {\r\n          throw new RangeError(`Column index out of range: ${indices[i]}`);\r\n        }\r\n        newMatrix.set(j - startRow, i, this.get(j, indices[i]));\r\n      }\r\n    }\r\n    return newMatrix;\r\n  }\r\n\r\n  setSubMatrix(matrix, startRow, startColumn) {\r\n    matrix = Matrix.checkMatrix(matrix);\r\n    let endRow = startRow + matrix.rows - 1;\r\n    let endColumn = startColumn + matrix.columns - 1;\r\n    checkRange(this, startRow, endRow, startColumn, endColumn);\r\n    for (let i = 0; i < matrix.rows; i++) {\r\n      for (let j = 0; j < matrix.columns; j++) {\r\n        this.set(startRow + i, startColumn + j, matrix.get(i, j));\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n\r\n  selection(rowIndices, columnIndices) {\r\n    let indices = checkIndices(this, rowIndices, columnIndices);\r\n    let newMatrix = new Matrix(rowIndices.length, columnIndices.length);\r\n    for (let i = 0; i < indices.row.length; i++) {\r\n      let rowIndex = indices.row[i];\r\n      for (let j = 0; j < indices.column.length; j++) {\r\n        let columnIndex = indices.column[j];\r\n        newMatrix.set(i, j, this.get(rowIndex, columnIndex));\r\n      }\r\n    }\r\n    return newMatrix;\r\n  }\r\n\r\n  trace() {\r\n    let min = Math.min(this.rows, this.columns);\r\n    let trace = 0;\r\n    for (let i = 0; i < min; i++) {\r\n      trace += this.get(i, i);\r\n    }\r\n    return trace;\r\n  }\r\n\r\n  clone() {\r\n    let newMatrix = new Matrix(this.rows, this.columns);\r\n    for (let row = 0; row < this.rows; row++) {\r\n      for (let column = 0; column < this.columns; column++) {\r\n        newMatrix.set(row, column, this.get(row, column));\r\n      }\r\n    }\r\n    return newMatrix;\r\n  }\r\n\r\n  sum(by) {\r\n    switch (by) {\r\n      case 'row':\r\n        return sumByRow(this);\r\n      case 'column':\r\n        return sumByColumn(this);\r\n      case undefined:\r\n        return sumAll(this);\r\n      default:\r\n        throw new Error(`invalid option: ${by}`);\r\n    }\r\n  }\r\n\r\n  product(by) {\r\n    switch (by) {\r\n      case 'row':\r\n        return productByRow(this);\r\n      case 'column':\r\n        return productByColumn(this);\r\n      case undefined:\r\n        return productAll(this);\r\n      default:\r\n        throw new Error(`invalid option: ${by}`);\r\n    }\r\n  }\r\n\r\n  mean(by) {\r\n    const sum = this.sum(by);\r\n    switch (by) {\r\n      case 'row': {\r\n        for (let i = 0; i < this.rows; i++) {\r\n          sum[i] /= this.columns;\r\n        }\r\n        return sum;\r\n      }\r\n      case 'column': {\r\n        for (let i = 0; i < this.columns; i++) {\r\n          sum[i] /= this.rows;\r\n        }\r\n        return sum;\r\n      }\r\n      case undefined:\r\n        return sum / this.size;\r\n      default:\r\n        throw new Error(`invalid option: ${by}`);\r\n    }\r\n  }\r\n\r\n  variance(by, options = {}) {\r\n    if (typeof by === 'object') {\r\n      options = by;\r\n      by = undefined;\r\n    }\r\n    if (typeof options !== 'object') {\r\n      throw new TypeError('options must be an object');\r\n    }\r\n    const { unbiased = true, mean = this.mean(by) } = options;\r\n    if (typeof unbiased !== 'boolean') {\r\n      throw new TypeError('unbiased must be a boolean');\r\n    }\r\n    switch (by) {\r\n      case 'row': {\r\n        if (!Array.isArray(mean)) {\r\n          throw new TypeError('mean must be an array');\r\n        }\r\n        return varianceByRow(this, unbiased, mean);\r\n      }\r\n      case 'column': {\r\n        if (!Array.isArray(mean)) {\r\n          throw new TypeError('mean must be an array');\r\n        }\r\n        return varianceByColumn(this, unbiased, mean);\r\n      }\r\n      case undefined: {\r\n        if (typeof mean !== 'number') {\r\n          throw new TypeError('mean must be a number');\r\n        }\r\n        return varianceAll(this, unbiased, mean);\r\n      }\r\n      default:\r\n        throw new Error(`invalid option: ${by}`);\r\n    }\r\n  }\r\n\r\n  standardDeviation(by, options) {\r\n    if (typeof by === 'object') {\r\n      options = by;\r\n      by = undefined;\r\n    }\r\n    const variance = this.variance(by, options);\r\n    if (by === undefined) {\r\n      return Math.sqrt(variance);\r\n    } else {\r\n      for (let i = 0; i < variance.length; i++) {\r\n        variance[i] = Math.sqrt(variance[i]);\r\n      }\r\n      return variance;\r\n    }\r\n  }\r\n\r\n  center(by, options = {}) {\r\n    if (typeof by === 'object') {\r\n      options = by;\r\n      by = undefined;\r\n    }\r\n    if (typeof options !== 'object') {\r\n      throw new TypeError('options must be an object');\r\n    }\r\n    const { center = this.mean(by) } = options;\r\n    switch (by) {\r\n      case 'row': {\r\n        if (!Array.isArray(center)) {\r\n          throw new TypeError('center must be an array');\r\n        }\r\n        centerByRow(this, center);\r\n        return this;\r\n      }\r\n      case 'column': {\r\n        if (!Array.isArray(center)) {\r\n          throw new TypeError('center must be an array');\r\n        }\r\n        centerByColumn(this, center);\r\n        return this;\r\n      }\r\n      case undefined: {\r\n        if (typeof center !== 'number') {\r\n          throw new TypeError('center must be a number');\r\n        }\r\n        centerAll(this, center);\r\n        return this;\r\n      }\r\n      default:\r\n        throw new Error(`invalid option: ${by}`);\r\n    }\r\n  }\r\n\r\n  scale(by, options = {}) {\r\n    if (typeof by === 'object') {\r\n      options = by;\r\n      by = undefined;\r\n    }\r\n    if (typeof options !== 'object') {\r\n      throw new TypeError('options must be an object');\r\n    }\r\n    let scale = options.scale;\r\n    switch (by) {\r\n      case 'row': {\r\n        if (scale === undefined) {\r\n          scale = getScaleByRow(this);\r\n        } else if (!Array.isArray(scale)) {\r\n          throw new TypeError('scale must be an array');\r\n        }\r\n        scaleByRow(this, scale);\r\n        return this;\r\n      }\r\n      case 'column': {\r\n        if (scale === undefined) {\r\n          scale = getScaleByColumn(this);\r\n        } else if (!Array.isArray(scale)) {\r\n          throw new TypeError('scale must be an array');\r\n        }\r\n        scaleByColumn(this, scale);\r\n        return this;\r\n      }\r\n      case undefined: {\r\n        if (scale === undefined) {\r\n          scale = getScaleAll(this);\r\n        } else if (typeof scale !== 'number') {\r\n          throw new TypeError('scale must be a number');\r\n        }\r\n        scaleAll(this, scale);\r\n        return this;\r\n      }\r\n      default:\r\n        throw new Error(`invalid option: ${by}`);\r\n    }\r\n  }\r\n\r\n  toString(options) {\r\n    return inspectMatrixWithOptions(this, options);\r\n  }\r\n}\r\n\r\nAbstractMatrix.prototype.klass = 'Matrix';\r\nif (typeof Symbol !== 'undefined') {\r\n  AbstractMatrix.prototype[\r\n    Symbol.for('nodejs.util.inspect.custom')\r\n  ] = inspectMatrix;\r\n}\r\n\r\nfunction compareNumbers(a, b) {\r\n  return a - b;\r\n}\r\n\r\n// Synonyms\r\nAbstractMatrix.random = AbstractMatrix.rand;\r\nAbstractMatrix.randomInt = AbstractMatrix.randInt;\r\nAbstractMatrix.diagonal = AbstractMatrix.diag;\r\nAbstractMatrix.prototype.diagonal = AbstractMatrix.prototype.diag;\r\nAbstractMatrix.identity = AbstractMatrix.eye;\r\nAbstractMatrix.prototype.negate = AbstractMatrix.prototype.neg;\r\nAbstractMatrix.prototype.tensorProduct =\r\n  AbstractMatrix.prototype.kroneckerProduct;\r\n\r\nexport default class Matrix extends AbstractMatrix {\r\n  constructor(nRows, nColumns) {\r\n    super();\r\n    if (Matrix.isMatrix(nRows)) {\r\n      return nRows.clone();\r\n    } else if (Number.isInteger(nRows) && nRows > 0) {\r\n      // Create an empty matrix\r\n      this.data = [];\r\n      if (Number.isInteger(nColumns) && nColumns > 0) {\r\n        for (let i = 0; i < nRows; i++) {\r\n          this.data.push(new Float64Array(nColumns));\r\n        }\r\n      } else {\r\n        throw new TypeError('nColumns must be a positive integer');\r\n      }\r\n    } else if (Array.isArray(nRows)) {\r\n      // Copy the values from the 2D array\r\n      const arrayData = nRows;\r\n      nRows = arrayData.length;\r\n      nColumns = arrayData[0].length;\r\n      if (typeof nColumns !== 'number' || nColumns === 0) {\r\n        throw new TypeError(\r\n          'Data must be a 2D array with at least one element',\r\n        );\r\n      }\r\n      this.data = [];\r\n      for (let i = 0; i < nRows; i++) {\r\n        if (arrayData[i].length !== nColumns) {\r\n          throw new RangeError('Inconsistent array dimensions');\r\n        }\r\n        this.data.push(Float64Array.from(arrayData[i]));\r\n      }\r\n    } else {\r\n      throw new TypeError(\r\n        'First argument must be a positive number or an array',\r\n      );\r\n    }\r\n    this.rows = nRows;\r\n    this.columns = nColumns;\r\n    return this;\r\n  }\r\n\r\n  set(rowIndex, columnIndex, value) {\r\n    this.data[rowIndex][columnIndex] = value;\r\n    return this;\r\n  }\r\n\r\n  get(rowIndex, columnIndex) {\r\n    return this.data[rowIndex][columnIndex];\r\n  }\r\n\r\n  removeRow(index) {\r\n    checkRowIndex(this, index);\r\n    if (this.rows === 1) {\r\n      throw new RangeError('A matrix cannot have less than one row');\r\n    }\r\n    this.data.splice(index, 1);\r\n    this.rows -= 1;\r\n    return this;\r\n  }\r\n\r\n  addRow(index, array) {\r\n    if (array === undefined) {\r\n      array = index;\r\n      index = this.rows;\r\n    }\r\n    checkRowIndex(this, index, true);\r\n    array = Float64Array.from(checkRowVector(this, array, true));\r\n    this.data.splice(index, 0, array);\r\n    this.rows += 1;\r\n    return this;\r\n  }\r\n\r\n  removeColumn(index) {\r\n    checkColumnIndex(this, index);\r\n    if (this.columns === 1) {\r\n      throw new RangeError('A matrix cannot have less than one column');\r\n    }\r\n    for (let i = 0; i < this.rows; i++) {\r\n      const newRow = new Float64Array(this.columns - 1);\r\n      for (let j = 0; j < index; j++) {\r\n        newRow[j] = this.data[i][j];\r\n      }\r\n      for (let j = index + 1; j < this.columns; j++) {\r\n        newRow[j - 1] = this.data[i][j];\r\n      }\r\n      this.data[i] = newRow;\r\n    }\r\n    this.columns -= 1;\r\n    return this;\r\n  }\r\n\r\n  addColumn(index, array) {\r\n    if (typeof array === 'undefined') {\r\n      array = index;\r\n      index = this.columns;\r\n    }\r\n    checkColumnIndex(this, index, true);\r\n    array = checkColumnVector(this, array);\r\n    for (let i = 0; i < this.rows; i++) {\r\n      const newRow = new Float64Array(this.columns + 1);\r\n      let j = 0;\r\n      for (; j < index; j++) {\r\n        newRow[j] = this.data[i][j];\r\n      }\r\n      newRow[j++] = array[i];\r\n      for (; j < this.columns + 1; j++) {\r\n        newRow[j] = this.data[i][j - 1];\r\n      }\r\n      this.data[i] = newRow;\r\n    }\r\n    this.columns += 1;\r\n    return this;\r\n  }\r\n}\r\n\r\ninstallMathOperations(AbstractMatrix, Matrix);\r\n","import { AbstractMatrix } from '../matrix';\r\n\r\nexport default class BaseView extends AbstractMatrix {\r\n  constructor(matrix, rows, columns) {\r\n    super();\r\n    this.matrix = matrix;\r\n    this.rows = rows;\r\n    this.columns = columns;\r\n  }\r\n}\r\n","import { checkColumnIndex } from '../util';\r\n\r\nimport BaseView from './base';\r\n\r\nexport default class MatrixColumnView extends BaseView {\r\n  constructor(matrix, column) {\r\n    checkColumnIndex(matrix, column);\r\n    super(matrix, matrix.rows, 1);\r\n    this.column = column;\r\n  }\r\n\r\n  set(rowIndex, columnIndex, value) {\r\n    this.matrix.set(rowIndex, this.column, value);\r\n    return this;\r\n  }\r\n\r\n  get(rowIndex) {\r\n    return this.matrix.get(rowIndex, this.column);\r\n  }\r\n}\r\n","import { checkColumnIndices } from '../util';\r\n\r\nimport BaseView from './base';\r\n\r\nexport default class MatrixColumnSelectionView extends BaseView {\r\n  constructor(matrix, columnIndices) {\r\n    columnIndices = checkColumnIndices(matrix, columnIndices);\r\n    super(matrix, matrix.rows, columnIndices.length);\r\n    this.columnIndices = columnIndices;\r\n  }\r\n\r\n  set(rowIndex, columnIndex, value) {\r\n    this.matrix.set(rowIndex, this.columnIndices[columnIndex], value);\r\n    return this;\r\n  }\r\n\r\n  get(rowIndex, columnIndex) {\r\n    return this.matrix.get(rowIndex, this.columnIndices[columnIndex]);\r\n  }\r\n}\r\n","import BaseView from './base';\r\n\r\nexport default class MatrixFlipColumnView extends BaseView {\r\n  constructor(matrix) {\r\n    super(matrix, matrix.rows, matrix.columns);\r\n  }\r\n\r\n  set(rowIndex, columnIndex, value) {\r\n    this.matrix.set(rowIndex, this.columns - columnIndex - 1, value);\r\n    return this;\r\n  }\r\n\r\n  get(rowIndex, columnIndex) {\r\n    return this.matrix.get(rowIndex, this.columns - columnIndex - 1);\r\n  }\r\n}\r\n","import BaseView from './base';\r\n\r\nexport default class MatrixFlipRowView extends BaseView {\r\n  constructor(matrix) {\r\n    super(matrix, matrix.rows, matrix.columns);\r\n  }\r\n\r\n  set(rowIndex, columnIndex, value) {\r\n    this.matrix.set(this.rows - rowIndex - 1, columnIndex, value);\r\n    return this;\r\n  }\r\n\r\n  get(rowIndex, columnIndex) {\r\n    return this.matrix.get(this.rows - rowIndex - 1, columnIndex);\r\n  }\r\n}\r\n","import { checkRowIndex } from '../util';\r\n\r\nimport BaseView from './base';\r\n\r\nexport default class MatrixRowView extends BaseView {\r\n  constructor(matrix, row) {\r\n    checkRowIndex(matrix, row);\r\n    super(matrix, 1, matrix.columns);\r\n    this.row = row;\r\n  }\r\n\r\n  set(rowIndex, columnIndex, value) {\r\n    this.matrix.set(this.row, columnIndex, value);\r\n    return this;\r\n  }\r\n\r\n  get(rowIndex, columnIndex) {\r\n    return this.matrix.get(this.row, columnIndex);\r\n  }\r\n}\r\n","import { checkRowIndices } from '../util';\r\n\r\nimport BaseView from './base';\r\n\r\nexport default class MatrixRowSelectionView extends BaseView {\r\n  constructor(matrix, rowIndices) {\r\n    rowIndices = checkRowIndices(matrix, rowIndices);\r\n    super(matrix, rowIndices.length, matrix.columns);\r\n    this.rowIndices = rowIndices;\r\n  }\r\n\r\n  set(rowIndex, columnIndex, value) {\r\n    this.matrix.set(this.rowIndices[rowIndex], columnIndex, value);\r\n    return this;\r\n  }\r\n\r\n  get(rowIndex, columnIndex) {\r\n    return this.matrix.get(this.rowIndices[rowIndex], columnIndex);\r\n  }\r\n}\r\n","import { checkIndices } from '../util';\r\n\r\nimport BaseView from './base';\r\n\r\nexport default class MatrixSelectionView extends BaseView {\r\n  constructor(matrix, rowIndices, columnIndices) {\r\n    let indices = checkIndices(matrix, rowIndices, columnIndices);\r\n    super(matrix, indices.row.length, indices.column.length);\r\n    this.rowIndices = indices.row;\r\n    this.columnIndices = indices.column;\r\n  }\r\n\r\n  set(rowIndex, columnIndex, value) {\r\n    this.matrix.set(\r\n      this.rowIndices[rowIndex],\r\n      this.columnIndices[columnIndex],\r\n      value,\r\n    );\r\n    return this;\r\n  }\r\n\r\n  get(rowIndex, columnIndex) {\r\n    return this.matrix.get(\r\n      this.rowIndices[rowIndex],\r\n      this.columnIndices[columnIndex],\r\n    );\r\n  }\r\n}\r\n","import { checkRange } from '../util';\r\n\r\nimport BaseView from './base';\r\n\r\nexport default class MatrixSubView extends BaseView {\r\n  constructor(matrix, startRow, endRow, startColumn, endColumn) {\r\n    checkRange(matrix, startRow, endRow, startColumn, endColumn);\r\n    super(matrix, endRow - startRow + 1, endColumn - startColumn + 1);\r\n    this.startRow = startRow;\r\n    this.startColumn = startColumn;\r\n  }\r\n\r\n  set(rowIndex, columnIndex, value) {\r\n    this.matrix.set(\r\n      this.startRow + rowIndex,\r\n      this.startColumn + columnIndex,\r\n      value,\r\n    );\r\n    return this;\r\n  }\r\n\r\n  get(rowIndex, columnIndex) {\r\n    return this.matrix.get(\r\n      this.startRow + rowIndex,\r\n      this.startColumn + columnIndex,\r\n    );\r\n  }\r\n}\r\n","import BaseView from './base';\r\n\r\nexport default class MatrixTransposeView extends BaseView {\r\n  constructor(matrix) {\r\n    super(matrix, matrix.columns, matrix.rows);\r\n  }\r\n\r\n  set(rowIndex, columnIndex, value) {\r\n    this.matrix.set(columnIndex, rowIndex, value);\r\n    return this;\r\n  }\r\n\r\n  get(rowIndex, columnIndex) {\r\n    return this.matrix.get(columnIndex, rowIndex);\r\n  }\r\n}\r\n","import { AbstractMatrix } from '../matrix';\r\n\r\nexport default class WrapperMatrix1D extends AbstractMatrix {\r\n  constructor(data, options = {}) {\r\n    const { rows = 1 } = options;\r\n\r\n    if (data.length % rows !== 0) {\r\n      throw new Error('the data length is not divisible by the number of rows');\r\n    }\r\n    super();\r\n    this.rows = rows;\r\n    this.columns = data.length / rows;\r\n    this.data = data;\r\n  }\r\n\r\n  set(rowIndex, columnIndex, value) {\r\n    let index = this._calculateIndex(rowIndex, columnIndex);\r\n    this.data[index] = value;\r\n    return this;\r\n  }\r\n\r\n  get(rowIndex, columnIndex) {\r\n    let index = this._calculateIndex(rowIndex, columnIndex);\r\n    return this.data[index];\r\n  }\r\n\r\n  _calculateIndex(row, column) {\r\n    return row * this.columns + column;\r\n  }\r\n}\r\n","import { AbstractMatrix } from '../matrix';\r\n\r\nexport default class WrapperMatrix2D extends AbstractMatrix {\r\n  constructor(data) {\r\n    super();\r\n    this.data = data;\r\n    this.rows = data.length;\r\n    this.columns = data[0].length;\r\n  }\r\n\r\n  set(rowIndex, columnIndex, value) {\r\n    this.data[rowIndex][columnIndex] = value;\r\n    return this;\r\n  }\r\n\r\n  get(rowIndex, columnIndex) {\r\n    return this.data[rowIndex][columnIndex];\r\n  }\r\n}\r\n","import WrapperMatrix1D from './WrapperMatrix1D';\r\nimport WrapperMatrix2D from './WrapperMatrix2D';\r\n\r\nexport function wrap(array, options) {\r\n  if (Array.isArray(array)) {\r\n    if (array[0] && Array.isArray(array[0])) {\r\n      return new WrapperMatrix2D(array);\r\n    } else {\r\n      return new WrapperMatrix1D(array, options);\r\n    }\r\n  } else {\r\n    throw new Error('the argument is not an array');\r\n  }\r\n}\r\n","import Matrix from '../matrix';\r\nimport WrapperMatrix2D from '../wrap/WrapperMatrix2D';\r\n\r\nexport default class LuDecomposition {\r\n  constructor(matrix) {\r\n    matrix = WrapperMatrix2D.checkMatrix(matrix);\r\n\r\n    let lu = matrix.clone();\r\n    let rows = lu.rows;\r\n    let columns = lu.columns;\r\n    let pivotVector = new Float64Array(rows);\r\n    let pivotSign = 1;\r\n    let i, j, k, p, s, t, v;\r\n    let LUcolj, kmax;\r\n\r\n    for (i = 0; i < rows; i++) {\r\n      pivotVector[i] = i;\r\n    }\r\n\r\n    LUcolj = new Float64Array(rows);\r\n\r\n    for (j = 0; j < columns; j++) {\r\n      for (i = 0; i < rows; i++) {\r\n        LUcolj[i] = lu.get(i, j);\r\n      }\r\n\r\n      for (i = 0; i < rows; i++) {\r\n        kmax = Math.min(i, j);\r\n        s = 0;\r\n        for (k = 0; k < kmax; k++) {\r\n          s += lu.get(i, k) * LUcolj[k];\r\n        }\r\n        LUcolj[i] -= s;\r\n        lu.set(i, j, LUcolj[i]);\r\n      }\r\n\r\n      p = j;\r\n      for (i = j + 1; i < rows; i++) {\r\n        if (Math.abs(LUcolj[i]) > Math.abs(LUcolj[p])) {\r\n          p = i;\r\n        }\r\n      }\r\n\r\n      if (p !== j) {\r\n        for (k = 0; k < columns; k++) {\r\n          t = lu.get(p, k);\r\n          lu.set(p, k, lu.get(j, k));\r\n          lu.set(j, k, t);\r\n        }\r\n\r\n        v = pivotVector[p];\r\n        pivotVector[p] = pivotVector[j];\r\n        pivotVector[j] = v;\r\n\r\n        pivotSign = -pivotSign;\r\n      }\r\n\r\n      if (j < rows && lu.get(j, j) !== 0) {\r\n        for (i = j + 1; i < rows; i++) {\r\n          lu.set(i, j, lu.get(i, j) / lu.get(j, j));\r\n        }\r\n      }\r\n    }\r\n\r\n    this.LU = lu;\r\n    this.pivotVector = pivotVector;\r\n    this.pivotSign = pivotSign;\r\n  }\r\n\r\n  isSingular() {\r\n    let data = this.LU;\r\n    let col = data.columns;\r\n    for (let j = 0; j < col; j++) {\r\n      if (data.get(j, j) === 0) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  solve(value) {\r\n    value = Matrix.checkMatrix(value);\r\n\r\n    let lu = this.LU;\r\n    let rows = lu.rows;\r\n\r\n    if (rows !== value.rows) {\r\n      throw new Error('Invalid matrix dimensions');\r\n    }\r\n    if (this.isSingular()) {\r\n      throw new Error('LU matrix is singular');\r\n    }\r\n\r\n    let count = value.columns;\r\n    let X = value.subMatrixRow(this.pivotVector, 0, count - 1);\r\n    let columns = lu.columns;\r\n    let i, j, k;\r\n\r\n    for (k = 0; k < columns; k++) {\r\n      for (i = k + 1; i < columns; i++) {\r\n        for (j = 0; j < count; j++) {\r\n          X.set(i, j, X.get(i, j) - X.get(k, j) * lu.get(i, k));\r\n        }\r\n      }\r\n    }\r\n    for (k = columns - 1; k >= 0; k--) {\r\n      for (j = 0; j < count; j++) {\r\n        X.set(k, j, X.get(k, j) / lu.get(k, k));\r\n      }\r\n      for (i = 0; i < k; i++) {\r\n        for (j = 0; j < count; j++) {\r\n          X.set(i, j, X.get(i, j) - X.get(k, j) * lu.get(i, k));\r\n        }\r\n      }\r\n    }\r\n    return X;\r\n  }\r\n\r\n  get determinant() {\r\n    let data = this.LU;\r\n    if (!data.isSquare()) {\r\n      throw new Error('Matrix must be square');\r\n    }\r\n    let determinant = this.pivotSign;\r\n    let col = data.columns;\r\n    for (let j = 0; j < col; j++) {\r\n      determinant *= data.get(j, j);\r\n    }\r\n    return determinant;\r\n  }\r\n\r\n  get lowerTriangularMatrix() {\r\n    let data = this.LU;\r\n    let rows = data.rows;\r\n    let columns = data.columns;\r\n    let X = new Matrix(rows, columns);\r\n    for (let i = 0; i < rows; i++) {\r\n      for (let j = 0; j < columns; j++) {\r\n        if (i > j) {\r\n          X.set(i, j, data.get(i, j));\r\n        } else if (i === j) {\r\n          X.set(i, j, 1);\r\n        } else {\r\n          X.set(i, j, 0);\r\n        }\r\n      }\r\n    }\r\n    return X;\r\n  }\r\n\r\n  get upperTriangularMatrix() {\r\n    let data = this.LU;\r\n    let rows = data.rows;\r\n    let columns = data.columns;\r\n    let X = new Matrix(rows, columns);\r\n    for (let i = 0; i < rows; i++) {\r\n      for (let j = 0; j < columns; j++) {\r\n        if (i <= j) {\r\n          X.set(i, j, data.get(i, j));\r\n        } else {\r\n          X.set(i, j, 0);\r\n        }\r\n      }\r\n    }\r\n    return X;\r\n  }\r\n\r\n  get pivotPermutationVector() {\r\n    return Array.from(this.pivotVector);\r\n  }\r\n}\r\n","export function hypotenuse(a, b) {\r\n  let r = 0;\r\n  if (Math.abs(a) > Math.abs(b)) {\r\n    r = b / a;\r\n    return Math.abs(a) * Math.sqrt(1 + r * r);\r\n  }\r\n  if (b !== 0) {\r\n    r = a / b;\r\n    return Math.abs(b) * Math.sqrt(1 + r * r);\r\n  }\r\n  return 0;\r\n}\r\n","import Matrix from '../matrix';\r\nimport WrapperMatrix2D from '../wrap/WrapperMatrix2D';\r\n\r\nimport { hypotenuse } from './util';\r\n\r\nexport default class QrDecomposition {\r\n  constructor(value) {\r\n    value = WrapperMatrix2D.checkMatrix(value);\r\n\r\n    let qr = value.clone();\r\n    let m = value.rows;\r\n    let n = value.columns;\r\n    let rdiag = new Float64Array(n);\r\n    let i, j, k, s;\r\n\r\n    for (k = 0; k < n; k++) {\r\n      let nrm = 0;\r\n      for (i = k; i < m; i++) {\r\n        nrm = hypotenuse(nrm, qr.get(i, k));\r\n      }\r\n      if (nrm !== 0) {\r\n        if (qr.get(k, k) < 0) {\r\n          nrm = -nrm;\r\n        }\r\n        for (i = k; i < m; i++) {\r\n          qr.set(i, k, qr.get(i, k) / nrm);\r\n        }\r\n        qr.set(k, k, qr.get(k, k) + 1);\r\n        for (j = k + 1; j < n; j++) {\r\n          s = 0;\r\n          for (i = k; i < m; i++) {\r\n            s += qr.get(i, k) * qr.get(i, j);\r\n          }\r\n          s = -s / qr.get(k, k);\r\n          for (i = k; i < m; i++) {\r\n            qr.set(i, j, qr.get(i, j) + s * qr.get(i, k));\r\n          }\r\n        }\r\n      }\r\n      rdiag[k] = -nrm;\r\n    }\r\n\r\n    this.QR = qr;\r\n    this.Rdiag = rdiag;\r\n  }\r\n\r\n  solve(value) {\r\n    value = Matrix.checkMatrix(value);\r\n\r\n    let qr = this.QR;\r\n    let m = qr.rows;\r\n\r\n    if (value.rows !== m) {\r\n      throw new Error('Matrix row dimensions must agree');\r\n    }\r\n    if (!this.isFullRank()) {\r\n      throw new Error('Matrix is rank deficient');\r\n    }\r\n\r\n    let count = value.columns;\r\n    let X = value.clone();\r\n    let n = qr.columns;\r\n    let i, j, k, s;\r\n\r\n    for (k = 0; k < n; k++) {\r\n      for (j = 0; j < count; j++) {\r\n        s = 0;\r\n        for (i = k; i < m; i++) {\r\n          s += qr.get(i, k) * X.get(i, j);\r\n        }\r\n        s = -s / qr.get(k, k);\r\n        for (i = k; i < m; i++) {\r\n          X.set(i, j, X.get(i, j) + s * qr.get(i, k));\r\n        }\r\n      }\r\n    }\r\n    for (k = n - 1; k >= 0; k--) {\r\n      for (j = 0; j < count; j++) {\r\n        X.set(k, j, X.get(k, j) / this.Rdiag[k]);\r\n      }\r\n      for (i = 0; i < k; i++) {\r\n        for (j = 0; j < count; j++) {\r\n          X.set(i, j, X.get(i, j) - X.get(k, j) * qr.get(i, k));\r\n        }\r\n      }\r\n    }\r\n\r\n    return X.subMatrix(0, n - 1, 0, count - 1);\r\n  }\r\n\r\n  isFullRank() {\r\n    let columns = this.QR.columns;\r\n    for (let i = 0; i < columns; i++) {\r\n      if (this.Rdiag[i] === 0) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  get upperTriangularMatrix() {\r\n    let qr = this.QR;\r\n    let n = qr.columns;\r\n    let X = new Matrix(n, n);\r\n    let i, j;\r\n    for (i = 0; i < n; i++) {\r\n      for (j = 0; j < n; j++) {\r\n        if (i < j) {\r\n          X.set(i, j, qr.get(i, j));\r\n        } else if (i === j) {\r\n          X.set(i, j, this.Rdiag[i]);\r\n        } else {\r\n          X.set(i, j, 0);\r\n        }\r\n      }\r\n    }\r\n    return X;\r\n  }\r\n\r\n  get orthogonalMatrix() {\r\n    let qr = this.QR;\r\n    let rows = qr.rows;\r\n    let columns = qr.columns;\r\n    let X = new Matrix(rows, columns);\r\n    let i, j, k, s;\r\n\r\n    for (k = columns - 1; k >= 0; k--) {\r\n      for (i = 0; i < rows; i++) {\r\n        X.set(i, k, 0);\r\n      }\r\n      X.set(k, k, 1);\r\n      for (j = k; j < columns; j++) {\r\n        if (qr.get(k, k) !== 0) {\r\n          s = 0;\r\n          for (i = k; i < rows; i++) {\r\n            s += qr.get(i, k) * X.get(i, j);\r\n          }\r\n\r\n          s = -s / qr.get(k, k);\r\n\r\n          for (i = k; i < rows; i++) {\r\n            X.set(i, j, X.get(i, j) + s * qr.get(i, k));\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return X;\r\n  }\r\n}\r\n","import Matrix from '../matrix';\r\nimport WrapperMatrix2D from '../wrap/WrapperMatrix2D';\r\n\r\nimport { hypotenuse } from './util';\r\n\r\nexport default class SingularValueDecomposition {\r\n  constructor(value, options = {}) {\r\n    value = WrapperMatrix2D.checkMatrix(value);\r\n\r\n    let m = value.rows;\r\n    let n = value.columns;\r\n\r\n    const {\r\n      computeLeftSingularVectors = true,\r\n      computeRightSingularVectors = true,\r\n      autoTranspose = false,\r\n    } = options;\r\n\r\n    let wantu = Boolean(computeLeftSingularVectors);\r\n    let wantv = Boolean(computeRightSingularVectors);\r\n\r\n    let swapped = false;\r\n    let a;\r\n    if (m < n) {\r\n      if (!autoTranspose) {\r\n        a = value.clone();\r\n        // eslint-disable-next-line no-console\r\n        console.warn(\r\n          'Computing SVD on a matrix with more columns than rows. Consider enabling autoTranspose',\r\n        );\r\n      } else {\r\n        a = value.transpose();\r\n        m = a.rows;\r\n        n = a.columns;\r\n        swapped = true;\r\n        let aux = wantu;\r\n        wantu = wantv;\r\n        wantv = aux;\r\n      }\r\n    } else {\r\n      a = value.clone();\r\n    }\r\n\r\n    let nu = Math.min(m, n);\r\n    let ni = Math.min(m + 1, n);\r\n    let s = new Float64Array(ni);\r\n    let U = new Matrix(m, nu);\r\n    let V = new Matrix(n, n);\r\n\r\n    let e = new Float64Array(n);\r\n    let work = new Float64Array(m);\r\n\r\n    let si = new Float64Array(ni);\r\n    for (let i = 0; i < ni; i++) si[i] = i;\r\n\r\n    let nct = Math.min(m - 1, n);\r\n    let nrt = Math.max(0, Math.min(n - 2, m));\r\n    let mrc = Math.max(nct, nrt);\r\n\r\n    for (let k = 0; k < mrc; k++) {\r\n      if (k < nct) {\r\n        s[k] = 0;\r\n        for (let i = k; i < m; i++) {\r\n          s[k] = hypotenuse(s[k], a.get(i, k));\r\n        }\r\n        if (s[k] !== 0) {\r\n          if (a.get(k, k) < 0) {\r\n            s[k] = -s[k];\r\n          }\r\n          for (let i = k; i < m; i++) {\r\n            a.set(i, k, a.get(i, k) / s[k]);\r\n          }\r\n          a.set(k, k, a.get(k, k) + 1);\r\n        }\r\n        s[k] = -s[k];\r\n      }\r\n\r\n      for (let j = k + 1; j < n; j++) {\r\n        if (k < nct && s[k] !== 0) {\r\n          let t = 0;\r\n          for (let i = k; i < m; i++) {\r\n            t += a.get(i, k) * a.get(i, j);\r\n          }\r\n          t = -t / a.get(k, k);\r\n          for (let i = k; i < m; i++) {\r\n            a.set(i, j, a.get(i, j) + t * a.get(i, k));\r\n          }\r\n        }\r\n        e[j] = a.get(k, j);\r\n      }\r\n\r\n      if (wantu && k < nct) {\r\n        for (let i = k; i < m; i++) {\r\n          U.set(i, k, a.get(i, k));\r\n        }\r\n      }\r\n\r\n      if (k < nrt) {\r\n        e[k] = 0;\r\n        for (let i = k + 1; i < n; i++) {\r\n          e[k] = hypotenuse(e[k], e[i]);\r\n        }\r\n        if (e[k] !== 0) {\r\n          if (e[k + 1] < 0) {\r\n            e[k] = 0 - e[k];\r\n          }\r\n          for (let i = k + 1; i < n; i++) {\r\n            e[i] /= e[k];\r\n          }\r\n          e[k + 1] += 1;\r\n        }\r\n        e[k] = -e[k];\r\n        if (k + 1 < m && e[k] !== 0) {\r\n          for (let i = k + 1; i < m; i++) {\r\n            work[i] = 0;\r\n          }\r\n          for (let i = k + 1; i < m; i++) {\r\n            for (let j = k + 1; j < n; j++) {\r\n              work[i] += e[j] * a.get(i, j);\r\n            }\r\n          }\r\n          for (let j = k + 1; j < n; j++) {\r\n            let t = -e[j] / e[k + 1];\r\n            for (let i = k + 1; i < m; i++) {\r\n              a.set(i, j, a.get(i, j) + t * work[i]);\r\n            }\r\n          }\r\n        }\r\n        if (wantv) {\r\n          for (let i = k + 1; i < n; i++) {\r\n            V.set(i, k, e[i]);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    let p = Math.min(n, m + 1);\r\n    if (nct < n) {\r\n      s[nct] = a.get(nct, nct);\r\n    }\r\n    if (m < p) {\r\n      s[p - 1] = 0;\r\n    }\r\n    if (nrt + 1 < p) {\r\n      e[nrt] = a.get(nrt, p - 1);\r\n    }\r\n    e[p - 1] = 0;\r\n\r\n    if (wantu) {\r\n      for (let j = nct; j < nu; j++) {\r\n        for (let i = 0; i < m; i++) {\r\n          U.set(i, j, 0);\r\n        }\r\n        U.set(j, j, 1);\r\n      }\r\n      for (let k = nct - 1; k >= 0; k--) {\r\n        if (s[k] !== 0) {\r\n          for (let j = k + 1; j < nu; j++) {\r\n            let t = 0;\r\n            for (let i = k; i < m; i++) {\r\n              t += U.get(i, k) * U.get(i, j);\r\n            }\r\n            t = -t / U.get(k, k);\r\n            for (let i = k; i < m; i++) {\r\n              U.set(i, j, U.get(i, j) + t * U.get(i, k));\r\n            }\r\n          }\r\n          for (let i = k; i < m; i++) {\r\n            U.set(i, k, -U.get(i, k));\r\n          }\r\n          U.set(k, k, 1 + U.get(k, k));\r\n          for (let i = 0; i < k - 1; i++) {\r\n            U.set(i, k, 0);\r\n          }\r\n        } else {\r\n          for (let i = 0; i < m; i++) {\r\n            U.set(i, k, 0);\r\n          }\r\n          U.set(k, k, 1);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (wantv) {\r\n      for (let k = n - 1; k >= 0; k--) {\r\n        if (k < nrt && e[k] !== 0) {\r\n          for (let j = k + 1; j < n; j++) {\r\n            let t = 0;\r\n            for (let i = k + 1; i < n; i++) {\r\n              t += V.get(i, k) * V.get(i, j);\r\n            }\r\n            t = -t / V.get(k + 1, k);\r\n            for (let i = k + 1; i < n; i++) {\r\n              V.set(i, j, V.get(i, j) + t * V.get(i, k));\r\n            }\r\n          }\r\n        }\r\n        for (let i = 0; i < n; i++) {\r\n          V.set(i, k, 0);\r\n        }\r\n        V.set(k, k, 1);\r\n      }\r\n    }\r\n\r\n    let pp = p - 1;\r\n    let iter = 0;\r\n    let eps = Number.EPSILON;\r\n    while (p > 0) {\r\n      let k, kase;\r\n      for (k = p - 2; k >= -1; k--) {\r\n        if (k === -1) {\r\n          break;\r\n        }\r\n        const alpha =\r\n          Number.MIN_VALUE + eps * Math.abs(s[k] + Math.abs(s[k + 1]));\r\n        if (Math.abs(e[k]) <= alpha || Number.isNaN(e[k])) {\r\n          e[k] = 0;\r\n          break;\r\n        }\r\n      }\r\n      if (k === p - 2) {\r\n        kase = 4;\r\n      } else {\r\n        let ks;\r\n        for (ks = p - 1; ks >= k; ks--) {\r\n          if (ks === k) {\r\n            break;\r\n          }\r\n          let t =\r\n            (ks !== p ? Math.abs(e[ks]) : 0) +\r\n            (ks !== k + 1 ? Math.abs(e[ks - 1]) : 0);\r\n          if (Math.abs(s[ks]) <= eps * t) {\r\n            s[ks] = 0;\r\n            break;\r\n          }\r\n        }\r\n        if (ks === k) {\r\n          kase = 3;\r\n        } else if (ks === p - 1) {\r\n          kase = 1;\r\n        } else {\r\n          kase = 2;\r\n          k = ks;\r\n        }\r\n      }\r\n\r\n      k++;\r\n\r\n      switch (kase) {\r\n        case 1: {\r\n          let f = e[p - 2];\r\n          e[p - 2] = 0;\r\n          for (let j = p - 2; j >= k; j--) {\r\n            let t = hypotenuse(s[j], f);\r\n            let cs = s[j] / t;\r\n            let sn = f / t;\r\n            s[j] = t;\r\n            if (j !== k) {\r\n              f = -sn * e[j - 1];\r\n              e[j - 1] = cs * e[j - 1];\r\n            }\r\n            if (wantv) {\r\n              for (let i = 0; i < n; i++) {\r\n                t = cs * V.get(i, j) + sn * V.get(i, p - 1);\r\n                V.set(i, p - 1, -sn * V.get(i, j) + cs * V.get(i, p - 1));\r\n                V.set(i, j, t);\r\n              }\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case 2: {\r\n          let f = e[k - 1];\r\n          e[k - 1] = 0;\r\n          for (let j = k; j < p; j++) {\r\n            let t = hypotenuse(s[j], f);\r\n            let cs = s[j] / t;\r\n            let sn = f / t;\r\n            s[j] = t;\r\n            f = -sn * e[j];\r\n            e[j] = cs * e[j];\r\n            if (wantu) {\r\n              for (let i = 0; i < m; i++) {\r\n                t = cs * U.get(i, j) + sn * U.get(i, k - 1);\r\n                U.set(i, k - 1, -sn * U.get(i, j) + cs * U.get(i, k - 1));\r\n                U.set(i, j, t);\r\n              }\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case 3: {\r\n          const scale = Math.max(\r\n            Math.abs(s[p - 1]),\r\n            Math.abs(s[p - 2]),\r\n            Math.abs(e[p - 2]),\r\n            Math.abs(s[k]),\r\n            Math.abs(e[k]),\r\n          );\r\n          const sp = s[p - 1] / scale;\r\n          const spm1 = s[p - 2] / scale;\r\n          const epm1 = e[p - 2] / scale;\r\n          const sk = s[k] / scale;\r\n          const ek = e[k] / scale;\r\n          const b = ((spm1 + sp) * (spm1 - sp) + epm1 * epm1) / 2;\r\n          const c = sp * epm1 * (sp * epm1);\r\n          let shift = 0;\r\n          if (b !== 0 || c !== 0) {\r\n            if (b < 0) {\r\n              shift = 0 - Math.sqrt(b * b + c);\r\n            } else {\r\n              shift = Math.sqrt(b * b + c);\r\n            }\r\n            shift = c / (b + shift);\r\n          }\r\n          let f = (sk + sp) * (sk - sp) + shift;\r\n          let g = sk * ek;\r\n          for (let j = k; j < p - 1; j++) {\r\n            let t = hypotenuse(f, g);\r\n            if (t === 0) t = Number.MIN_VALUE;\r\n            let cs = f / t;\r\n            let sn = g / t;\r\n            if (j !== k) {\r\n              e[j - 1] = t;\r\n            }\r\n            f = cs * s[j] + sn * e[j];\r\n            e[j] = cs * e[j] - sn * s[j];\r\n            g = sn * s[j + 1];\r\n            s[j + 1] = cs * s[j + 1];\r\n            if (wantv) {\r\n              for (let i = 0; i < n; i++) {\r\n                t = cs * V.get(i, j) + sn * V.get(i, j + 1);\r\n                V.set(i, j + 1, -sn * V.get(i, j) + cs * V.get(i, j + 1));\r\n                V.set(i, j, t);\r\n              }\r\n            }\r\n            t = hypotenuse(f, g);\r\n            if (t === 0) t = Number.MIN_VALUE;\r\n            cs = f / t;\r\n            sn = g / t;\r\n            s[j] = t;\r\n            f = cs * e[j] + sn * s[j + 1];\r\n            s[j + 1] = -sn * e[j] + cs * s[j + 1];\r\n            g = sn * e[j + 1];\r\n            e[j + 1] = cs * e[j + 1];\r\n            if (wantu && j < m - 1) {\r\n              for (let i = 0; i < m; i++) {\r\n                t = cs * U.get(i, j) + sn * U.get(i, j + 1);\r\n                U.set(i, j + 1, -sn * U.get(i, j) + cs * U.get(i, j + 1));\r\n                U.set(i, j, t);\r\n              }\r\n            }\r\n          }\r\n          e[p - 2] = f;\r\n          iter = iter + 1;\r\n          break;\r\n        }\r\n        case 4: {\r\n          if (s[k] <= 0) {\r\n            s[k] = s[k] < 0 ? -s[k] : 0;\r\n            if (wantv) {\r\n              for (let i = 0; i <= pp; i++) {\r\n                V.set(i, k, -V.get(i, k));\r\n              }\r\n            }\r\n          }\r\n          while (k < pp) {\r\n            if (s[k] >= s[k + 1]) {\r\n              break;\r\n            }\r\n            let t = s[k];\r\n            s[k] = s[k + 1];\r\n            s[k + 1] = t;\r\n            if (wantv && k < n - 1) {\r\n              for (let i = 0; i < n; i++) {\r\n                t = V.get(i, k + 1);\r\n                V.set(i, k + 1, V.get(i, k));\r\n                V.set(i, k, t);\r\n              }\r\n            }\r\n            if (wantu && k < m - 1) {\r\n              for (let i = 0; i < m; i++) {\r\n                t = U.get(i, k + 1);\r\n                U.set(i, k + 1, U.get(i, k));\r\n                U.set(i, k, t);\r\n              }\r\n            }\r\n            k++;\r\n          }\r\n          iter = 0;\r\n          p--;\r\n          break;\r\n        }\r\n        // no default\r\n      }\r\n    }\r\n\r\n    if (swapped) {\r\n      let tmp = V;\r\n      V = U;\r\n      U = tmp;\r\n    }\r\n\r\n    this.m = m;\r\n    this.n = n;\r\n    this.s = s;\r\n    this.U = U;\r\n    this.V = V;\r\n  }\r\n\r\n  solve(value) {\r\n    let Y = value;\r\n    let e = this.threshold;\r\n    let scols = this.s.length;\r\n    let Ls = Matrix.zeros(scols, scols);\r\n\r\n    for (let i = 0; i < scols; i++) {\r\n      if (Math.abs(this.s[i]) <= e) {\r\n        Ls.set(i, i, 0);\r\n      } else {\r\n        Ls.set(i, i, 1 / this.s[i]);\r\n      }\r\n    }\r\n\r\n    let U = this.U;\r\n    let V = this.rightSingularVectors;\r\n\r\n    let VL = V.mmul(Ls);\r\n    let vrows = V.rows;\r\n    let urows = U.rows;\r\n    let VLU = Matrix.zeros(vrows, urows);\r\n\r\n    for (let i = 0; i < vrows; i++) {\r\n      for (let j = 0; j < urows; j++) {\r\n        let sum = 0;\r\n        for (let k = 0; k < scols; k++) {\r\n          sum += VL.get(i, k) * U.get(j, k);\r\n        }\r\n        VLU.set(i, j, sum);\r\n      }\r\n    }\r\n\r\n    return VLU.mmul(Y);\r\n  }\r\n\r\n  solveForDiagonal(value) {\r\n    return this.solve(Matrix.diag(value));\r\n  }\r\n\r\n  inverse() {\r\n    let V = this.V;\r\n    let e = this.threshold;\r\n    let vrows = V.rows;\r\n    let vcols = V.columns;\r\n    let X = new Matrix(vrows, this.s.length);\r\n\r\n    for (let i = 0; i < vrows; i++) {\r\n      for (let j = 0; j < vcols; j++) {\r\n        if (Math.abs(this.s[j]) > e) {\r\n          X.set(i, j, V.get(i, j) / this.s[j]);\r\n        }\r\n      }\r\n    }\r\n\r\n    let U = this.U;\r\n\r\n    let urows = U.rows;\r\n    let ucols = U.columns;\r\n    let Y = new Matrix(vrows, urows);\r\n\r\n    for (let i = 0; i < vrows; i++) {\r\n      for (let j = 0; j < urows; j++) {\r\n        let sum = 0;\r\n        for (let k = 0; k < ucols; k++) {\r\n          sum += X.get(i, k) * U.get(j, k);\r\n        }\r\n        Y.set(i, j, sum);\r\n      }\r\n    }\r\n\r\n    return Y;\r\n  }\r\n\r\n  get condition() {\r\n    return this.s[0] / this.s[Math.min(this.m, this.n) - 1];\r\n  }\r\n\r\n  get norm2() {\r\n    return this.s[0];\r\n  }\r\n\r\n  get rank() {\r\n    let tol = Math.max(this.m, this.n) * this.s[0] * Number.EPSILON;\r\n    let r = 0;\r\n    let s = this.s;\r\n    for (let i = 0, ii = s.length; i < ii; i++) {\r\n      if (s[i] > tol) {\r\n        r++;\r\n      }\r\n    }\r\n    return r;\r\n  }\r\n\r\n  get diagonal() {\r\n    return Array.from(this.s);\r\n  }\r\n\r\n  get threshold() {\r\n    return (Number.EPSILON / 2) * Math.max(this.m, this.n) * this.s[0];\r\n  }\r\n\r\n  get leftSingularVectors() {\r\n    return this.U;\r\n  }\r\n\r\n  get rightSingularVectors() {\r\n    return this.V;\r\n  }\r\n\r\n  get diagonalMatrix() {\r\n    return Matrix.diag(this.s);\r\n  }\r\n}\r\n","import LuDecomposition from './dc/lu';\r\nimport QrDecomposition from './dc/qr';\r\nimport SingularValueDecomposition from './dc/svd';\r\nimport Matrix from './matrix';\r\nimport WrapperMatrix2D from './wrap/WrapperMatrix2D';\r\n\r\nexport function inverse(matrix, useSVD = false) {\r\n  matrix = WrapperMatrix2D.checkMatrix(matrix);\r\n  if (useSVD) {\r\n    return new SingularValueDecomposition(matrix).inverse();\r\n  } else {\r\n    return solve(matrix, Matrix.eye(matrix.rows));\r\n  }\r\n}\r\n\r\nexport function solve(leftHandSide, rightHandSide, useSVD = false) {\r\n  leftHandSide = WrapperMatrix2D.checkMatrix(leftHandSide);\r\n  rightHandSide = WrapperMatrix2D.checkMatrix(rightHandSide);\r\n  if (useSVD) {\r\n    return new SingularValueDecomposition(leftHandSide).solve(rightHandSide);\r\n  } else {\r\n    return leftHandSide.isSquare()\r\n      ? new LuDecomposition(leftHandSide).solve(rightHandSide)\r\n      : new QrDecomposition(leftHandSide).solve(rightHandSide);\r\n  }\r\n}\r\n","import LuDecomposition from './dc/lu';\r\nimport Matrix from './matrix';\r\nimport MatrixSelectionView from './views/selection';\r\n\r\nexport function determinant(matrix) {\r\n  matrix = Matrix.checkMatrix(matrix);\r\n  if (matrix.isSquare()) {\r\n    let a, b, c, d;\r\n    if (matrix.columns === 2) {\r\n      // 2 x 2 matrix\r\n      a = matrix.get(0, 0);\r\n      b = matrix.get(0, 1);\r\n      c = matrix.get(1, 0);\r\n      d = matrix.get(1, 1);\r\n\r\n      return a * d - b * c;\r\n    } else if (matrix.columns === 3) {\r\n      // 3 x 3 matrix\r\n      let subMatrix0, subMatrix1, subMatrix2;\r\n      subMatrix0 = new MatrixSelectionView(matrix, [1, 2], [1, 2]);\r\n      subMatrix1 = new MatrixSelectionView(matrix, [1, 2], [0, 2]);\r\n      subMatrix2 = new MatrixSelectionView(matrix, [1, 2], [0, 1]);\r\n      a = matrix.get(0, 0);\r\n      b = matrix.get(0, 1);\r\n      c = matrix.get(0, 2);\r\n\r\n      return (\r\n        a * determinant(subMatrix0) -\r\n        b * determinant(subMatrix1) +\r\n        c * determinant(subMatrix2)\r\n      );\r\n    } else {\r\n      // general purpose determinant using the LU decomposition\r\n      return new LuDecomposition(matrix).determinant;\r\n    }\r\n  } else {\r\n    throw Error('determinant can only be calculated for a square matrix');\r\n  }\r\n}\r\n","import SingularValueDecomposition from './dc/svd';\r\nimport Matrix from './matrix';\r\n\r\nfunction xrange(n, exception) {\r\n  let range = [];\r\n  for (let i = 0; i < n; i++) {\r\n    if (i !== exception) {\r\n      range.push(i);\r\n    }\r\n  }\r\n  return range;\r\n}\r\n\r\nfunction dependenciesOneRow(\r\n  error,\r\n  matrix,\r\n  index,\r\n  thresholdValue = 10e-10,\r\n  thresholdError = 10e-10,\r\n) {\r\n  if (error > thresholdError) {\r\n    return new Array(matrix.rows + 1).fill(0);\r\n  } else {\r\n    let returnArray = matrix.addRow(index, [0]);\r\n    for (let i = 0; i < returnArray.rows; i++) {\r\n      if (Math.abs(returnArray.get(i, 0)) < thresholdValue) {\r\n        returnArray.set(i, 0, 0);\r\n      }\r\n    }\r\n    return returnArray.to1DArray();\r\n  }\r\n}\r\n\r\nexport function linearDependencies(matrix, options = {}) {\r\n  const { thresholdValue = 10e-10, thresholdError = 10e-10 } = options;\r\n  matrix = Matrix.checkMatrix(matrix);\r\n\r\n  let n = matrix.rows;\r\n  let results = new Matrix(n, n);\r\n\r\n  for (let i = 0; i < n; i++) {\r\n    let b = Matrix.columnVector(matrix.getRow(i));\r\n    let Abis = matrix.subMatrixRow(xrange(n, i)).transpose();\r\n    let svd = new SingularValueDecomposition(Abis);\r\n    let x = svd.solve(b);\r\n    let error = Matrix.sub(b, Abis.mmul(x)).abs().max();\r\n    results.setRow(\r\n      i,\r\n      dependenciesOneRow(error, x, i, thresholdValue, thresholdError),\r\n    );\r\n  }\r\n  return results;\r\n}\r\n","import SVD from './dc/svd';\r\nimport Matrix from './matrix';\r\n\r\nexport function pseudoInverse(matrix, threshold = Number.EPSILON) {\r\n  matrix = Matrix.checkMatrix(matrix);\r\n  let svdSolution = new SVD(matrix, { autoTranspose: true });\r\n\r\n  let U = svdSolution.leftSingularVectors;\r\n  let V = svdSolution.rightSingularVectors;\r\n  let s = svdSolution.diagonal;\r\n\r\n  for (let i = 0; i < s.length; i++) {\r\n    if (Math.abs(s[i]) > threshold) {\r\n      s[i] = 1.0 / s[i];\r\n    } else {\r\n      s[i] = 0.0;\r\n    }\r\n  }\r\n\r\n  return V.mmul(Matrix.diag(s).mmul(U.transpose()));\r\n}\r\n","import Matrix from './matrix';\r\n\r\nexport function covariance(xMatrix, yMatrix = xMatrix, options = {}) {\r\n  xMatrix = new Matrix(xMatrix);\r\n  let yIsSame = false;\r\n  if (\r\n    typeof yMatrix === 'object' &&\r\n    !Matrix.isMatrix(yMatrix) &&\r\n    !Array.isArray(yMatrix)\r\n  ) {\r\n    options = yMatrix;\r\n    yMatrix = xMatrix;\r\n    yIsSame = true;\r\n  } else {\r\n    yMatrix = new Matrix(yMatrix);\r\n  }\r\n  if (xMatrix.rows !== yMatrix.rows) {\r\n    throw new TypeError('Both matrices must have the same number of rows');\r\n  }\r\n  const { center = true } = options;\r\n  if (center) {\r\n    xMatrix = xMatrix.center('column');\r\n    if (!yIsSame) {\r\n      yMatrix = yMatrix.center('column');\r\n    }\r\n  }\r\n  const cov = xMatrix.transpose().mmul(yMatrix);\r\n  for (let i = 0; i < cov.rows; i++) {\r\n    for (let j = 0; j < cov.columns; j++) {\r\n      cov.set(i, j, cov.get(i, j) * (1 / (xMatrix.rows - 1)));\r\n    }\r\n  }\r\n  return cov;\r\n}\r\n","import Matrix from './matrix';\r\n\r\nexport function correlation(xMatrix, yMatrix = xMatrix, options = {}) {\r\n  xMatrix = new Matrix(xMatrix);\r\n  let yIsSame = false;\r\n  if (\r\n    typeof yMatrix === 'object' &&\r\n    !Matrix.isMatrix(yMatrix) &&\r\n    !Array.isArray(yMatrix)\r\n  ) {\r\n    options = yMatrix;\r\n    yMatrix = xMatrix;\r\n    yIsSame = true;\r\n  } else {\r\n    yMatrix = new Matrix(yMatrix);\r\n  }\r\n  if (xMatrix.rows !== yMatrix.rows) {\r\n    throw new TypeError('Both matrices must have the same number of rows');\r\n  }\r\n\r\n  const { center = true, scale = true } = options;\r\n  if (center) {\r\n    xMatrix.center('column');\r\n    if (!yIsSame) {\r\n      yMatrix.center('column');\r\n    }\r\n  }\r\n  if (scale) {\r\n    xMatrix.scale('column');\r\n    if (!yIsSame) {\r\n      yMatrix.scale('column');\r\n    }\r\n  }\r\n\r\n  const sdx = xMatrix.standardDeviation('column', { unbiased: true });\r\n  const sdy = yIsSame\r\n    ? sdx\r\n    : yMatrix.standardDeviation('column', { unbiased: true });\r\n\r\n  const corr = xMatrix.transpose().mmul(yMatrix);\r\n  for (let i = 0; i < corr.rows; i++) {\r\n    for (let j = 0; j < corr.columns; j++) {\r\n      corr.set(\r\n        i,\r\n        j,\r\n        corr.get(i, j) * (1 / (sdx[i] * sdy[j])) * (1 / (xMatrix.rows - 1)),\r\n      );\r\n    }\r\n  }\r\n  return corr;\r\n}\r\n","import Matrix from '../matrix';\r\nimport WrapperMatrix2D from '../wrap/WrapperMatrix2D';\r\n\r\nimport { hypotenuse } from './util';\r\n\r\nexport default class EigenvalueDecomposition {\r\n  constructor(matrix, options = {}) {\r\n    const { assumeSymmetric = false } = options;\r\n\r\n    matrix = WrapperMatrix2D.checkMatrix(matrix);\r\n    if (!matrix.isSquare()) {\r\n      throw new Error('Matrix is not a square matrix');\r\n    }\r\n\r\n    let n = matrix.columns;\r\n    let V = new Matrix(n, n);\r\n    let d = new Float64Array(n);\r\n    let e = new Float64Array(n);\r\n    let value = matrix;\r\n    let i, j;\r\n\r\n    let isSymmetric = false;\r\n    if (assumeSymmetric) {\r\n      isSymmetric = true;\r\n    } else {\r\n      isSymmetric = matrix.isSymmetric();\r\n    }\r\n\r\n    if (isSymmetric) {\r\n      for (i = 0; i < n; i++) {\r\n        for (j = 0; j < n; j++) {\r\n          V.set(i, j, value.get(i, j));\r\n        }\r\n      }\r\n      tred2(n, e, d, V);\r\n      tql2(n, e, d, V);\r\n    } else {\r\n      let H = new Matrix(n, n);\r\n      let ort = new Float64Array(n);\r\n      for (j = 0; j < n; j++) {\r\n        for (i = 0; i < n; i++) {\r\n          H.set(i, j, value.get(i, j));\r\n        }\r\n      }\r\n      orthes(n, H, ort, V);\r\n      hqr2(n, e, d, V, H);\r\n    }\r\n\r\n    this.n = n;\r\n    this.e = e;\r\n    this.d = d;\r\n    this.V = V;\r\n  }\r\n\r\n  get realEigenvalues() {\r\n    return Array.from(this.d);\r\n  }\r\n\r\n  get imaginaryEigenvalues() {\r\n    return Array.from(this.e);\r\n  }\r\n\r\n  get eigenvectorMatrix() {\r\n    return this.V;\r\n  }\r\n\r\n  get diagonalMatrix() {\r\n    let n = this.n;\r\n    let e = this.e;\r\n    let d = this.d;\r\n    let X = new Matrix(n, n);\r\n    let i, j;\r\n    for (i = 0; i < n; i++) {\r\n      for (j = 0; j < n; j++) {\r\n        X.set(i, j, 0);\r\n      }\r\n      X.set(i, i, d[i]);\r\n      if (e[i] > 0) {\r\n        X.set(i, i + 1, e[i]);\r\n      } else if (e[i] < 0) {\r\n        X.set(i, i - 1, e[i]);\r\n      }\r\n    }\r\n    return X;\r\n  }\r\n}\r\n\r\nfunction tred2(n, e, d, V) {\r\n  let f, g, h, i, j, k, hh, scale;\r\n\r\n  for (j = 0; j < n; j++) {\r\n    d[j] = V.get(n - 1, j);\r\n  }\r\n\r\n  for (i = n - 1; i > 0; i--) {\r\n    scale = 0;\r\n    h = 0;\r\n    for (k = 0; k < i; k++) {\r\n      scale = scale + Math.abs(d[k]);\r\n    }\r\n\r\n    if (scale === 0) {\r\n      e[i] = d[i - 1];\r\n      for (j = 0; j < i; j++) {\r\n        d[j] = V.get(i - 1, j);\r\n        V.set(i, j, 0);\r\n        V.set(j, i, 0);\r\n      }\r\n    } else {\r\n      for (k = 0; k < i; k++) {\r\n        d[k] /= scale;\r\n        h += d[k] * d[k];\r\n      }\r\n\r\n      f = d[i - 1];\r\n      g = Math.sqrt(h);\r\n      if (f > 0) {\r\n        g = -g;\r\n      }\r\n\r\n      e[i] = scale * g;\r\n      h = h - f * g;\r\n      d[i - 1] = f - g;\r\n      for (j = 0; j < i; j++) {\r\n        e[j] = 0;\r\n      }\r\n\r\n      for (j = 0; j < i; j++) {\r\n        f = d[j];\r\n        V.set(j, i, f);\r\n        g = e[j] + V.get(j, j) * f;\r\n        for (k = j + 1; k <= i - 1; k++) {\r\n          g += V.get(k, j) * d[k];\r\n          e[k] += V.get(k, j) * f;\r\n        }\r\n        e[j] = g;\r\n      }\r\n\r\n      f = 0;\r\n      for (j = 0; j < i; j++) {\r\n        e[j] /= h;\r\n        f += e[j] * d[j];\r\n      }\r\n\r\n      hh = f / (h + h);\r\n      for (j = 0; j < i; j++) {\r\n        e[j] -= hh * d[j];\r\n      }\r\n\r\n      for (j = 0; j < i; j++) {\r\n        f = d[j];\r\n        g = e[j];\r\n        for (k = j; k <= i - 1; k++) {\r\n          V.set(k, j, V.get(k, j) - (f * e[k] + g * d[k]));\r\n        }\r\n        d[j] = V.get(i - 1, j);\r\n        V.set(i, j, 0);\r\n      }\r\n    }\r\n    d[i] = h;\r\n  }\r\n\r\n  for (i = 0; i < n - 1; i++) {\r\n    V.set(n - 1, i, V.get(i, i));\r\n    V.set(i, i, 1);\r\n    h = d[i + 1];\r\n    if (h !== 0) {\r\n      for (k = 0; k <= i; k++) {\r\n        d[k] = V.get(k, i + 1) / h;\r\n      }\r\n\r\n      for (j = 0; j <= i; j++) {\r\n        g = 0;\r\n        for (k = 0; k <= i; k++) {\r\n          g += V.get(k, i + 1) * V.get(k, j);\r\n        }\r\n        for (k = 0; k <= i; k++) {\r\n          V.set(k, j, V.get(k, j) - g * d[k]);\r\n        }\r\n      }\r\n    }\r\n\r\n    for (k = 0; k <= i; k++) {\r\n      V.set(k, i + 1, 0);\r\n    }\r\n  }\r\n\r\n  for (j = 0; j < n; j++) {\r\n    d[j] = V.get(n - 1, j);\r\n    V.set(n - 1, j, 0);\r\n  }\r\n\r\n  V.set(n - 1, n - 1, 1);\r\n  e[0] = 0;\r\n}\r\n\r\nfunction tql2(n, e, d, V) {\r\n  let g, h, i, j, k, l, m, p, r, dl1, c, c2, c3, el1, s, s2, iter;\r\n\r\n  for (i = 1; i < n; i++) {\r\n    e[i - 1] = e[i];\r\n  }\r\n\r\n  e[n - 1] = 0;\r\n\r\n  let f = 0;\r\n  let tst1 = 0;\r\n  let eps = Number.EPSILON;\r\n\r\n  for (l = 0; l < n; l++) {\r\n    tst1 = Math.max(tst1, Math.abs(d[l]) + Math.abs(e[l]));\r\n    m = l;\r\n    while (m < n) {\r\n      if (Math.abs(e[m]) <= eps * tst1) {\r\n        break;\r\n      }\r\n      m++;\r\n    }\r\n\r\n    if (m > l) {\r\n      iter = 0;\r\n      do {\r\n        iter = iter + 1;\r\n\r\n        g = d[l];\r\n        p = (d[l + 1] - g) / (2 * e[l]);\r\n        r = hypotenuse(p, 1);\r\n        if (p < 0) {\r\n          r = -r;\r\n        }\r\n\r\n        d[l] = e[l] / (p + r);\r\n        d[l + 1] = e[l] * (p + r);\r\n        dl1 = d[l + 1];\r\n        h = g - d[l];\r\n        for (i = l + 2; i < n; i++) {\r\n          d[i] -= h;\r\n        }\r\n\r\n        f = f + h;\r\n\r\n        p = d[m];\r\n        c = 1;\r\n        c2 = c;\r\n        c3 = c;\r\n        el1 = e[l + 1];\r\n        s = 0;\r\n        s2 = 0;\r\n        for (i = m - 1; i >= l; i--) {\r\n          c3 = c2;\r\n          c2 = c;\r\n          s2 = s;\r\n          g = c * e[i];\r\n          h = c * p;\r\n          r = hypotenuse(p, e[i]);\r\n          e[i + 1] = s * r;\r\n          s = e[i] / r;\r\n          c = p / r;\r\n          p = c * d[i] - s * g;\r\n          d[i + 1] = h + s * (c * g + s * d[i]);\r\n\r\n          for (k = 0; k < n; k++) {\r\n            h = V.get(k, i + 1);\r\n            V.set(k, i + 1, s * V.get(k, i) + c * h);\r\n            V.set(k, i, c * V.get(k, i) - s * h);\r\n          }\r\n        }\r\n\r\n        p = (-s * s2 * c3 * el1 * e[l]) / dl1;\r\n        e[l] = s * p;\r\n        d[l] = c * p;\r\n      } while (Math.abs(e[l]) > eps * tst1);\r\n    }\r\n    d[l] = d[l] + f;\r\n    e[l] = 0;\r\n  }\r\n\r\n  for (i = 0; i < n - 1; i++) {\r\n    k = i;\r\n    p = d[i];\r\n    for (j = i + 1; j < n; j++) {\r\n      if (d[j] < p) {\r\n        k = j;\r\n        p = d[j];\r\n      }\r\n    }\r\n\r\n    if (k !== i) {\r\n      d[k] = d[i];\r\n      d[i] = p;\r\n      for (j = 0; j < n; j++) {\r\n        p = V.get(j, i);\r\n        V.set(j, i, V.get(j, k));\r\n        V.set(j, k, p);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction orthes(n, H, ort, V) {\r\n  let low = 0;\r\n  let high = n - 1;\r\n  let f, g, h, i, j, m;\r\n  let scale;\r\n\r\n  for (m = low + 1; m <= high - 1; m++) {\r\n    scale = 0;\r\n    for (i = m; i <= high; i++) {\r\n      scale = scale + Math.abs(H.get(i, m - 1));\r\n    }\r\n\r\n    if (scale !== 0) {\r\n      h = 0;\r\n      for (i = high; i >= m; i--) {\r\n        ort[i] = H.get(i, m - 1) / scale;\r\n        h += ort[i] * ort[i];\r\n      }\r\n\r\n      g = Math.sqrt(h);\r\n      if (ort[m] > 0) {\r\n        g = -g;\r\n      }\r\n\r\n      h = h - ort[m] * g;\r\n      ort[m] = ort[m] - g;\r\n\r\n      for (j = m; j < n; j++) {\r\n        f = 0;\r\n        for (i = high; i >= m; i--) {\r\n          f += ort[i] * H.get(i, j);\r\n        }\r\n\r\n        f = f / h;\r\n        for (i = m; i <= high; i++) {\r\n          H.set(i, j, H.get(i, j) - f * ort[i]);\r\n        }\r\n      }\r\n\r\n      for (i = 0; i <= high; i++) {\r\n        f = 0;\r\n        for (j = high; j >= m; j--) {\r\n          f += ort[j] * H.get(i, j);\r\n        }\r\n\r\n        f = f / h;\r\n        for (j = m; j <= high; j++) {\r\n          H.set(i, j, H.get(i, j) - f * ort[j]);\r\n        }\r\n      }\r\n\r\n      ort[m] = scale * ort[m];\r\n      H.set(m, m - 1, scale * g);\r\n    }\r\n  }\r\n\r\n  for (i = 0; i < n; i++) {\r\n    for (j = 0; j < n; j++) {\r\n      V.set(i, j, i === j ? 1 : 0);\r\n    }\r\n  }\r\n\r\n  for (m = high - 1; m >= low + 1; m--) {\r\n    if (H.get(m, m - 1) !== 0) {\r\n      for (i = m + 1; i <= high; i++) {\r\n        ort[i] = H.get(i, m - 1);\r\n      }\r\n\r\n      for (j = m; j <= high; j++) {\r\n        g = 0;\r\n        for (i = m; i <= high; i++) {\r\n          g += ort[i] * V.get(i, j);\r\n        }\r\n\r\n        g = g / ort[m] / H.get(m, m - 1);\r\n        for (i = m; i <= high; i++) {\r\n          V.set(i, j, V.get(i, j) + g * ort[i]);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction hqr2(nn, e, d, V, H) {\r\n  let n = nn - 1;\r\n  let low = 0;\r\n  let high = nn - 1;\r\n  let eps = Number.EPSILON;\r\n  let exshift = 0;\r\n  let norm = 0;\r\n  let p = 0;\r\n  let q = 0;\r\n  let r = 0;\r\n  let s = 0;\r\n  let z = 0;\r\n  let iter = 0;\r\n  let i, j, k, l, m, t, w, x, y;\r\n  let ra, sa, vr, vi;\r\n  let notlast, cdivres;\r\n\r\n  for (i = 0; i < nn; i++) {\r\n    if (i < low || i > high) {\r\n      d[i] = H.get(i, i);\r\n      e[i] = 0;\r\n    }\r\n\r\n    for (j = Math.max(i - 1, 0); j < nn; j++) {\r\n      norm = norm + Math.abs(H.get(i, j));\r\n    }\r\n  }\r\n\r\n  while (n >= low) {\r\n    l = n;\r\n    while (l > low) {\r\n      s = Math.abs(H.get(l - 1, l - 1)) + Math.abs(H.get(l, l));\r\n      if (s === 0) {\r\n        s = norm;\r\n      }\r\n      if (Math.abs(H.get(l, l - 1)) < eps * s) {\r\n        break;\r\n      }\r\n      l--;\r\n    }\r\n\r\n    if (l === n) {\r\n      H.set(n, n, H.get(n, n) + exshift);\r\n      d[n] = H.get(n, n);\r\n      e[n] = 0;\r\n      n--;\r\n      iter = 0;\r\n    } else if (l === n - 1) {\r\n      w = H.get(n, n - 1) * H.get(n - 1, n);\r\n      p = (H.get(n - 1, n - 1) - H.get(n, n)) / 2;\r\n      q = p * p + w;\r\n      z = Math.sqrt(Math.abs(q));\r\n      H.set(n, n, H.get(n, n) + exshift);\r\n      H.set(n - 1, n - 1, H.get(n - 1, n - 1) + exshift);\r\n      x = H.get(n, n);\r\n\r\n      if (q >= 0) {\r\n        z = p >= 0 ? p + z : p - z;\r\n        d[n - 1] = x + z;\r\n        d[n] = d[n - 1];\r\n        if (z !== 0) {\r\n          d[n] = x - w / z;\r\n        }\r\n        e[n - 1] = 0;\r\n        e[n] = 0;\r\n        x = H.get(n, n - 1);\r\n        s = Math.abs(x) + Math.abs(z);\r\n        p = x / s;\r\n        q = z / s;\r\n        r = Math.sqrt(p * p + q * q);\r\n        p = p / r;\r\n        q = q / r;\r\n\r\n        for (j = n - 1; j < nn; j++) {\r\n          z = H.get(n - 1, j);\r\n          H.set(n - 1, j, q * z + p * H.get(n, j));\r\n          H.set(n, j, q * H.get(n, j) - p * z);\r\n        }\r\n\r\n        for (i = 0; i <= n; i++) {\r\n          z = H.get(i, n - 1);\r\n          H.set(i, n - 1, q * z + p * H.get(i, n));\r\n          H.set(i, n, q * H.get(i, n) - p * z);\r\n        }\r\n\r\n        for (i = low; i <= high; i++) {\r\n          z = V.get(i, n - 1);\r\n          V.set(i, n - 1, q * z + p * V.get(i, n));\r\n          V.set(i, n, q * V.get(i, n) - p * z);\r\n        }\r\n      } else {\r\n        d[n - 1] = x + p;\r\n        d[n] = x + p;\r\n        e[n - 1] = z;\r\n        e[n] = -z;\r\n      }\r\n\r\n      n = n - 2;\r\n      iter = 0;\r\n    } else {\r\n      x = H.get(n, n);\r\n      y = 0;\r\n      w = 0;\r\n      if (l < n) {\r\n        y = H.get(n - 1, n - 1);\r\n        w = H.get(n, n - 1) * H.get(n - 1, n);\r\n      }\r\n\r\n      if (iter === 10) {\r\n        exshift += x;\r\n        for (i = low; i <= n; i++) {\r\n          H.set(i, i, H.get(i, i) - x);\r\n        }\r\n        s = Math.abs(H.get(n, n - 1)) + Math.abs(H.get(n - 1, n - 2));\r\n        x = y = 0.75 * s;\r\n        w = -0.4375 * s * s;\r\n      }\r\n\r\n      if (iter === 30) {\r\n        s = (y - x) / 2;\r\n        s = s * s + w;\r\n        if (s > 0) {\r\n          s = Math.sqrt(s);\r\n          if (y < x) {\r\n            s = -s;\r\n          }\r\n          s = x - w / ((y - x) / 2 + s);\r\n          for (i = low; i <= n; i++) {\r\n            H.set(i, i, H.get(i, i) - s);\r\n          }\r\n          exshift += s;\r\n          x = y = w = 0.964;\r\n        }\r\n      }\r\n\r\n      iter = iter + 1;\r\n\r\n      m = n - 2;\r\n      while (m >= l) {\r\n        z = H.get(m, m);\r\n        r = x - z;\r\n        s = y - z;\r\n        p = (r * s - w) / H.get(m + 1, m) + H.get(m, m + 1);\r\n        q = H.get(m + 1, m + 1) - z - r - s;\r\n        r = H.get(m + 2, m + 1);\r\n        s = Math.abs(p) + Math.abs(q) + Math.abs(r);\r\n        p = p / s;\r\n        q = q / s;\r\n        r = r / s;\r\n        if (m === l) {\r\n          break;\r\n        }\r\n        if (\r\n          Math.abs(H.get(m, m - 1)) * (Math.abs(q) + Math.abs(r)) <\r\n          eps *\r\n            (Math.abs(p) *\r\n              (Math.abs(H.get(m - 1, m - 1)) +\r\n                Math.abs(z) +\r\n                Math.abs(H.get(m + 1, m + 1))))\r\n        ) {\r\n          break;\r\n        }\r\n        m--;\r\n      }\r\n\r\n      for (i = m + 2; i <= n; i++) {\r\n        H.set(i, i - 2, 0);\r\n        if (i > m + 2) {\r\n          H.set(i, i - 3, 0);\r\n        }\r\n      }\r\n\r\n      for (k = m; k <= n - 1; k++) {\r\n        notlast = k !== n - 1;\r\n        if (k !== m) {\r\n          p = H.get(k, k - 1);\r\n          q = H.get(k + 1, k - 1);\r\n          r = notlast ? H.get(k + 2, k - 1) : 0;\r\n          x = Math.abs(p) + Math.abs(q) + Math.abs(r);\r\n          if (x !== 0) {\r\n            p = p / x;\r\n            q = q / x;\r\n            r = r / x;\r\n          }\r\n        }\r\n\r\n        if (x === 0) {\r\n          break;\r\n        }\r\n\r\n        s = Math.sqrt(p * p + q * q + r * r);\r\n        if (p < 0) {\r\n          s = -s;\r\n        }\r\n\r\n        if (s !== 0) {\r\n          if (k !== m) {\r\n            H.set(k, k - 1, -s * x);\r\n          } else if (l !== m) {\r\n            H.set(k, k - 1, -H.get(k, k - 1));\r\n          }\r\n\r\n          p = p + s;\r\n          x = p / s;\r\n          y = q / s;\r\n          z = r / s;\r\n          q = q / p;\r\n          r = r / p;\r\n\r\n          for (j = k; j < nn; j++) {\r\n            p = H.get(k, j) + q * H.get(k + 1, j);\r\n            if (notlast) {\r\n              p = p + r * H.get(k + 2, j);\r\n              H.set(k + 2, j, H.get(k + 2, j) - p * z);\r\n            }\r\n\r\n            H.set(k, j, H.get(k, j) - p * x);\r\n            H.set(k + 1, j, H.get(k + 1, j) - p * y);\r\n          }\r\n\r\n          for (i = 0; i <= Math.min(n, k + 3); i++) {\r\n            p = x * H.get(i, k) + y * H.get(i, k + 1);\r\n            if (notlast) {\r\n              p = p + z * H.get(i, k + 2);\r\n              H.set(i, k + 2, H.get(i, k + 2) - p * r);\r\n            }\r\n\r\n            H.set(i, k, H.get(i, k) - p);\r\n            H.set(i, k + 1, H.get(i, k + 1) - p * q);\r\n          }\r\n\r\n          for (i = low; i <= high; i++) {\r\n            p = x * V.get(i, k) + y * V.get(i, k + 1);\r\n            if (notlast) {\r\n              p = p + z * V.get(i, k + 2);\r\n              V.set(i, k + 2, V.get(i, k + 2) - p * r);\r\n            }\r\n\r\n            V.set(i, k, V.get(i, k) - p);\r\n            V.set(i, k + 1, V.get(i, k + 1) - p * q);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  if (norm === 0) {\r\n    return;\r\n  }\r\n\r\n  for (n = nn - 1; n >= 0; n--) {\r\n    p = d[n];\r\n    q = e[n];\r\n\r\n    if (q === 0) {\r\n      l = n;\r\n      H.set(n, n, 1);\r\n      for (i = n - 1; i >= 0; i--) {\r\n        w = H.get(i, i) - p;\r\n        r = 0;\r\n        for (j = l; j <= n; j++) {\r\n          r = r + H.get(i, j) * H.get(j, n);\r\n        }\r\n\r\n        if (e[i] < 0) {\r\n          z = w;\r\n          s = r;\r\n        } else {\r\n          l = i;\r\n          if (e[i] === 0) {\r\n            H.set(i, n, w !== 0 ? -r / w : -r / (eps * norm));\r\n          } else {\r\n            x = H.get(i, i + 1);\r\n            y = H.get(i + 1, i);\r\n            q = (d[i] - p) * (d[i] - p) + e[i] * e[i];\r\n            t = (x * s - z * r) / q;\r\n            H.set(i, n, t);\r\n            H.set(\r\n              i + 1,\r\n              n,\r\n              Math.abs(x) > Math.abs(z) ? (-r - w * t) / x : (-s - y * t) / z,\r\n            );\r\n          }\r\n\r\n          t = Math.abs(H.get(i, n));\r\n          if (eps * t * t > 1) {\r\n            for (j = i; j <= n; j++) {\r\n              H.set(j, n, H.get(j, n) / t);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    } else if (q < 0) {\r\n      l = n - 1;\r\n\r\n      if (Math.abs(H.get(n, n - 1)) > Math.abs(H.get(n - 1, n))) {\r\n        H.set(n - 1, n - 1, q / H.get(n, n - 1));\r\n        H.set(n - 1, n, -(H.get(n, n) - p) / H.get(n, n - 1));\r\n      } else {\r\n        cdivres = cdiv(0, -H.get(n - 1, n), H.get(n - 1, n - 1) - p, q);\r\n        H.set(n - 1, n - 1, cdivres[0]);\r\n        H.set(n - 1, n, cdivres[1]);\r\n      }\r\n\r\n      H.set(n, n - 1, 0);\r\n      H.set(n, n, 1);\r\n      for (i = n - 2; i >= 0; i--) {\r\n        ra = 0;\r\n        sa = 0;\r\n        for (j = l; j <= n; j++) {\r\n          ra = ra + H.get(i, j) * H.get(j, n - 1);\r\n          sa = sa + H.get(i, j) * H.get(j, n);\r\n        }\r\n\r\n        w = H.get(i, i) - p;\r\n\r\n        if (e[i] < 0) {\r\n          z = w;\r\n          r = ra;\r\n          s = sa;\r\n        } else {\r\n          l = i;\r\n          if (e[i] === 0) {\r\n            cdivres = cdiv(-ra, -sa, w, q);\r\n            H.set(i, n - 1, cdivres[0]);\r\n            H.set(i, n, cdivres[1]);\r\n          } else {\r\n            x = H.get(i, i + 1);\r\n            y = H.get(i + 1, i);\r\n            vr = (d[i] - p) * (d[i] - p) + e[i] * e[i] - q * q;\r\n            vi = (d[i] - p) * 2 * q;\r\n            if (vr === 0 && vi === 0) {\r\n              vr =\r\n                eps *\r\n                norm *\r\n                (Math.abs(w) +\r\n                  Math.abs(q) +\r\n                  Math.abs(x) +\r\n                  Math.abs(y) +\r\n                  Math.abs(z));\r\n            }\r\n            cdivres = cdiv(\r\n              x * r - z * ra + q * sa,\r\n              x * s - z * sa - q * ra,\r\n              vr,\r\n              vi,\r\n            );\r\n            H.set(i, n - 1, cdivres[0]);\r\n            H.set(i, n, cdivres[1]);\r\n            if (Math.abs(x) > Math.abs(z) + Math.abs(q)) {\r\n              H.set(\r\n                i + 1,\r\n                n - 1,\r\n                (-ra - w * H.get(i, n - 1) + q * H.get(i, n)) / x,\r\n              );\r\n              H.set(\r\n                i + 1,\r\n                n,\r\n                (-sa - w * H.get(i, n) - q * H.get(i, n - 1)) / x,\r\n              );\r\n            } else {\r\n              cdivres = cdiv(\r\n                -r - y * H.get(i, n - 1),\r\n                -s - y * H.get(i, n),\r\n                z,\r\n                q,\r\n              );\r\n              H.set(i + 1, n - 1, cdivres[0]);\r\n              H.set(i + 1, n, cdivres[1]);\r\n            }\r\n          }\r\n\r\n          t = Math.max(Math.abs(H.get(i, n - 1)), Math.abs(H.get(i, n)));\r\n          if (eps * t * t > 1) {\r\n            for (j = i; j <= n; j++) {\r\n              H.set(j, n - 1, H.get(j, n - 1) / t);\r\n              H.set(j, n, H.get(j, n) / t);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  for (i = 0; i < nn; i++) {\r\n    if (i < low || i > high) {\r\n      for (j = i; j < nn; j++) {\r\n        V.set(i, j, H.get(i, j));\r\n      }\r\n    }\r\n  }\r\n\r\n  for (j = nn - 1; j >= low; j--) {\r\n    for (i = low; i <= high; i++) {\r\n      z = 0;\r\n      for (k = low; k <= Math.min(j, high); k++) {\r\n        z = z + V.get(i, k) * H.get(k, j);\r\n      }\r\n      V.set(i, j, z);\r\n    }\r\n  }\r\n}\r\n\r\nfunction cdiv(xr, xi, yr, yi) {\r\n  let r, d;\r\n  if (Math.abs(yr) > Math.abs(yi)) {\r\n    r = yi / yr;\r\n    d = yr + r * yi;\r\n    return [(xr + r * xi) / d, (xi - r * xr) / d];\r\n  } else {\r\n    r = yr / yi;\r\n    d = yi + r * yr;\r\n    return [(r * xr + xi) / d, (r * xi - xr) / d];\r\n  }\r\n}\r\n","import Matrix from '../matrix';\r\nimport WrapperMatrix2D from '../wrap/WrapperMatrix2D';\r\n\r\nexport default class CholeskyDecomposition {\r\n  constructor(value) {\r\n    value = WrapperMatrix2D.checkMatrix(value);\r\n    if (!value.isSymmetric()) {\r\n      throw new Error('Matrix is not symmetric');\r\n    }\r\n\r\n    let a = value;\r\n    let dimension = a.rows;\r\n    let l = new Matrix(dimension, dimension);\r\n    let positiveDefinite = true;\r\n    let i, j, k;\r\n\r\n    for (j = 0; j < dimension; j++) {\r\n      let d = 0;\r\n      for (k = 0; k < j; k++) {\r\n        let s = 0;\r\n        for (i = 0; i < k; i++) {\r\n          s += l.get(k, i) * l.get(j, i);\r\n        }\r\n        s = (a.get(j, k) - s) / l.get(k, k);\r\n        l.set(j, k, s);\r\n        d = d + s * s;\r\n      }\r\n\r\n      d = a.get(j, j) - d;\r\n\r\n      positiveDefinite &= d > 0;\r\n      l.set(j, j, Math.sqrt(Math.max(d, 0)));\r\n      for (k = j + 1; k < dimension; k++) {\r\n        l.set(j, k, 0);\r\n      }\r\n    }\r\n\r\n    this.L = l;\r\n    this.positiveDefinite = Boolean(positiveDefinite);\r\n  }\r\n\r\n  isPositiveDefinite() {\r\n    return this.positiveDefinite;\r\n  }\r\n\r\n  solve(value) {\r\n    value = WrapperMatrix2D.checkMatrix(value);\r\n\r\n    let l = this.L;\r\n    let dimension = l.rows;\r\n\r\n    if (value.rows !== dimension) {\r\n      throw new Error('Matrix dimensions do not match');\r\n    }\r\n    if (this.isPositiveDefinite() === false) {\r\n      throw new Error('Matrix is not positive definite');\r\n    }\r\n\r\n    let count = value.columns;\r\n    let B = value.clone();\r\n    let i, j, k;\r\n\r\n    for (k = 0; k < dimension; k++) {\r\n      for (j = 0; j < count; j++) {\r\n        for (i = 0; i < k; i++) {\r\n          B.set(k, j, B.get(k, j) - B.get(i, j) * l.get(k, i));\r\n        }\r\n        B.set(k, j, B.get(k, j) / l.get(k, k));\r\n      }\r\n    }\r\n\r\n    for (k = dimension - 1; k >= 0; k--) {\r\n      for (j = 0; j < count; j++) {\r\n        for (i = k + 1; i < dimension; i++) {\r\n          B.set(k, j, B.get(k, j) - B.get(i, j) * l.get(i, k));\r\n        }\r\n        B.set(k, j, B.get(k, j) / l.get(k, k));\r\n      }\r\n    }\r\n\r\n    return B;\r\n  }\r\n\r\n  get lowerTriangularMatrix() {\r\n    return this.L;\r\n  }\r\n}\r\n","import Matrix from '../matrix';\r\nimport WrapperMatrix2D from '../wrap/WrapperMatrix2D';\r\n\r\nexport default class nipals {\r\n  constructor(X, options = {}) {\r\n    X = WrapperMatrix2D.checkMatrix(X);\r\n    let { Y } = options;\r\n    const {\r\n      scaleScores = false,\r\n      maxIterations = 1000,\r\n      terminationCriteria = 1e-10,\r\n    } = options;\r\n\r\n    let u;\r\n    if (Y) {\r\n      if (Array.isArray(Y) && typeof Y[0] === 'number') {\r\n        Y = Matrix.columnVector(Y);\r\n      } else {\r\n        Y = WrapperMatrix2D.checkMatrix(Y);\r\n      }\r\n      if (!Y.isColumnVector() || Y.rows !== X.rows) {\r\n        throw new Error('Y must be a column vector of length X.rows');\r\n      }\r\n      u = Y;\r\n    } else {\r\n      u = X.getColumnVector(0);\r\n    }\r\n\r\n    let diff = 1;\r\n    let t, q, w, tOld;\r\n\r\n    for (\r\n      let counter = 0;\r\n      counter < maxIterations && diff > terminationCriteria;\r\n      counter++\r\n    ) {\r\n      w = X.transpose().mmul(u).div(u.transpose().mmul(u).get(0, 0));\r\n      w = w.div(w.norm());\r\n\r\n      t = X.mmul(w).div(w.transpose().mmul(w).get(0, 0));\r\n\r\n      if (counter > 0) {\r\n        diff = t.clone().sub(tOld).pow(2).sum();\r\n      }\r\n      tOld = t.clone();\r\n\r\n      if (Y) {\r\n        q = Y.transpose().mmul(t).div(t.transpose().mmul(t).get(0, 0));\r\n        q = q.div(q.norm());\r\n\r\n        u = Y.mmul(q).div(q.transpose().mmul(q).get(0, 0));\r\n      } else {\r\n        u = t;\r\n      }\r\n    }\r\n\r\n    if (Y) {\r\n      let p = X.transpose().mmul(t).div(t.transpose().mmul(t).get(0, 0));\r\n      p = p.div(p.norm());\r\n      let xResidual = X.clone().sub(t.clone().mmul(p.transpose()));\r\n      let residual = u.transpose().mmul(t).div(t.transpose().mmul(t).get(0, 0));\r\n      let yResidual = Y.clone().sub(\r\n        t.clone().mulS(residual.get(0, 0)).mmul(q.transpose()),\r\n      );\r\n\r\n      this.t = t;\r\n      this.p = p.transpose();\r\n      this.w = w.transpose();\r\n      this.q = q;\r\n      this.u = u;\r\n      this.s = t.transpose().mmul(t);\r\n      this.xResidual = xResidual;\r\n      this.yResidual = yResidual;\r\n      this.betas = residual;\r\n    } else {\r\n      this.w = w.transpose();\r\n      this.s = t.transpose().mmul(t).sqrt();\r\n      if (scaleScores) {\r\n        this.t = t.clone().div(this.s.get(0, 0));\r\n      } else {\r\n        this.t = t;\r\n      }\r\n      this.xResidual = X.sub(t.mmul(w.transpose()));\r\n    }\r\n  }\r\n}\r\n","const toString = Object.prototype.toString;\n\nexport default function isAnyArray(object) {\n  return toString.call(object).endsWith('Array]');\n}\n","import isArray from 'is-any-array';\n\nfunction sum(input) {\n  if (!isArray(input)) {\n    throw new TypeError('input must be an array');\n  }\n\n  if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  var sumValue = 0;\n\n  for (var i = 0; i < input.length; i++) {\n    sumValue += input[i];\n  }\n\n  return sumValue;\n}\n\nexport default sum;\n","import sum from 'ml-array-sum';\n\nfunction mean(input) {\n  return sum(input) / input.length;\n}\n\nexport default mean;\n","import Matrix from 'ml-matrix';\nimport meanArray from 'ml-array-mean';\n\n/**\n * @private\n * return an array of probabilities of each class\n * @param {Array} array - contains the classes\n * @param {number} numberOfClasses\n * @return {Matrix} - rowVector of probabilities.\n */\nexport function toDiscreteDistribution(array, numberOfClasses) {\n  let counts = new Array(numberOfClasses).fill(0);\n  for (let i = 0; i < array.length; ++i) {\n    counts[array[i]] += 1 / array.length;\n  }\n\n  return Matrix.rowVector(counts);\n}\n\n/**\n * @private\n * Retrieves the impurity of array of predictions\n * @param {Array} array - predictions.\n * @return {number} Gini impurity\n */\nexport function giniImpurity(array) {\n  if (array.length === 0) {\n    return 0;\n  }\n\n  let probabilities = toDiscreteDistribution(\n    array,\n    getNumberOfClasses(array),\n  ).getRow(0);\n\n  let sum = 0.0;\n  for (let i = 0; i < probabilities.length; ++i) {\n    sum += probabilities[i] * probabilities[i];\n  }\n\n  return 1 - sum;\n}\n\n/**\n * @private\n * Return the number of classes given the array of predictions.\n * @param {Array} array - predictions.\n * @return {number} Number of classes.\n */\nexport function getNumberOfClasses(array) {\n  return array\n    .filter(function(val, i, arr) {\n      return arr.indexOf(val) === i;\n    })\n    .map((val) => val + 1)\n    .reduce((a, b) => Math.max(a, b));\n}\n\n/**\n * @private\n * Calculates the Gini Gain of an array of predictions and those predictions splitted by a feature.\n * @param {Array} array - Predictions\n * @param {object} splitted - Object with elements \"greater\" and \"lesser\" that contains an array of predictions splitted.\n * @return {number} - Gini Gain.\n */\n\nexport function giniGain(array, splitted) {\n  let splitsImpurity = 0.0;\n  let splits = ['greater', 'lesser'];\n\n  for (let i = 0; i < splits.length; ++i) {\n    let currentSplit = splitted[splits[i]];\n    splitsImpurity +=\n      (giniImpurity(currentSplit) * currentSplit.length) / array.length;\n  }\n\n  return giniImpurity(array) - splitsImpurity;\n}\n\n/**\n * @private\n * Calculates the squared error of a predictions values.\n * @param {Array} array - predictions values\n * @return {number} squared error.\n */\nexport function squaredError(array) {\n  let l = array.length;\n\n  let m = meanArray(array);\n  let error = 0.0;\n\n  for (let i = 0; i < l; ++i) {\n    let currentElement = array[i];\n    error += (currentElement - m) * (currentElement - m);\n  }\n\n  return error;\n}\n\n/**\n * @private\n * Calculates the sum of squared error of the two arrays that contains the splitted values.\n * @param {Array} array - this argument is no necessary but is used to fit with the main interface.\n * @param {object} splitted - Object with elements \"greater\" and \"lesser\" that contains an array of predictions splitted.\n * @return {number} - sum of squared errors.\n */\nexport function regressionError(array, splitted) {\n  let error = 0.0;\n  let splits = ['greater', 'lesser'];\n\n  for (let i = 0; i < splits.length; ++i) {\n    let currentSplit = splitted[splits[i]];\n    error += squaredError(currentSplit);\n  }\n  return error;\n}\n\n/**\n * @private\n * Split the training set and values from a given column of the training set if is less than a value\n * @param {Matrix} X - Training set.\n * @param {Array} y - Training values.\n * @param {number} column - Column to split.\n * @param {number} value - value to split the Training set and values.\n * @return {object} - Object that contains the splitted values.\n */\nexport function matrixSplitter(X, y, column, value) {\n  let lesserX = [];\n  let greaterX = [];\n  let lesserY = [];\n  let greaterY = [];\n\n  for (let i = 0; i < X.rows; ++i) {\n    if (X.get(i, column) < value) {\n      lesserX.push(X.getRow(i));\n      lesserY.push(y[i]);\n    } else {\n      greaterX.push(X.getRow(i));\n      greaterY.push(y[i]);\n    }\n  }\n\n  return {\n    greaterX: greaterX,\n    greaterY: greaterY,\n    lesserX: lesserX,\n    lesserY: lesserY,\n  };\n}\n\n/**\n * @private\n * Calculates the mean between two values\n * @param {number} a\n * @param {number} b\n * @return {number}\n */\nexport function mean(a, b) {\n  return (a + b) / 2;\n}\n\n/**\n * @private\n * Returns a list of tuples that contains the i-th element of each array.\n * @param {Array} a\n * @param {Array} b\n * @return {Array} list of tuples.\n */\nexport function zip(a, b) {\n  if (a.length !== b.length) {\n    throw new TypeError(\n      `Error on zip: the size of a: ${a.length} is different from b: ${b.length}`,\n    );\n  }\n\n  let ret = new Array(a.length);\n  for (let i = 0; i < a.length; ++i) {\n    ret[i] = [a[i], b[i]];\n  }\n\n  return ret;\n}\n","import Matrix from 'ml-matrix';\nimport mean from 'ml-array-mean';\n\nimport * as Utils from './utils';\n\nconst gainFunctions = {\n  gini: Utils.giniGain,\n  regression: Utils.regressionError,\n};\n\nconst splitFunctions = {\n  mean: Utils.mean,\n};\n\nexport default class TreeNode {\n  /**\n   * @private\n   * Constructor for a tree node given the options received on the main classes (DecisionTreeClassifier, DecisionTreeRegression)\n   * @param {object|TreeNode} options for loading\n   * @constructor\n   */\n  constructor(options) {\n    // options parameters\n    this.kind = options.kind;\n    this.gainFunction = options.gainFunction;\n    this.splitFunction = options.splitFunction;\n    this.minNumSamples = options.minNumSamples;\n    this.maxDepth = options.maxDepth;\n  }\n\n  /**\n   * @private\n   * Function that retrieve the best feature to make the split.\n   * @param {Matrix} XTranspose - Training set transposed\n   * @param {Array} y - labels or values (depending of the decision tree)\n   * @return {object} - return tree values, the best gain, column and the split value.\n   */\n  bestSplit(XTranspose, y) {\n    // Depending in the node tree class, we set the variables to check information gain (to classify)\n    // or error (for regression)\n\n    let bestGain = this.kind === 'classifier' ? -Infinity : Infinity;\n    let check = this.kind === 'classifier' ? (a, b) => a > b : (a, b) => a < b;\n\n    let maxColumn;\n    let maxValue;\n\n    for (let i = 0; i < XTranspose.rows; ++i) {\n      let currentFeature = XTranspose.getRow(i);\n      let splitValues = this.featureSplit(currentFeature, y);\n      for (let j = 0; j < splitValues.length; ++j) {\n        let currentSplitVal = splitValues[j];\n        let splitted = this.split(currentFeature, y, currentSplitVal);\n\n        let gain = gainFunctions[this.gainFunction](y, splitted);\n        if (check(gain, bestGain)) {\n          maxColumn = i;\n          maxValue = currentSplitVal;\n          bestGain = gain;\n        }\n      }\n    }\n\n    return {\n      maxGain: bestGain,\n      maxColumn: maxColumn,\n      maxValue: maxValue,\n    };\n  }\n\n  /**\n   * @private\n   * Makes the split of the training labels or values from the training set feature given a split value.\n   * @param {Array} x - Training set feature\n   * @param {Array} y - Training set value or label\n   * @param {number} splitValue\n   * @return {object}\n   */\n  split(x, y, splitValue) {\n    let lesser = [];\n    let greater = [];\n\n    for (let i = 0; i < x.length; ++i) {\n      if (x[i] < splitValue) {\n        lesser.push(y[i]);\n      } else {\n        greater.push(y[i]);\n      }\n    }\n\n    return {\n      greater: greater,\n      lesser: lesser,\n    };\n  }\n\n  /**\n   * @private\n   * Calculates the possible points to split over the tree given a training set feature and corresponding labels or values.\n   * @param {Array} x - Training set feature\n   * @param {Array} y - Training set value or label\n   * @return {Array} possible split values.\n   */\n  featureSplit(x, y) {\n    let splitValues = [];\n    let arr = Utils.zip(x, y);\n    arr.sort(function(a, b) {\n      return a[0] - b[0];\n    });\n\n    for (let i = 1; i < arr.length; ++i) {\n      if (arr[i - 1][1] !== arr[i][1]) {\n        splitValues.push(\n          splitFunctions[this.splitFunction](arr[i - 1][0], arr[i][0]),\n        );\n      }\n    }\n\n    return splitValues;\n  }\n\n  /**\n   * @private\n   * Calculate the predictions of a leaf tree node given the training labels or values\n   * @param {Array} y\n   */\n  calculatePrediction(y) {\n    if (this.kind === 'classifier') {\n      this.distribution = Utils.toDiscreteDistribution(\n        y,\n        Utils.getNumberOfClasses(y),\n      );\n      if (this.distribution.columns === 0) {\n        throw new TypeError('Error on calculate the prediction');\n      }\n    } else {\n      this.distribution = mean(y);\n    }\n  }\n\n  /**\n   * @private\n   * Train a node given the training set and labels, because it trains recursively, it also receive\n   * the current depth of the node, parent gain to avoid infinite recursion and boolean value to check if\n   * the training set is transposed.\n   * @param {Matrix} X - Training set (could be transposed or not given transposed).\n   * @param {Array} y - Training labels or values.\n   * @param {number} currentDepth - Current depth of the node.\n   * @param {number} parentGain - parent node gain or error.\n   */\n  train(X, y, currentDepth, parentGain) {\n    if (X.rows <= this.minNumSamples) {\n      this.calculatePrediction(y);\n      return;\n    }\n    if (parentGain === undefined) parentGain = 0.0;\n\n    let XTranspose = X.transpose();\n    let split = this.bestSplit(XTranspose, y);\n\n    this.splitValue = split.maxValue;\n    this.splitColumn = split.maxColumn;\n    this.gain = split.maxGain;\n\n    let splittedMatrix = Utils.matrixSplitter(\n      X,\n      y,\n      this.splitColumn,\n      this.splitValue,\n    );\n\n    if (\n      currentDepth < this.maxDepth &&\n      (this.gain > 0.01 && this.gain !== parentGain) &&\n      (splittedMatrix.lesserX.length > 0 && splittedMatrix.greaterX.length > 0)\n    ) {\n      this.left = new TreeNode(this);\n      this.right = new TreeNode(this);\n\n      let lesserX = new Matrix(splittedMatrix.lesserX);\n      let greaterX = new Matrix(splittedMatrix.greaterX);\n\n      this.left.train(\n        lesserX,\n        splittedMatrix.lesserY,\n        currentDepth + 1,\n        this.gain,\n      );\n      this.right.train(\n        greaterX,\n        splittedMatrix.greaterY,\n        currentDepth + 1,\n        this.gain,\n      );\n    } else {\n      this.calculatePrediction(y);\n    }\n  }\n\n  /**\n   * @private\n   * Calculates the prediction of a given element.\n   * @param {Array} row\n   * @return {number|Array} prediction\n   *          * if a node is a classifier returns an array of probabilities of each class.\n   *          * if a node is for regression returns a number with the prediction.\n   */\n  classify(row) {\n    if (this.right && this.left) {\n      if (row[this.splitColumn] < this.splitValue) {\n        return this.left.classify(row);\n      } else {\n        return this.right.classify(row);\n      }\n    }\n\n    return this.distribution;\n  }\n\n  /**\n   * @private\n   * Set the parameter of the current node and their children.\n   * @param {object} node - parameters of the current node and the children.\n   */\n  setNodeParameters(node) {\n    if (node.distribution !== undefined) {\n      this.distribution =\n        node.distribution.constructor === Array\n          ? new Matrix(node.distribution)\n          : node.distribution;\n    } else {\n      this.distribution = undefined;\n      this.splitValue = node.splitValue;\n      this.splitColumn = node.splitColumn;\n      this.gain = node.gain;\n\n      this.left = new TreeNode(this);\n      this.right = new TreeNode(this);\n\n      if (node.left !== {}) {\n        this.left.setNodeParameters(node.left);\n      }\n      if (node.right !== {}) {\n        this.right.setNodeParameters(node.right);\n      }\n    }\n  }\n}\n","import Matrix from 'ml-matrix';\n\nimport Tree from './TreeNode';\n\nconst defaultOptions = {\n  gainFunction: 'gini',\n  splitFunction: 'mean',\n  minNumSamples: 3,\n  maxDepth: Infinity,\n};\n\nexport class DecisionTreeClassifier {\n  /**\n   * Create new Decision Tree Classifier with CART implementation with the given options\n   * @param {object} options\n   * @param {string} [options.gainFunction=\"gini\"] - gain function to get the best split, \"gini\" the only one supported.\n   * @param {string} [options.splitFunction=\"mean\"] - given two integers from a split feature, get the value to split, \"mean\" the only one supported.\n   * @param {number} [options.minNumSamples=3] - minimum number of samples to create a leaf node to decide a class.\n   * @param {number} [options.maxDepth=Infinity] - Max depth of the tree.\n   * @param {object} model - for load purposes.\n   * @constructor\n   */\n  constructor(options, model) {\n    if (options === true) {\n      this.options = model.options;\n      this.root = new Tree(model.options);\n      this.root.setNodeParameters(model.root);\n    } else {\n      this.options = Object.assign({}, defaultOptions, options);\n      this.options.kind = 'classifier';\n    }\n  }\n\n  /**\n   * Train the decision tree with the given training set and labels.\n   * @param {Matrix|MatrixTransposeView|Array} trainingSet\n   * @param {Array} trainingLabels\n   */\n  train(trainingSet, trainingLabels) {\n    this.root = new Tree(this.options);\n    trainingSet = Matrix.checkMatrix(trainingSet);\n    this.root.train(trainingSet, trainingLabels, 0, null);\n  }\n\n  /**\n   * Predicts the output given the matrix to predict.\n   * @param {Matrix|MatrixTransposeView|Array} toPredict\n   * @return {Array} predictions\n   */\n  predict(toPredict) {\n    toPredict = Matrix.checkMatrix(toPredict);\n    let predictions = new Array(toPredict.rows);\n\n    for (let i = 0; i < toPredict.rows; ++i) {\n      predictions[i] = this.root\n        .classify(toPredict.getRow(i))\n        .maxRowIndex(0)[1];\n    }\n\n    return predictions;\n  }\n\n  /**\n   * Export the current model to JSON.\n   * @return {object} - Current model.\n   */\n  toJSON() {\n    return {\n      options: this.options,\n      root: this.root,\n      name: 'DTClassifier',\n    };\n  }\n\n  /**\n   * Load a Decision tree classifier with the given model.\n   * @param {object} model\n   * @return {DecisionTreeClassifier}\n   */\n  static load(model) {\n    if (model.name !== 'DTClassifier') {\n      throw new RangeError(`Invalid model: ${model.name}`);\n    }\n\n    return new DecisionTreeClassifier(true, model);\n  }\n}\n","import Matrix from 'ml-matrix';\n\nimport Tree from './TreeNode';\n\nconst defaultOptions = {\n  gainFunction: 'regression',\n  splitFunction: 'mean',\n  minNumSamples: 3,\n  maxDepth: Infinity,\n};\n\nexport class DecisionTreeRegression {\n  /**\n   * Create new Decision Tree Regression with CART implementation with the given options.\n   * @param {object} options\n   * @param {string} [options.gainFunction=\"regression\"] - gain function to get the best split, \"regression\" the only one supported.\n   * @param {string} [options.splitFunction=\"mean\"] - given two integers from a split feature, get the value to split, \"mean\" the only one supported.\n   * @param {number} [options.minNumSamples=3] - minimum number of samples to create a leaf node to decide a class.\n   * @param {number} [options.maxDepth=Infinity] - Max depth of the tree.\n   * @param {object} model - for load purposes.\n   */\n  constructor(options, model) {\n    if (options === true) {\n      this.options = model.options;\n      this.root = new Tree(model.options);\n      this.root.setNodeParameters(model.root);\n    } else {\n      this.options = Object.assign({}, defaultOptions, options);\n      this.options.kind = 'regression';\n    }\n  }\n\n  /**\n   * Train the decision tree with the given training set and values.\n   * @param {Matrix|MatrixTransposeView|Array} trainingSet\n   * @param {Array} trainingValues\n   */\n  train(trainingSet, trainingValues) {\n    this.root = new Tree(this.options);\n\n    if (\n      typeof trainingSet[0] !== 'undefined' &&\n      trainingSet[0].length === undefined\n    ) {\n      trainingSet = Matrix.columnVector(trainingSet);\n    } else {\n      trainingSet = Matrix.checkMatrix(trainingSet);\n    }\n    this.root.train(trainingSet, trainingValues, 0);\n  }\n\n  /**\n   * Predicts the values given the matrix to predict.\n   * @param {Matrix|MatrixTransposeView|Array} toPredict\n   * @return {Array} predictions\n   */\n  predict(toPredict) {\n    if (\n      typeof toPredict[0] !== 'undefined' &&\n      toPredict[0].length === undefined\n    ) {\n      toPredict = Matrix.columnVector(toPredict);\n    }\n    toPredict = Matrix.checkMatrix(toPredict);\n\n    let predictions = new Array(toPredict.rows);\n    for (let i = 0; i < toPredict.rows; ++i) {\n      predictions[i] = this.root.classify(toPredict.getRow(i));\n    }\n\n    return predictions;\n  }\n\n  /**\n   * Export the current model to JSON.\n   * @return {object} - Current model.\n   */\n  toJSON() {\n    return {\n      options: this.options,\n      root: this.root,\n      name: 'DTRegression',\n    };\n  }\n\n  /**\n   * Load a Decision tree regression with the given model.\n   * @param {object} model\n   * @return {DecisionTreeRegression}\n   */\n  static load(model) {\n    if (model.name !== 'DTRegression') {\n      throw new RangeError(`Invalid model:${model.name}`);\n    }\n\n    return new DecisionTreeRegression(true, model);\n  }\n}\n","const SMALLEST_UNSAFE_INTEGER = 0x20000000000000;\r\nconst LARGEST_SAFE_INTEGER = SMALLEST_UNSAFE_INTEGER - 1;\r\nconst UINT32_MAX = -1 >>> 0;\r\nconst UINT32_SIZE = UINT32_MAX + 1;\r\nconst INT32_SIZE = UINT32_SIZE / 2;\r\nconst INT32_MAX = INT32_SIZE - 1;\r\nconst UINT21_SIZE = 1 << 21;\r\nconst UINT21_MAX = UINT21_SIZE - 1;\n\n/**\r\n * Returns a value within [-0x80000000, 0x7fffffff]\r\n */\r\nfunction int32(engine) {\r\n    return engine.next() | 0;\r\n}\n\nfunction add(distribution, addend) {\r\n    if (addend === 0) {\r\n        return distribution;\r\n    }\r\n    else {\r\n        return engine => distribution(engine) + addend;\r\n    }\r\n}\n\n/**\r\n * Returns a value within [-0x20000000000000, 0x1fffffffffffff]\r\n */\r\nfunction int53(engine) {\r\n    const high = engine.next() | 0;\r\n    const low = engine.next() >>> 0;\r\n    return ((high & UINT21_MAX) * UINT32_SIZE +\r\n        low +\r\n        (high & UINT21_SIZE ? -SMALLEST_UNSAFE_INTEGER : 0));\r\n}\n\n/**\r\n * Returns a value within [-0x20000000000000, 0x20000000000000]\r\n */\r\nfunction int53Full(engine) {\r\n    while (true) {\r\n        const high = engine.next() | 0;\r\n        if (high & 0x400000) {\r\n            if ((high & 0x7fffff) === 0x400000 && (engine.next() | 0) === 0) {\r\n                return SMALLEST_UNSAFE_INTEGER;\r\n            }\r\n        }\r\n        else {\r\n            const low = engine.next() >>> 0;\r\n            return ((high & UINT21_MAX) * UINT32_SIZE +\r\n                low +\r\n                (high & UINT21_SIZE ? -SMALLEST_UNSAFE_INTEGER : 0));\r\n        }\r\n    }\r\n}\n\n/**\r\n * Returns a value within [0, 0xffffffff]\r\n */\r\nfunction uint32(engine) {\r\n    return engine.next() >>> 0;\r\n}\n\n/**\r\n * Returns a value within [0, 0x1fffffffffffff]\r\n */\r\nfunction uint53(engine) {\r\n    const high = engine.next() & UINT21_MAX;\r\n    const low = engine.next() >>> 0;\r\n    return high * UINT32_SIZE + low;\r\n}\n\n/**\r\n * Returns a value within [0, 0x20000000000000]\r\n */\r\nfunction uint53Full(engine) {\r\n    while (true) {\r\n        const high = engine.next() | 0;\r\n        if (high & UINT21_SIZE) {\r\n            if ((high & UINT21_MAX) === 0 && (engine.next() | 0) === 0) {\r\n                return SMALLEST_UNSAFE_INTEGER;\r\n            }\r\n        }\r\n        else {\r\n            const low = engine.next() >>> 0;\r\n            return (high & UINT21_MAX) * UINT32_SIZE + low;\r\n        }\r\n    }\r\n}\n\nfunction isPowerOfTwoMinusOne(value) {\r\n    return ((value + 1) & value) === 0;\r\n}\r\nfunction bitmask(masking) {\r\n    return (engine) => engine.next() & masking;\r\n}\r\nfunction downscaleToLoopCheckedRange(range) {\r\n    const extendedRange = range + 1;\r\n    const maximum = extendedRange * Math.floor(UINT32_SIZE / extendedRange);\r\n    return engine => {\r\n        let value = 0;\r\n        do {\r\n            value = engine.next() >>> 0;\r\n        } while (value >= maximum);\r\n        return value % extendedRange;\r\n    };\r\n}\r\nfunction downscaleToRange(range) {\r\n    if (isPowerOfTwoMinusOne(range)) {\r\n        return bitmask(range);\r\n    }\r\n    else {\r\n        return downscaleToLoopCheckedRange(range);\r\n    }\r\n}\r\nfunction isEvenlyDivisibleByMaxInt32(value) {\r\n    return (value | 0) === 0;\r\n}\r\nfunction upscaleWithHighMasking(masking) {\r\n    return engine => {\r\n        const high = engine.next() & masking;\r\n        const low = engine.next() >>> 0;\r\n        return high * UINT32_SIZE + low;\r\n    };\r\n}\r\nfunction upscaleToLoopCheckedRange(extendedRange) {\r\n    const maximum = extendedRange * Math.floor(SMALLEST_UNSAFE_INTEGER / extendedRange);\r\n    return engine => {\r\n        let ret = 0;\r\n        do {\r\n            const high = engine.next() & UINT21_MAX;\r\n            const low = engine.next() >>> 0;\r\n            ret = high * UINT32_SIZE + low;\r\n        } while (ret >= maximum);\r\n        return ret % extendedRange;\r\n    };\r\n}\r\nfunction upscaleWithinU53(range) {\r\n    const extendedRange = range + 1;\r\n    if (isEvenlyDivisibleByMaxInt32(extendedRange)) {\r\n        const highRange = ((extendedRange / UINT32_SIZE) | 0) - 1;\r\n        if (isPowerOfTwoMinusOne(highRange)) {\r\n            return upscaleWithHighMasking(highRange);\r\n        }\r\n    }\r\n    return upscaleToLoopCheckedRange(extendedRange);\r\n}\r\nfunction upscaleWithinI53AndLoopCheck(min, max) {\r\n    return engine => {\r\n        let ret = 0;\r\n        do {\r\n            const high = engine.next() | 0;\r\n            const low = engine.next() >>> 0;\r\n            ret =\r\n                (high & UINT21_MAX) * UINT32_SIZE +\r\n                    low +\r\n                    (high & UINT21_SIZE ? -SMALLEST_UNSAFE_INTEGER : 0);\r\n        } while (ret < min || ret > max);\r\n        return ret;\r\n    };\r\n}\r\n/**\r\n * Returns a Distribution to return a value within [min, max]\r\n * @param min The minimum integer value, inclusive. No less than -0x20000000000000.\r\n * @param max The maximum integer value, inclusive. No greater than 0x20000000000000.\r\n */\r\nfunction integer(min, max) {\r\n    min = Math.floor(min);\r\n    max = Math.floor(max);\r\n    if (min < -SMALLEST_UNSAFE_INTEGER || !isFinite(min)) {\r\n        throw new RangeError(`Expected min to be at least ${-SMALLEST_UNSAFE_INTEGER}`);\r\n    }\r\n    else if (max > SMALLEST_UNSAFE_INTEGER || !isFinite(max)) {\r\n        throw new RangeError(`Expected max to be at most ${SMALLEST_UNSAFE_INTEGER}`);\r\n    }\r\n    const range = max - min;\r\n    if (range <= 0 || !isFinite(range)) {\r\n        return () => min;\r\n    }\r\n    else if (range === UINT32_MAX) {\r\n        if (min === 0) {\r\n            return uint32;\r\n        }\r\n        else {\r\n            return add(int32, min + INT32_SIZE);\r\n        }\r\n    }\r\n    else if (range < UINT32_MAX) {\r\n        return add(downscaleToRange(range), min);\r\n    }\r\n    else if (range === LARGEST_SAFE_INTEGER) {\r\n        return add(uint53, min);\r\n    }\r\n    else if (range < LARGEST_SAFE_INTEGER) {\r\n        return add(upscaleWithinU53(range), min);\r\n    }\r\n    else if (max - 1 - min === LARGEST_SAFE_INTEGER) {\r\n        return add(uint53Full, min);\r\n    }\r\n    else if (min === -SMALLEST_UNSAFE_INTEGER &&\r\n        max === SMALLEST_UNSAFE_INTEGER) {\r\n        return int53Full;\r\n    }\r\n    else if (min === -SMALLEST_UNSAFE_INTEGER && max === LARGEST_SAFE_INTEGER) {\r\n        return int53;\r\n    }\r\n    else if (min === -LARGEST_SAFE_INTEGER && max === SMALLEST_UNSAFE_INTEGER) {\r\n        return add(int53, 1);\r\n    }\r\n    else if (max === SMALLEST_UNSAFE_INTEGER) {\r\n        return add(upscaleWithinI53AndLoopCheck(min - 1, max - 1), 1);\r\n    }\r\n    else {\r\n        return upscaleWithinI53AndLoopCheck(min, max);\r\n    }\r\n}\n\nfunction isLeastBitTrue(engine) {\r\n    return (engine.next() & 1) === 1;\r\n}\r\nfunction lessThan(distribution, value) {\r\n    return engine => distribution(engine) < value;\r\n}\r\nfunction probability(percentage) {\r\n    if (percentage <= 0) {\r\n        return () => false;\r\n    }\r\n    else if (percentage >= 1) {\r\n        return () => true;\r\n    }\r\n    else {\r\n        const scaled = percentage * UINT32_SIZE;\r\n        if (scaled % 1 === 0) {\r\n            return lessThan(int32, (scaled - INT32_SIZE) | 0);\r\n        }\r\n        else {\r\n            return lessThan(uint53, Math.round(percentage * SMALLEST_UNSAFE_INTEGER));\r\n        }\r\n    }\r\n}\r\nfunction bool(numerator, denominator) {\r\n    if (denominator == null) {\r\n        if (numerator == null) {\r\n            return isLeastBitTrue;\r\n        }\r\n        return probability(numerator);\r\n    }\r\n    else {\r\n        if (numerator <= 0) {\r\n            return () => false;\r\n        }\r\n        else if (numerator >= denominator) {\r\n            return () => true;\r\n        }\r\n        return lessThan(integer(0, denominator - 1), numerator);\r\n    }\r\n}\n\n/**\r\n * Returns a Distribution that returns a random `Date` within the inclusive\r\n * range of [`start`, `end`].\r\n * @param start The minimum `Date`\r\n * @param end The maximum `Date`\r\n */\r\nfunction date(start, end) {\r\n    const distribution = integer(+start, +end);\r\n    return engine => new Date(distribution(engine));\r\n}\n\n/**\r\n * Returns a Distribution to return a value within [1, sideCount]\r\n * @param sideCount The number of sides of the die\r\n */\r\nfunction die(sideCount) {\r\n    return integer(1, sideCount);\r\n}\n\n/**\r\n * Returns a distribution that returns an array of length `dieCount` of values\r\n * within [1, `sideCount`]\r\n * @param sideCount The number of sides of each die\r\n * @param dieCount The number of dice\r\n */\r\nfunction dice(sideCount, dieCount) {\r\n    const distribution = die(sideCount);\r\n    return engine => {\r\n        const result = [];\r\n        for (let i = 0; i < dieCount; ++i) {\r\n            result.push(distribution(engine));\r\n        }\r\n        return result;\r\n    };\r\n}\n\n// tslint:disable:unified-signatures\r\n// has 2**x chars, for faster uniform distribution\r\nconst DEFAULT_STRING_POOL = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_-\";\r\nfunction string(pool = DEFAULT_STRING_POOL) {\r\n    const poolLength = pool.length;\r\n    if (!poolLength) {\r\n        throw new Error(\"Expected pool not to be an empty string\");\r\n    }\r\n    const distribution = integer(0, poolLength - 1);\r\n    return (engine, length) => {\r\n        let result = \"\";\r\n        for (let i = 0; i < length; ++i) {\r\n            const j = distribution(engine);\r\n            result += pool.charAt(j);\r\n        }\r\n        return result;\r\n    };\r\n}\n\nconst LOWER_HEX_POOL = \"0123456789abcdef\";\r\nconst lowerHex = string(LOWER_HEX_POOL);\r\nconst upperHex = string(LOWER_HEX_POOL.toUpperCase());\r\n/**\r\n * Returns a Distribution that returns a random string comprised of numbers\r\n * or the characters `abcdef` (or `ABCDEF`) of length `length`.\r\n * @param length Length of the result string\r\n * @param uppercase Whether the string should use `ABCDEF` instead of `abcdef`\r\n */\r\nfunction hex(uppercase) {\r\n    if (uppercase) {\r\n        return upperHex;\r\n    }\r\n    else {\r\n        return lowerHex;\r\n    }\r\n}\n\nfunction convertSliceArgument(value, length) {\r\n    if (value < 0) {\r\n        return Math.max(value + length, 0);\r\n    }\r\n    else {\r\n        return Math.min(value, length);\r\n    }\r\n}\n\nfunction toInteger(value) {\r\n    const num = +value;\r\n    if (num < 0) {\r\n        return Math.ceil(num);\r\n    }\r\n    else {\r\n        return Math.floor(num);\r\n    }\r\n}\n\n/**\r\n * Returns a random value within the provided `source` within the sliced\r\n * bounds of `begin` and `end`.\r\n * @param source an array of items to pick from\r\n * @param begin the beginning slice index (defaults to `0`)\r\n * @param end the ending slice index (defaults to `source.length`)\r\n */\r\nfunction pick(engine, source, begin, end) {\r\n    const length = source.length;\r\n    if (length === 0) {\r\n        throw new RangeError(\"Cannot pick from an empty array\");\r\n    }\r\n    const start = begin == null ? 0 : convertSliceArgument(toInteger(begin), length);\r\n    const finish = end === void 0 ? length : convertSliceArgument(toInteger(end), length);\r\n    if (start >= finish) {\r\n        throw new RangeError(`Cannot pick between bounds ${start} and ${finish}`);\r\n    }\r\n    const distribution = integer(start, finish - 1);\r\n    return source[distribution(engine)];\r\n}\n\nfunction multiply(distribution, multiplier) {\r\n    if (multiplier === 1) {\r\n        return distribution;\r\n    }\r\n    else if (multiplier === 0) {\r\n        return () => 0;\r\n    }\r\n    else {\r\n        return engine => distribution(engine) * multiplier;\r\n    }\r\n}\n\n/**\r\n * Returns a floating-point value within [0.0, 1.0)\r\n */\r\nfunction realZeroToOneExclusive(engine) {\r\n    return uint53(engine) / SMALLEST_UNSAFE_INTEGER;\r\n}\n\n/**\r\n * Returns a floating-point value within [0.0, 1.0]\r\n */\r\nfunction realZeroToOneInclusive(engine) {\r\n    return uint53Full(engine) / SMALLEST_UNSAFE_INTEGER;\r\n}\n\n/**\r\n * Returns a floating-point value within [min, max) or [min, max]\r\n * @param min The minimum floating-point value, inclusive.\r\n * @param max The maximum floating-point value.\r\n * @param inclusive If true, `max` will be inclusive.\r\n */\r\nfunction real(min, max, inclusive = false) {\r\n    if (!isFinite(min)) {\r\n        throw new RangeError(\"Expected min to be a finite number\");\r\n    }\r\n    else if (!isFinite(max)) {\r\n        throw new RangeError(\"Expected max to be a finite number\");\r\n    }\r\n    return add(multiply(inclusive ? realZeroToOneInclusive : realZeroToOneExclusive, max - min), min);\r\n}\n\nconst sliceArray = Array.prototype.slice;\n\n/**\r\n * Shuffles an array in-place\r\n * @param engine The Engine to use when choosing random values\r\n * @param array The array to shuffle\r\n * @param downTo minimum index to shuffle. Only used internally.\r\n */\r\nfunction shuffle(engine, array, downTo = 0) {\r\n    const length = array.length;\r\n    if (length) {\r\n        for (let i = (length - 1) >>> 0; i > downTo; --i) {\r\n            const distribution = integer(0, i);\r\n            const j = distribution(engine);\r\n            if (i !== j) {\r\n                const tmp = array[i];\r\n                array[i] = array[j];\r\n                array[j] = tmp;\r\n            }\r\n        }\r\n    }\r\n    return array;\r\n}\n\n/**\r\n * From the population array, produce an array with sampleSize elements that\r\n * are randomly chosen without repeats.\r\n * @param engine The Engine to use when choosing random values\r\n * @param population An array that has items to choose a sample from\r\n * @param sampleSize The size of the result array\r\n */\r\nfunction sample(engine, population, sampleSize) {\r\n    if (sampleSize < 0 ||\r\n        sampleSize > population.length ||\r\n        !isFinite(sampleSize)) {\r\n        throw new RangeError(\"Expected sampleSize to be within 0 and the length of the population\");\r\n    }\r\n    if (sampleSize === 0) {\r\n        return [];\r\n    }\r\n    const clone = sliceArray.call(population);\r\n    const length = clone.length;\r\n    if (length === sampleSize) {\r\n        return shuffle(engine, clone, 0);\r\n    }\r\n    const tailLength = length - sampleSize;\r\n    return shuffle(engine, clone, tailLength - 1).slice(tailLength);\r\n}\n\nconst stringRepeat = (() => {\r\n    try {\r\n        if (\"x\".repeat(3) === \"xxx\") {\r\n            return (pattern, count) => pattern.repeat(count);\r\n        }\r\n    }\r\n    catch (_) {\r\n        // nothing to do here\r\n    }\r\n    return (pattern, count) => {\r\n        let result = \"\";\r\n        while (count > 0) {\r\n            if (count & 1) {\r\n                result += pattern;\r\n            }\r\n            count >>= 1;\r\n            pattern += pattern;\r\n        }\r\n        return result;\r\n    };\r\n})();\n\nfunction zeroPad(text, zeroCount) {\r\n    return stringRepeat(\"0\", zeroCount - text.length) + text;\r\n}\r\n/**\r\n * Returns a Universally Unique Identifier Version 4.\r\n *\r\n * See http://en.wikipedia.org/wiki/Universally_unique_identifier\r\n */\r\nfunction uuid4(engine) {\r\n    const a = engine.next() >>> 0;\r\n    const b = engine.next() | 0;\r\n    const c = engine.next() | 0;\r\n    const d = engine.next() >>> 0;\r\n    return (zeroPad(a.toString(16), 8) +\r\n        \"-\" +\r\n        zeroPad((b & 0xffff).toString(16), 4) +\r\n        \"-\" +\r\n        zeroPad((((b >> 4) & 0x0fff) | 0x4000).toString(16), 4) +\r\n        \"-\" +\r\n        zeroPad(((c & 0x3fff) | 0x8000).toString(16), 4) +\r\n        \"-\" +\r\n        zeroPad(((c >> 4) & 0xffff).toString(16), 4) +\r\n        zeroPad(d.toString(16), 8));\r\n}\n\n/**\r\n * An int32-producing Engine that uses `Math.random()`\r\n */\r\nconst nativeMath = {\r\n    next() {\r\n        return (Math.random() * UINT32_SIZE) | 0;\r\n    }\r\n};\n\n// tslint:disable:unified-signatures\r\n/**\r\n * A wrapper around an Engine that provides easy-to-use methods for\r\n * producing values based on known distributions\r\n */\r\nclass Random {\r\n    /**\r\n     * Creates a new Random wrapper\r\n     * @param engine The engine to use (defaults to a `Math.random`-based implementation)\r\n     */\r\n    constructor(engine = nativeMath) {\r\n        this.engine = engine;\r\n    }\r\n    /**\r\n     * Returns a value within [-0x80000000, 0x7fffffff]\r\n     */\r\n    int32() {\r\n        return int32(this.engine);\r\n    }\r\n    /**\r\n     * Returns a value within [0, 0xffffffff]\r\n     */\r\n    uint32() {\r\n        return uint32(this.engine);\r\n    }\r\n    /**\r\n     * Returns a value within [0, 0x1fffffffffffff]\r\n     */\r\n    uint53() {\r\n        return uint53(this.engine);\r\n    }\r\n    /**\r\n     * Returns a value within [0, 0x20000000000000]\r\n     */\r\n    uint53Full() {\r\n        return uint53Full(this.engine);\r\n    }\r\n    /**\r\n     * Returns a value within [-0x20000000000000, 0x1fffffffffffff]\r\n     */\r\n    int53() {\r\n        return int53(this.engine);\r\n    }\r\n    /**\r\n     * Returns a value within [-0x20000000000000, 0x20000000000000]\r\n     */\r\n    int53Full() {\r\n        return int53Full(this.engine);\r\n    }\r\n    /**\r\n     * Returns a value within [min, max]\r\n     * @param min The minimum integer value, inclusive. No less than -0x20000000000000.\r\n     * @param max The maximum integer value, inclusive. No greater than 0x20000000000000.\r\n     */\r\n    integer(min, max) {\r\n        return integer(min, max)(this.engine);\r\n    }\r\n    /**\r\n     * Returns a floating-point value within [0.0, 1.0]\r\n     */\r\n    realZeroToOneInclusive() {\r\n        return realZeroToOneInclusive(this.engine);\r\n    }\r\n    /**\r\n     * Returns a floating-point value within [0.0, 1.0)\r\n     */\r\n    realZeroToOneExclusive() {\r\n        return realZeroToOneExclusive(this.engine);\r\n    }\r\n    /**\r\n     * Returns a floating-point value within [min, max) or [min, max]\r\n     * @param min The minimum floating-point value, inclusive.\r\n     * @param max The maximum floating-point value.\r\n     * @param inclusive If true, `max` will be inclusive.\r\n     */\r\n    real(min, max, inclusive = false) {\r\n        return real(min, max, inclusive)(this.engine);\r\n    }\r\n    bool(numerator, denominator) {\r\n        return bool(numerator, denominator)(this.engine);\r\n    }\r\n    /**\r\n     * Return a random value within the provided `source` within the sliced\r\n     * bounds of `begin` and `end`.\r\n     * @param source an array of items to pick from\r\n     * @param begin the beginning slice index (defaults to `0`)\r\n     * @param end the ending slice index (defaults to `source.length`)\r\n     */\r\n    pick(source, begin, end) {\r\n        return pick(this.engine, source, begin, end);\r\n    }\r\n    /**\r\n     * Shuffles an array in-place\r\n     * @param array The array to shuffle\r\n     */\r\n    shuffle(array) {\r\n        return shuffle(this.engine, array);\r\n    }\r\n    /**\r\n     * From the population array, returns an array with sampleSize elements that\r\n     * are randomly chosen without repeats.\r\n     * @param population An array that has items to choose a sample from\r\n     * @param sampleSize The size of the result array\r\n     */\r\n    sample(population, sampleSize) {\r\n        return sample(this.engine, population, sampleSize);\r\n    }\r\n    /**\r\n     * Returns a value within [1, sideCount]\r\n     * @param sideCount The number of sides of the die\r\n     */\r\n    die(sideCount) {\r\n        return die(sideCount)(this.engine);\r\n    }\r\n    /**\r\n     * Returns an array of length `dieCount` of values within [1, sideCount]\r\n     * @param sideCount The number of sides of each die\r\n     * @param dieCount The number of dice\r\n     */\r\n    dice(sideCount, dieCount) {\r\n        return dice(sideCount, dieCount)(this.engine);\r\n    }\r\n    /**\r\n     * Returns a Universally Unique Identifier Version 4.\r\n     *\r\n     * See http://en.wikipedia.org/wiki/Universally_unique_identifier\r\n     */\r\n    uuid4() {\r\n        return uuid4(this.engine);\r\n    }\r\n    string(length, pool) {\r\n        return string(pool)(this.engine, length);\r\n    }\r\n    /**\r\n     * Returns a random string comprised of numbers or the characters `abcdef`\r\n     * (or `ABCDEF`) of length `length`.\r\n     * @param length Length of the result string\r\n     * @param uppercase Whether the string should use `ABCDEF` instead of `abcdef`\r\n     */\r\n    hex(length, uppercase) {\r\n        return hex(uppercase)(this.engine, length);\r\n    }\r\n    /**\r\n     * Returns a random `Date` within the inclusive range of [`start`, `end`].\r\n     * @param start The minimum `Date`\r\n     * @param end The maximum `Date`\r\n     */\r\n    date(start, end) {\r\n        return date(start, end)(this.engine);\r\n    }\r\n}\n\n/**\r\n * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array\r\n */\r\nconst I32Array = (() => {\r\n    try {\r\n        const buffer = new ArrayBuffer(4);\r\n        const view = new Int32Array(buffer);\r\n        view[0] = INT32_SIZE;\r\n        if (view[0] === -INT32_SIZE) {\r\n            return Int32Array;\r\n        }\r\n    }\r\n    catch (_) {\r\n        // nothing to do here\r\n    }\r\n    return Array;\r\n})();\n\nlet data = null;\r\nconst COUNT = 128;\r\nlet index = COUNT;\r\n/**\r\n * An Engine that relies on the globally-available `crypto.getRandomValues`,\r\n * which is typically available in modern browsers.\r\n *\r\n * See https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues\r\n *\r\n * If unavailable or otherwise non-functioning, then `browserCrypto` will\r\n * likely `throw` on the first call to `next()`.\r\n */\r\nconst browserCrypto = {\r\n    next() {\r\n        if (index >= COUNT) {\r\n            if (data === null) {\r\n                data = new I32Array(COUNT);\r\n            }\r\n            crypto.getRandomValues(data);\r\n            index = 0;\r\n        }\r\n        return data[index++] | 0;\r\n    }\r\n};\n\n/**\r\n * Returns an array of random int32 values, based on current time\r\n * and a random number engine\r\n *\r\n * @param engine an Engine to pull random values from, default `nativeMath`\r\n * @param length the length of the Array, minimum 1, default 16\r\n */\r\nfunction createEntropy(engine = nativeMath, length = 16) {\r\n    const array = [];\r\n    array.push(new Date().getTime() | 0);\r\n    for (let i = 1; i < length; ++i) {\r\n        array[i] = engine.next() | 0;\r\n    }\r\n    return array;\r\n}\n\n/**\r\n * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul\r\n */\r\nconst imul = (() => {\r\n    try {\r\n        if (Math.imul(UINT32_MAX, 5) === -5) {\r\n            return Math.imul;\r\n        }\r\n    }\r\n    catch (_) {\r\n        // nothing to do here\r\n    }\r\n    const UINT16_MAX = 0xffff;\r\n    return (a, b) => {\r\n        const ah = (a >>> 16) & UINT16_MAX;\r\n        const al = a & UINT16_MAX;\r\n        const bh = (b >>> 16) & UINT16_MAX;\r\n        const bl = b & UINT16_MAX;\r\n        // the shift by 0 fixes the sign on the high part\r\n        // the final |0 converts the unsigned value into a signed value\r\n        return (al * bl + (((ah * bl + al * bh) << 16) >>> 0)) | 0;\r\n    };\r\n})();\n\nconst ARRAY_SIZE = 624;\r\nconst ARRAY_MAX = ARRAY_SIZE - 1;\r\nconst M = 397;\r\nconst ARRAY_SIZE_MINUS_M = ARRAY_SIZE - M;\r\nconst A = 0x9908b0df;\r\n/**\r\n * An Engine that is a pseudorandom number generator using the Mersenne\r\n * Twister algorithm based on the prime 2**19937 − 1\r\n *\r\n * See http://en.wikipedia.org/wiki/Mersenne_twister\r\n */\r\nclass MersenneTwister19937 {\r\n    /**\r\n     * MersenneTwister19937 should not be instantiated directly.\r\n     * Instead, use the static methods `seed`, `seedWithArray`, or `autoSeed`.\r\n     */\r\n    constructor() {\r\n        this.data = new I32Array(ARRAY_SIZE);\r\n        this.index = 0; // integer within [0, 624]\r\n        this.uses = 0;\r\n    }\r\n    /**\r\n     * Returns a MersenneTwister19937 seeded with an initial int32 value\r\n     * @param initial the initial seed value\r\n     */\r\n    static seed(initial) {\r\n        return new MersenneTwister19937().seed(initial);\r\n    }\r\n    /**\r\n     * Returns a MersenneTwister19937 seeded with zero or more int32 values\r\n     * @param source A series of int32 values\r\n     */\r\n    static seedWithArray(source) {\r\n        return new MersenneTwister19937().seedWithArray(source);\r\n    }\r\n    /**\r\n     * Returns a MersenneTwister19937 seeded with the current time and\r\n     * a series of natively-generated random values\r\n     */\r\n    static autoSeed() {\r\n        return MersenneTwister19937.seedWithArray(createEntropy());\r\n    }\r\n    /**\r\n     * Returns the next int32 value of the sequence\r\n     */\r\n    next() {\r\n        if ((this.index | 0) >= ARRAY_SIZE) {\r\n            refreshData(this.data);\r\n            this.index = 0;\r\n        }\r\n        const value = this.data[this.index];\r\n        this.index = (this.index + 1) | 0;\r\n        this.uses += 1;\r\n        return temper(value) | 0;\r\n    }\r\n    /**\r\n     * Returns the number of times that the Engine has been used.\r\n     *\r\n     * This can be provided to an unused MersenneTwister19937 with the same\r\n     * seed, bringing it to the exact point that was left off.\r\n     */\r\n    getUseCount() {\r\n        return this.uses;\r\n    }\r\n    /**\r\n     * Discards one or more items from the engine\r\n     * @param count The count of items to discard\r\n     */\r\n    discard(count) {\r\n        if (count <= 0) {\r\n            return this;\r\n        }\r\n        this.uses += count;\r\n        if ((this.index | 0) >= ARRAY_SIZE) {\r\n            refreshData(this.data);\r\n            this.index = 0;\r\n        }\r\n        while (count + this.index > ARRAY_SIZE) {\r\n            count -= ARRAY_SIZE - this.index;\r\n            refreshData(this.data);\r\n            this.index = 0;\r\n        }\r\n        this.index = (this.index + count) | 0;\r\n        return this;\r\n    }\r\n    seed(initial) {\r\n        let previous = 0;\r\n        this.data[0] = previous = initial | 0;\r\n        for (let i = 1; i < ARRAY_SIZE; i = (i + 1) | 0) {\r\n            this.data[i] = previous =\r\n                (imul(previous ^ (previous >>> 30), 0x6c078965) + i) | 0;\r\n        }\r\n        this.index = ARRAY_SIZE;\r\n        this.uses = 0;\r\n        return this;\r\n    }\r\n    seedWithArray(source) {\r\n        this.seed(0x012bd6aa);\r\n        seedWithArray(this.data, source);\r\n        return this;\r\n    }\r\n}\r\nfunction refreshData(data) {\r\n    let k = 0;\r\n    let tmp = 0;\r\n    for (; (k | 0) < ARRAY_SIZE_MINUS_M; k = (k + 1) | 0) {\r\n        tmp = (data[k] & INT32_SIZE) | (data[(k + 1) | 0] & INT32_MAX);\r\n        data[k] = data[(k + M) | 0] ^ (tmp >>> 1) ^ (tmp & 0x1 ? A : 0);\r\n    }\r\n    for (; (k | 0) < ARRAY_MAX; k = (k + 1) | 0) {\r\n        tmp = (data[k] & INT32_SIZE) | (data[(k + 1) | 0] & INT32_MAX);\r\n        data[k] =\r\n            data[(k - ARRAY_SIZE_MINUS_M) | 0] ^ (tmp >>> 1) ^ (tmp & 0x1 ? A : 0);\r\n    }\r\n    tmp = (data[ARRAY_MAX] & INT32_SIZE) | (data[0] & INT32_MAX);\r\n    data[ARRAY_MAX] = data[M - 1] ^ (tmp >>> 1) ^ (tmp & 0x1 ? A : 0);\r\n}\r\nfunction temper(value) {\r\n    value ^= value >>> 11;\r\n    value ^= (value << 7) & 0x9d2c5680;\r\n    value ^= (value << 15) & 0xefc60000;\r\n    return value ^ (value >>> 18);\r\n}\r\nfunction seedWithArray(data, source) {\r\n    let i = 1;\r\n    let j = 0;\r\n    const sourceLength = source.length;\r\n    let k = Math.max(sourceLength, ARRAY_SIZE) | 0;\r\n    let previous = data[0] | 0;\r\n    for (; (k | 0) > 0; --k) {\r\n        data[i] = previous =\r\n            ((data[i] ^ imul(previous ^ (previous >>> 30), 0x0019660d)) +\r\n                (source[j] | 0) +\r\n                (j | 0)) |\r\n                0;\r\n        i = (i + 1) | 0;\r\n        ++j;\r\n        if ((i | 0) > ARRAY_MAX) {\r\n            data[0] = data[ARRAY_MAX];\r\n            i = 1;\r\n        }\r\n        if (j >= sourceLength) {\r\n            j = 0;\r\n        }\r\n    }\r\n    for (k = ARRAY_MAX; (k | 0) > 0; --k) {\r\n        data[i] = previous =\r\n            ((data[i] ^ imul(previous ^ (previous >>> 30), 0x5d588b65)) - i) | 0;\r\n        i = (i + 1) | 0;\r\n        if ((i | 0) > ARRAY_MAX) {\r\n            data[0] = data[ARRAY_MAX];\r\n            i = 1;\r\n        }\r\n    }\r\n    data[0] = INT32_SIZE;\r\n}\n\nlet data$1 = null;\r\nconst COUNT$1 = 128;\r\nlet index$1 = COUNT$1;\r\n/**\r\n * An Engine that relies on the node-available\r\n * `require('crypto').randomBytes`, which has been available since 0.58.\r\n *\r\n * See https://nodejs.org/api/crypto.html#crypto_crypto_randombytes_size_callback\r\n *\r\n * If unavailable or otherwise non-functioning, then `nodeCrypto` will\r\n * likely `throw` on the first call to `next()`.\r\n */\r\nconst nodeCrypto = {\r\n    next() {\r\n        if (index$1 >= COUNT$1) {\r\n            data$1 = new Int32Array(new Int8Array(require(\"crypto\").randomBytes(4 * COUNT$1)).buffer);\r\n            index$1 = 0;\r\n        }\r\n        return data$1[index$1++] | 0;\r\n    }\r\n};\n\n/**\r\n * Returns a Distribution to random value within the provided `source`\r\n * within the sliced bounds of `begin` and `end`.\r\n * @param source an array of items to pick from\r\n * @param begin the beginning slice index (defaults to `0`)\r\n * @param end the ending slice index (defaults to `source.length`)\r\n */\r\nfunction picker(source, begin, end) {\r\n    const clone = sliceArray.call(source, begin, end);\r\n    if (clone.length === 0) {\r\n        throw new RangeError(`Cannot pick from a source with no items`);\r\n    }\r\n    const distribution = integer(0, clone.length - 1);\r\n    return engine => clone[distribution(engine)];\r\n}\n\nexport { Random, browserCrypto, nativeMath, MersenneTwister19937, nodeCrypto, bool, date, dice, die, hex, int32, int53, int53Full, integer, pick, picker, real, realZeroToOneExclusive, realZeroToOneInclusive, sample, shuffle, string, uint32, uint53, uint53Full, uuid4, createEntropy };\n//# sourceMappingURL=random-js.esm.js.map\n","import * as Random from 'random-js';\nimport Matrix from 'ml-matrix';\n\nexport function checkFloat(n) {\n  return n > 0.0 && n <= 1.0;\n}\n\n/**\n * Select n with replacement elements on the training set and values, where n is the size of the training set.\n * @ignore\n * @param {Matrix} trainingSet\n * @param {Array} trainingValue\n * @param {number} seed - seed for the random selection, must be a 32-bit integer.\n * @return {object} with new X and y.\n */\nexport function examplesBaggingWithReplacement(\n  trainingSet,\n  trainingValue,\n  seed,\n) {\n  let engine;\n  let distribution = Random.integer(0, trainingSet.rows - 1);\n  if (seed === undefined) {\n    engine = Random.MersenneTwister19937.autoSeed();\n  } else if (Number.isInteger(seed)) {\n    engine = Random.MersenneTwister19937.seed(seed);\n  } else {\n    throw new RangeError(\n      `Expected seed must be undefined or integer not ${seed}`,\n    );\n  }\n\n  let Xr = new Array(trainingSet.rows);\n  let yr = new Array(trainingSet.rows);\n\n  for (let i = 0; i < trainingSet.rows; ++i) {\n    let index = distribution(engine);\n    Xr[i] = trainingSet.getRow(index);\n    yr[i] = trainingValue[index];\n  }\n\n  return {\n    X: new Matrix(Xr),\n    y: yr,\n  };\n}\n\n/**\n * selects n features from the training set with or without replacement, returns the new training set and the indexes used.\n * @ignore\n * @param {Matrix} trainingSet\n * @param {number} n - features.\n * @param {boolean} replacement\n * @param {number} seed - seed for the random selection, must be a 32-bit integer.\n * @return {object}\n */\nexport function featureBagging(trainingSet, n, replacement, seed) {\n  if (trainingSet.columns < n) {\n    throw new RangeError(\n      'N should be less or equal to the number of columns of X',\n    );\n  }\n\n  let distribution = Random.integer(0, trainingSet.columns - 1);\n  let engine;\n  if (seed === undefined) {\n    engine = Random.MersenneTwister19937.autoSeed();\n  } else if (Number.isInteger(seed)) {\n    engine = Random.MersenneTwister19937.seed(seed);\n  } else {\n    throw new RangeError(\n      `Expected seed must be undefined or integer not ${seed}`,\n    );\n  }\n\n  let toRet = new Matrix(trainingSet.rows, n);\n\n  let usedIndex;\n  let index;\n  if (replacement) {\n    usedIndex = new Array(n);\n    for (let i = 0; i < n; ++i) {\n      index = distribution(engine);\n      usedIndex[i] = index;\n      toRet.setColumn(i, trainingSet.getColumn(index));\n    }\n  } else {\n    usedIndex = new Set();\n    index = distribution(engine);\n    for (let i = 0; i < n; ++i) {\n      while (usedIndex.has(index)) {\n        index = distribution(engine);\n      }\n      toRet.setColumn(i, trainingSet.getColumn(index));\n      usedIndex.add(index);\n    }\n    usedIndex = Array.from(usedIndex);\n  }\n\n  return {\n    X: toRet,\n    usedIndex: usedIndex,\n  };\n}\n","import {\n  DecisionTreeClassifier as DTClassifier,\n  DecisionTreeRegression as DTRegression,\n} from 'ml-cart';\nimport {\n  Matrix,\n  WrapperMatrix2D,\n  MatrixTransposeView,\n  MatrixColumnSelectionView,\n} from 'ml-matrix';\n\nimport * as Utils from './utils';\n\n/**\n * @class RandomForestBase\n */\nexport class RandomForestBase {\n  /**\n   * Create a new base random forest for a classifier or regression model.\n   * @constructor\n   * @param {object} options\n   * @param {number|String} [options.maxFeatures] - the number of features used on each estimator.\n   *        * if is an integer it selects maxFeatures elements over the sample features.\n   *        * if is a float between (0, 1), it takes the percentage of features.\n   * @param {boolean} [options.replacement] - use replacement over the sample features.\n   * @param {number} [options.seed] - seed for feature and samples selection, must be a 32-bit integer.\n   * @param {number} [options.nEstimators] - number of estimator to use.\n   * @param {object} [options.treeOptions] - options for the tree classifier, see [ml-cart]{@link https://mljs.github.io/decision-tree-cart/}\n   * @param {boolean} [options.isClassifier] - boolean to check if is a classifier or regression model (used by subclasses).\n   * @param {boolean} [options.useSampleBagging] - use bagging over training samples.\n   * @param {object} model - for load purposes.\n   */\n  constructor(options, model) {\n    if (options === true) {\n      this.replacement = model.replacement;\n      this.maxFeatures = model.maxFeatures;\n      this.nEstimators = model.nEstimators;\n      this.treeOptions = model.treeOptions;\n      this.isClassifier = model.isClassifier;\n      this.seed = model.seed;\n      this.n = model.n;\n      this.indexes = model.indexes;\n      this.useSampleBagging = model.useSampleBagging;\n\n      let Estimator = this.isClassifier ? DTClassifier : DTRegression;\n      this.estimators = model.estimators.map((est) => Estimator.load(est));\n    } else {\n      this.replacement = options.replacement;\n      this.maxFeatures = options.maxFeatures;\n      this.nEstimators = options.nEstimators;\n      this.treeOptions = options.treeOptions;\n      this.isClassifier = options.isClassifier;\n      this.seed = options.seed;\n      this.useSampleBagging = options.useSampleBagging;\n    }\n  }\n\n  /**\n   * Train the decision tree with the given training set and labels.\n   * @param {Matrix|Array} trainingSet\n   * @param {Array} trainingValues\n   */\n  train(trainingSet, trainingValues) {\n    trainingSet = Matrix.checkMatrix(trainingSet);\n\n    this.maxFeatures = this.maxFeatures || trainingSet.columns;\n\n    if (Utils.checkFloat(this.maxFeatures)) {\n      this.n = Math.floor(trainingSet.columns * this.maxFeatures);\n    } else if (Number.isInteger(this.maxFeatures)) {\n      if (this.maxFeatures > trainingSet.columns) {\n        throw new RangeError(\n          `The maxFeatures parameter should be less than ${trainingSet.columns}`,\n        );\n      } else {\n        this.n = this.maxFeatures;\n      }\n    } else {\n      throw new RangeError(\n        `Cannot process the maxFeatures parameter ${this.maxFeatures}`,\n      );\n    }\n\n    let Estimator;\n    if (this.isClassifier) {\n      Estimator = DTClassifier;\n    } else {\n      Estimator = DTRegression;\n    }\n\n    this.estimators = new Array(this.nEstimators);\n    this.indexes = new Array(this.nEstimators);\n\n    for (let i = 0; i < this.nEstimators; ++i) {\n      let res = this.useSampleBagging\n        ? Utils.examplesBaggingWithReplacement(\n            trainingSet,\n            trainingValues,\n            this.seed,\n          )\n        : { X: trainingSet, y: trainingValues };\n      let X = res.X;\n      let y = res.y;\n\n      res = Utils.featureBagging(X, this.n, this.replacement, this.seed);\n      X = res.X;\n\n      this.indexes[i] = res.usedIndex;\n      this.estimators[i] = new Estimator(this.treeOptions);\n      this.estimators[i].train(X, y);\n    }\n  }\n\n  /**\n   * Method that returns the way the algorithm generates the predictions, for example, in classification\n   * you can return the mode of all predictions retrieved by the trees, or in case of regression you can\n   * use the mean or the median.\n   * @abstract\n   * @param {Array} values - predictions of the estimators.\n   * @return {number} prediction.\n   */\n  // eslint-disable-next-line no-unused-vars\n  selection(values) {\n    throw new Error(\"Abstract method 'selection' not implemented!\");\n  }\n\n  /**\n   * Predicts the output given the matrix to predict.\n   * @param {Matrix|Array} toPredict\n   * @return {Array} predictions\n   */\n  predict(toPredict) {\n    let predictionValues = new Array(this.nEstimators);\n    toPredict = Matrix.checkMatrix(toPredict);\n    for (let i = 0; i < this.nEstimators; ++i) {\n      let X = new MatrixColumnSelectionView(toPredict, this.indexes[i]); // get features for estimator\n      predictionValues[i] = this.estimators[i].predict(X);\n    }\n\n    predictionValues = new MatrixTransposeView(\n      new WrapperMatrix2D(predictionValues),\n    );\n    let predictions = new Array(predictionValues.rows);\n    for (let i = 0; i < predictionValues.rows; ++i) {\n      predictions[i] = this.selection(predictionValues.getRow(i));\n    }\n\n    return predictions;\n  }\n\n  /**\n   * Export the current model to JSON.\n   * @return {object} - Current model.\n   */\n  toJSON() {\n    return {\n      indexes: this.indexes,\n      n: this.n,\n      replacement: this.replacement,\n      maxFeatures: this.maxFeatures,\n      nEstimators: this.nEstimators,\n      treeOptions: this.treeOptions,\n      isClassifier: this.isClassifier,\n      seed: this.seed,\n      estimators: this.estimators.map((est) => est.toJSON()),\n      useSampleBagging: this.useSampleBagging,\n    };\n  }\n}\n","import { RandomForestBase } from './RandomForestBase';\n\nconst defaultOptions = {\n  maxFeatures: 1.0,\n  replacement: true,\n  nEstimators: 10,\n  seed: 42,\n  useSampleBagging: false,\n};\n\n/**\n * @class RandomForestClassifier\n * @augments RandomForestBase\n */\nexport class RandomForestClassifier extends RandomForestBase {\n  /**\n   * Create a new base random forest for a classifier or regression model.\n   * @constructor\n   * @param {object} options\n   * @param {number} [options.maxFeatures=1.0] - the number of features used on each estimator.\n   *        * if is an integer it selects maxFeatures elements over the sample features.\n   *        * if is a float between (0, 1), it takes the percentage of features.\n   * @param {boolean} [options.replacement=true] - use replacement over the sample features.\n   * @param {number} [options.seed=42] - seed for feature and samples selection, must be a 32-bit integer.\n   * @param {number} [options.nEstimators=10] - number of estimator to use.\n   * @param {object} [options.treeOptions={}] - options for the tree classifier, see [ml-cart]{@link https://mljs.github.io/decision-tree-cart/}\n   * @param {boolean} [options.useSampleBagging=false] - use bagging over training samples.\n   * @param {object} model - for load purposes.\n   */\n  constructor(options, model) {\n    if (options === true) {\n      super(true, model.baseModel);\n    } else {\n      options = Object.assign({}, defaultOptions, options);\n      options.isClassifier = true;\n      super(options);\n    }\n  }\n\n  /**\n   * retrieve the prediction given the selection method.\n   * @param {Array} values - predictions of the estimators.\n   * @return {number} prediction\n   */\n  selection(values) {\n    return mode(values);\n  }\n\n  /**\n   * Export the current model to JSON.\n   * @return {object} - Current model.\n   */\n  toJSON() {\n    let baseModel = super.toJSON();\n    return {\n      baseModel: baseModel,\n      name: 'RFClassifier',\n    };\n  }\n\n  /**\n   * Load a Decision tree classifier with the given model.\n   * @param {object} model\n   * @return {RandomForestClassifier}\n   */\n  static load(model) {\n    if (model.name !== 'RFClassifier') {\n      throw new RangeError(`Invalid model: ${model.name}`);\n    }\n\n    return new RandomForestClassifier(true, model);\n  }\n}\n\n/**\n * Return the most repeated element on the array.\n * @param {Array} arr\n * @return {number} mode\n */\nfunction mode(arr) {\n  return arr\n    .sort(\n      (a, b) =>\n        arr.filter((v) => v === a).length - arr.filter((v) => v === b).length,\n    )\n    .pop();\n}\n","const toString = Object.prototype.toString;\n\nexport default function isAnyArray(object) {\n  return toString.call(object).endsWith('Array]');\n}\n","(function(){function a(d){for(var e=0,f=d.length-1,g=void 0,h=void 0,i=void 0,j=c(e,f);!0;){if(f<=e)return d[j];if(f==e+1)return d[e]>d[f]&&b(d,e,f),d[j];for(g=c(e,f),d[g]>d[f]&&b(d,g,f),d[e]>d[f]&&b(d,e,f),d[g]>d[e]&&b(d,g,e),b(d,g,e+1),h=e+1,i=f;!0;){do h++;while(d[e]>d[h]);do i--;while(d[i]>d[e]);if(i<h)break;b(d,h,i)}b(d,e,i),i<=j&&(e=h),i>=j&&(f=i-1)}}var b=function b(d,e,f){var _ref;return _ref=[d[f],d[e]],d[e]=_ref[0],d[f]=_ref[1],_ref},c=function c(d,e){return~~((d+e)/2)};'undefined'!=typeof module&&module.exports?module.exports=a:window.median=a})();\n","import isArray from 'is-any-array';\nimport quickSelectMedian from 'median-quickselect';\n\nfunction median(input) {\n  if (!isArray(input)) {\n    throw new TypeError('input must be an array');\n  }\n\n  if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  return quickSelectMedian(input.slice());\n}\n\nexport default median;\n","import arrayMean from 'ml-array-mean';\nimport arrayMedian from 'ml-array-median';\n\nimport { RandomForestBase } from './RandomForestBase';\n\nconst selectionMethods = {\n  mean: arrayMean,\n  median: arrayMedian,\n};\n\nconst defaultOptions = {\n  maxFeatures: 1.0,\n  replacement: false,\n  nEstimators: 10,\n  treeOptions: {},\n  selectionMethod: 'mean',\n  seed: 42,\n  useSampleBagging: false,\n};\n\n/**\n * @class RandomForestRegression\n * @augments RandomForestBase\n */\nexport class RandomForestRegression extends RandomForestBase {\n  /**\n   * Create a new base random forest for a classifier or regression model.\n   * @constructor\n   * @param {object} options\n   * @param {number} [options.maxFeatures=1.0] - the number of features used on each estimator.\n   *        * if is an integer it selects maxFeatures elements over the sample features.\n   *        * if is a float between (0, 1), it takes the percentage of features.\n   * @param {boolean} [options.replacement=true] - use replacement over the sample features.\n   * @param {number} [options.seed=42] - seed for feature and samples selection, must be a 32-bit integer.\n   * @param {number} [options.nEstimators=10] - number of estimator to use.\n   * @param {object} [options.treeOptions={}] - options for the tree classifier, see [ml-cart]{@link https://mljs.github.io/decision-tree-cart/}\n   * @param {string} [options.selectionMethod=\"mean\"] - the way to calculate the prediction from estimators, \"mean\" and \"median\" are supported.\n   * @param {boolean} [options.useSampleBagging=false] - use bagging over training samples.\n   * @param {object} model - for load purposes.\n   */\n  constructor(options, model) {\n    if (options === true) {\n      super(true, model.baseModel);\n      this.selectionMethod = model.selectionMethod;\n    } else {\n      options = Object.assign({}, defaultOptions, options);\n\n      if (\n        !(\n          options.selectionMethod === 'mean' ||\n          options.selectionMethod === 'median'\n        )\n      ) {\n        throw new RangeError(\n          `Unsupported selection method ${options.selectionMethod}`,\n        );\n      }\n\n      options.isClassifier = false;\n\n      super(options);\n      this.selectionMethod = options.selectionMethod;\n    }\n  }\n\n  /**\n   * retrieve the prediction given the selection method.\n   * @param {Array} values - predictions of the estimators.\n   * @return {number} prediction\n   */\n  selection(values) {\n    return selectionMethods[this.selectionMethod](values);\n  }\n\n  /**\n   * Export the current model to JSON.\n   * @return {object} - Current model.\n   */\n  toJSON() {\n    let baseModel = super.toJSON();\n    return {\n      baseModel: baseModel,\n      selectionMethod: this.selectionMethod,\n      name: 'RFRegression',\n    };\n  }\n\n  /**\n   * Load a Decision tree classifier with the given model.\n   * @param {object} model\n   * @return {RandomForestRegression}\n   */\n  static load(model) {\n    if (model.name !== 'RFRegression') {\n      throw new RangeError(`Invalid model: ${model.name}`);\n    }\n\n    return new RandomForestRegression(true, model);\n  }\n}\n","import { Matrix, MatrixTransposeView, EVD, SVD, NIPALS } from 'ml-matrix';\n\n/**\n * Creates new PCA (Principal Component Analysis) from the dataset\n * @param {Matrix} dataset - dataset or covariance matrix.\n * @param {Object} [options]\n * @param {boolean} [options.isCovarianceMatrix=false] - true if the dataset is a covariance matrix.\n * @param {string} [options.method='SVD'] - select which method to use: SVD (default), covarianceMatrirx or NIPALS.\n * @param {number} [options.nCompNIPALS=2] - number of components to be computed with NIPALS.\n * @param {boolean} [options.center=true] - should the data be centered (subtract the mean).\n * @param {boolean} [options.scale=false] - should the data be scaled (divide by the standard deviation).\n * @param {boolean} [options.ignoreZeroVariance=false] - ignore columns with zero variance if `scale` is `true`.\n * */\nexport class PCA {\n  constructor(dataset, options = {}) {\n    if (dataset === true) {\n      const model = options;\n      this.center = model.center;\n      this.scale = model.scale;\n      this.means = model.means;\n      this.stdevs = model.stdevs;\n      this.U = Matrix.checkMatrix(model.U);\n      this.S = model.S;\n      this.R = model.R;\n      this.excludedFeatures = model.excludedFeatures || [];\n      return;\n    }\n\n    dataset = new Matrix(dataset);\n\n    const {\n      isCovarianceMatrix = false,\n      method = 'SVD',\n      nCompNIPALS = 2,\n      center = true,\n      scale = false,\n      ignoreZeroVariance = false,\n    } = options;\n\n    this.center = center;\n    this.scale = scale;\n    this.means = null;\n    this.stdevs = null;\n    this.excludedFeatures = [];\n\n    if (isCovarianceMatrix) {\n      // User provided a covariance matrix instead of dataset.\n      this._computeFromCovarianceMatrix(dataset);\n      return;\n    }\n\n    this._adjust(dataset, ignoreZeroVariance);\n    switch (method) {\n      case 'covarianceMatrix': {\n        // User provided a dataset but wants us to compute and use the covariance matrix.\n        const covarianceMatrix = new MatrixTransposeView(dataset)\n          .mmul(dataset)\n          .div(dataset.rows - 1);\n        this._computeFromCovarianceMatrix(covarianceMatrix);\n        break;\n      }\n      case 'NIPALS': {\n        this._computeWithNIPALS(dataset, nCompNIPALS);\n        break;\n      }\n      case 'SVD': {\n        const svd = new SVD(dataset, {\n          computeLeftSingularVectors: false,\n          computeRightSingularVectors: true,\n          autoTranspose: true,\n        });\n\n        this.U = svd.rightSingularVectors;\n\n        const singularValues = svd.diagonal;\n        const eigenvalues = [];\n        for (const singularValue of singularValues) {\n          eigenvalues.push((singularValue * singularValue) / (dataset.rows - 1));\n        }\n        this.S = eigenvalues;\n        break;\n      }\n      default: {\n        throw new Error(`unknown method: ${method}`);\n      }\n    }\n  }\n\n  /**\n   * Load a PCA model from JSON\n   * @param {Object} model\n   * @return {PCA}\n   */\n  static load(model) {\n    if (typeof model.name !== 'string') {\n      throw new TypeError('model must have a name property');\n    }\n    if (model.name !== 'PCA') {\n      throw new RangeError(`invalid model: ${model.name}`);\n    }\n    return new PCA(true, model);\n  }\n\n  /**\n   * Project the dataset into the PCA space\n   * @param {Matrix} dataset\n   * @param {Object} options\n   * @return {Matrix} dataset projected in the PCA space\n   */\n  predict(dataset, options = {}) {\n    const { nComponents = this.U.columns } = options;\n    dataset = new Matrix(dataset);\n    if (this.center) {\n      dataset.subRowVector(this.means);\n      if (this.scale) {\n        for (let i of this.excludedFeatures) {\n          dataset.removeColumn(i);\n        }\n        dataset.divRowVector(this.stdevs);\n      }\n    }\n    var predictions = dataset.mmul(this.U);\n    return predictions.subMatrix(0, predictions.rows - 1, 0, nComponents - 1);\n  }\n\n  /**\n   * Calculates the inverse PCA transform\n   * @param {Matrix} dataset\n   * @return {Matrix} dataset projected in the PCA space\n   */\n  invert(dataset) {\n    dataset = Matrix.checkMatrix(dataset);\n\n    var inverse = dataset.mmul(this.U.transpose());\n\n    if (this.center) {\n      if (this.scale) {\n        inverse.mulRowVector(this.stdevs);\n      }\n      inverse.addRowVector(this.means);\n    }\n\n    return inverse;\n  }\n\n\n  /**\n   * Returns the proportion of variance for each component\n   * @return {[number]}\n   */\n  getExplainedVariance() {\n    var sum = 0;\n    for (const s of this.S) {\n      sum += s;\n    }\n    return this.S.map((value) => value / sum);\n  }\n\n  /**\n   * Returns the cumulative proportion of variance\n   * @return {[number]}\n   */\n  getCumulativeVariance() {\n    var explained = this.getExplainedVariance();\n    for (var i = 1; i < explained.length; i++) {\n      explained[i] += explained[i - 1];\n    }\n    return explained;\n  }\n\n  /**\n   * Returns the Eigenvectors of the covariance matrix\n   * @returns {Matrix}\n   */\n  getEigenvectors() {\n    return this.U;\n  }\n\n  /**\n   * Returns the Eigenvalues (on the diagonal)\n   * @returns {[number]}\n   */\n  getEigenvalues() {\n    return this.S;\n  }\n\n  /**\n   * Returns the standard deviations of the principal components\n   * @returns {[number]}\n   */\n  getStandardDeviations() {\n    return this.S.map((x) => Math.sqrt(x));\n  }\n\n  /**\n   * Returns the loadings matrix\n   * @return {Matrix}\n   */\n  getLoadings() {\n    return this.U.transpose();\n  }\n\n  /**\n   * Export the current model to a JSON object\n   * @return {Object} model\n   */\n  toJSON() {\n    return {\n      name: 'PCA',\n      center: this.center,\n      scale: this.scale,\n      means: this.means,\n      stdevs: this.stdevs,\n      U: this.U,\n      S: this.S,\n      excludedFeatures: this.excludedFeatures,\n    };\n  }\n\n  _adjust(dataset, ignoreZeroVariance) {\n    if (this.center) {\n      const mean = dataset.mean('column');\n      const stdevs = this.scale\n        ? dataset.standardDeviation('column', { mean })\n        : null;\n      this.means = mean;\n      dataset.subRowVector(mean);\n      if (this.scale) {\n        for (let i = 0; i < stdevs.length; i++) {\n          if (stdevs[i] === 0) {\n            if (ignoreZeroVariance) {\n              dataset.removeColumn(i);\n              stdevs.splice(i, 1);\n              this.excludedFeatures.push(i);\n              i--;\n            } else {\n              throw new RangeError(\n                `Cannot scale the dataset (standard deviation is zero at index ${i}`,\n              );\n            }\n          }\n        }\n        this.stdevs = stdevs;\n        dataset.divRowVector(stdevs);\n      }\n    }\n  }\n\n  _computeFromCovarianceMatrix(dataset) {\n    const evd = new EVD(dataset, { assumeSymmetric: true });\n    this.U = evd.eigenvectorMatrix;\n    this.U.flipRows();\n    this.S = evd.realEigenvalues;\n    this.S.reverse();\n  }\n\n  _computeWithNIPALS(dataset, nCompNIPALS) {\n    this.U = new Matrix(nCompNIPALS, dataset.columns);\n    this.S = [];\n\n    let x = dataset;\n    for (let i = 0; i < nCompNIPALS; i++) {\n      let dc = new NIPALS(x);\n\n      this.U.setRow(i, dc.w.transpose());\n      this.S.push(Math.pow(dc.s.get(0, 0), 2));\n\n      x = dc.xResidual;\n    }\n    this.U = this.U.transpose(); // to be compatible with API\n  }\n}\n","export function squaredEuclidean(p, q) {\r\n    let d = 0;\r\n    for (let i = 0; i < p.length; i++) {\r\n        d += (p[i] - q[i]) * (p[i] - q[i]);\r\n    }\r\n    return d;\r\n}\r\nexport function euclidean(p, q) {\r\n    return Math.sqrt(squaredEuclidean(p, q));\r\n}\r\n","/**\n * Computes a distance/similarity matrix given an array of data and a distance/similarity function.\n * @param {Array} data An array of data\n * @param {function} distanceFn  A function that accepts two arguments and computes a distance/similarity between them\n * @return {Array<Array>} The distance/similarity matrix. The matrix is square and has a size equal to the length of\n * the data array\n */\nexport default function distanceMatrix(data, distanceFn) {\n  const result = getMatrix(data.length);\n\n  // Compute upper distance matrix\n  for (let i = 0; i < data.length; i++) {\n    for (let j = 0; j <= i; j++) {\n      result[i][j] = distanceFn(data[i], data[j]);\n      result[j][i] = result[i][j];\n    }\n  }\n\n  return result;\n}\n\nfunction getMatrix(size) {\n  const matrix = [];\n  for (let i = 0; i < size; i++) {\n    const row = [];\n    matrix.push(row);\n    for (let j = 0; j < size; j++) {\n      row.push(0);\n    }\n  }\n  return matrix;\n}\n","// Generated by CoffeeScript 1.8.0\n(function() {\n  var Heap, defaultCmp, floor, heapify, heappop, heappush, heappushpop, heapreplace, insort, min, nlargest, nsmallest, updateItem, _siftdown, _siftup;\n\n  floor = Math.floor, min = Math.min;\n\n\n  /*\n  Default comparison function to be used\n   */\n\n  defaultCmp = function(x, y) {\n    if (x < y) {\n      return -1;\n    }\n    if (x > y) {\n      return 1;\n    }\n    return 0;\n  };\n\n\n  /*\n  Insert item x in list a, and keep it sorted assuming a is sorted.\n  \n  If x is already in a, insert it to the right of the rightmost x.\n  \n  Optional args lo (default 0) and hi (default a.length) bound the slice\n  of a to be searched.\n   */\n\n  insort = function(a, x, lo, hi, cmp) {\n    var mid;\n    if (lo == null) {\n      lo = 0;\n    }\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    if (lo < 0) {\n      throw new Error('lo must be non-negative');\n    }\n    if (hi == null) {\n      hi = a.length;\n    }\n    while (lo < hi) {\n      mid = floor((lo + hi) / 2);\n      if (cmp(x, a[mid]) < 0) {\n        hi = mid;\n      } else {\n        lo = mid + 1;\n      }\n    }\n    return ([].splice.apply(a, [lo, lo - lo].concat(x)), x);\n  };\n\n\n  /*\n  Push item onto heap, maintaining the heap invariant.\n   */\n\n  heappush = function(array, item, cmp) {\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    array.push(item);\n    return _siftdown(array, 0, array.length - 1, cmp);\n  };\n\n\n  /*\n  Pop the smallest item off the heap, maintaining the heap invariant.\n   */\n\n  heappop = function(array, cmp) {\n    var lastelt, returnitem;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    lastelt = array.pop();\n    if (array.length) {\n      returnitem = array[0];\n      array[0] = lastelt;\n      _siftup(array, 0, cmp);\n    } else {\n      returnitem = lastelt;\n    }\n    return returnitem;\n  };\n\n\n  /*\n  Pop and return the current smallest value, and add the new item.\n  \n  This is more efficient than heappop() followed by heappush(), and can be\n  more appropriate when using a fixed size heap. Note that the value\n  returned may be larger than item! That constrains reasonable use of\n  this routine unless written as part of a conditional replacement:\n      if item > array[0]\n        item = heapreplace(array, item)\n   */\n\n  heapreplace = function(array, item, cmp) {\n    var returnitem;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    returnitem = array[0];\n    array[0] = item;\n    _siftup(array, 0, cmp);\n    return returnitem;\n  };\n\n\n  /*\n  Fast version of a heappush followed by a heappop.\n   */\n\n  heappushpop = function(array, item, cmp) {\n    var _ref;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    if (array.length && cmp(array[0], item) < 0) {\n      _ref = [array[0], item], item = _ref[0], array[0] = _ref[1];\n      _siftup(array, 0, cmp);\n    }\n    return item;\n  };\n\n\n  /*\n  Transform list into a heap, in-place, in O(array.length) time.\n   */\n\n  heapify = function(array, cmp) {\n    var i, _i, _j, _len, _ref, _ref1, _results, _results1;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    _ref1 = (function() {\n      _results1 = [];\n      for (var _j = 0, _ref = floor(array.length / 2); 0 <= _ref ? _j < _ref : _j > _ref; 0 <= _ref ? _j++ : _j--){ _results1.push(_j); }\n      return _results1;\n    }).apply(this).reverse();\n    _results = [];\n    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\n      i = _ref1[_i];\n      _results.push(_siftup(array, i, cmp));\n    }\n    return _results;\n  };\n\n\n  /*\n  Update the position of the given item in the heap.\n  This function should be called every time the item is being modified.\n   */\n\n  updateItem = function(array, item, cmp) {\n    var pos;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    pos = array.indexOf(item);\n    if (pos === -1) {\n      return;\n    }\n    _siftdown(array, 0, pos, cmp);\n    return _siftup(array, pos, cmp);\n  };\n\n\n  /*\n  Find the n largest elements in a dataset.\n   */\n\n  nlargest = function(array, n, cmp) {\n    var elem, result, _i, _len, _ref;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    result = array.slice(0, n);\n    if (!result.length) {\n      return result;\n    }\n    heapify(result, cmp);\n    _ref = array.slice(n);\n    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n      elem = _ref[_i];\n      heappushpop(result, elem, cmp);\n    }\n    return result.sort(cmp).reverse();\n  };\n\n\n  /*\n  Find the n smallest elements in a dataset.\n   */\n\n  nsmallest = function(array, n, cmp) {\n    var elem, i, los, result, _i, _j, _len, _ref, _ref1, _results;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    if (n * 10 <= array.length) {\n      result = array.slice(0, n).sort(cmp);\n      if (!result.length) {\n        return result;\n      }\n      los = result[result.length - 1];\n      _ref = array.slice(n);\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        elem = _ref[_i];\n        if (cmp(elem, los) < 0) {\n          insort(result, elem, 0, null, cmp);\n          result.pop();\n          los = result[result.length - 1];\n        }\n      }\n      return result;\n    }\n    heapify(array, cmp);\n    _results = [];\n    for (i = _j = 0, _ref1 = min(n, array.length); 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {\n      _results.push(heappop(array, cmp));\n    }\n    return _results;\n  };\n\n  _siftdown = function(array, startpos, pos, cmp) {\n    var newitem, parent, parentpos;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    newitem = array[pos];\n    while (pos > startpos) {\n      parentpos = (pos - 1) >> 1;\n      parent = array[parentpos];\n      if (cmp(newitem, parent) < 0) {\n        array[pos] = parent;\n        pos = parentpos;\n        continue;\n      }\n      break;\n    }\n    return array[pos] = newitem;\n  };\n\n  _siftup = function(array, pos, cmp) {\n    var childpos, endpos, newitem, rightpos, startpos;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    endpos = array.length;\n    startpos = pos;\n    newitem = array[pos];\n    childpos = 2 * pos + 1;\n    while (childpos < endpos) {\n      rightpos = childpos + 1;\n      if (rightpos < endpos && !(cmp(array[childpos], array[rightpos]) < 0)) {\n        childpos = rightpos;\n      }\n      array[pos] = array[childpos];\n      pos = childpos;\n      childpos = 2 * pos + 1;\n    }\n    array[pos] = newitem;\n    return _siftdown(array, startpos, pos, cmp);\n  };\n\n  Heap = (function() {\n    Heap.push = heappush;\n\n    Heap.pop = heappop;\n\n    Heap.replace = heapreplace;\n\n    Heap.pushpop = heappushpop;\n\n    Heap.heapify = heapify;\n\n    Heap.updateItem = updateItem;\n\n    Heap.nlargest = nlargest;\n\n    Heap.nsmallest = nsmallest;\n\n    function Heap(cmp) {\n      this.cmp = cmp != null ? cmp : defaultCmp;\n      this.nodes = [];\n    }\n\n    Heap.prototype.push = function(x) {\n      return heappush(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.pop = function() {\n      return heappop(this.nodes, this.cmp);\n    };\n\n    Heap.prototype.peek = function() {\n      return this.nodes[0];\n    };\n\n    Heap.prototype.contains = function(x) {\n      return this.nodes.indexOf(x) !== -1;\n    };\n\n    Heap.prototype.replace = function(x) {\n      return heapreplace(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.pushpop = function(x) {\n      return heappushpop(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.heapify = function() {\n      return heapify(this.nodes, this.cmp);\n    };\n\n    Heap.prototype.updateItem = function(x) {\n      return updateItem(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.clear = function() {\n      return this.nodes = [];\n    };\n\n    Heap.prototype.empty = function() {\n      return this.nodes.length === 0;\n    };\n\n    Heap.prototype.size = function() {\n      return this.nodes.length;\n    };\n\n    Heap.prototype.clone = function() {\n      var heap;\n      heap = new Heap();\n      heap.nodes = this.nodes.slice(0);\n      return heap;\n    };\n\n    Heap.prototype.toArray = function() {\n      return this.nodes.slice(0);\n    };\n\n    Heap.prototype.insert = Heap.prototype.push;\n\n    Heap.prototype.top = Heap.prototype.peek;\n\n    Heap.prototype.front = Heap.prototype.peek;\n\n    Heap.prototype.has = Heap.prototype.contains;\n\n    Heap.prototype.copy = Heap.prototype.clone;\n\n    return Heap;\n\n  })();\n\n  (function(root, factory) {\n    if (typeof define === 'function' && define.amd) {\n      return define([], factory);\n    } else if (typeof exports === 'object') {\n      return module.exports = factory();\n    } else {\n      return root.Heap = factory();\n    }\n  })(this, function() {\n    return Heap;\n  });\n\n}).call(this);\n","module.exports = require('./lib/heap');\n","import Heap from 'heap';\n\nexport default class Cluster {\n  constructor() {\n    this.children = [];\n    this.height = 0;\n    this.size = 1;\n    this.index = -1;\n    this.isLeaf = false;\n  }\n\n  /**\n   * Creates an array of clusters where the maximum height is smaller than the threshold\n   * @param {number} threshold\n   * @return {Array<Cluster>}\n   */\n  cut(threshold) {\n    if (typeof threshold !== 'number') {\n      throw new TypeError('threshold must be a number');\n    }\n    if (threshold < 0) {\n      throw new RangeError('threshold must be a positive number');\n    }\n    let list = [this];\n    const ans = [];\n    while (list.length > 0) {\n      const aux = list.shift();\n      if (threshold >= aux.height) {\n        ans.push(aux);\n      } else {\n        list = list.concat(aux.children);\n      }\n    }\n    return ans;\n  }\n\n  /**\n   * Merge the leaves in the minimum way to have `groups` number of clusters.\n   * @param {number} groups - Them number of children the first level of the tree should have.\n   * @return {Cluster}\n   */\n  group(groups) {\n    if (!Number.isInteger(groups) || groups < 1) {\n      throw new RangeError('groups must be a positive integer');\n    }\n\n    const heap = new Heap((a, b) => {\n      return b.height - a.height;\n    });\n\n    heap.push(this);\n\n    while (heap.size() < groups) {\n      var first = heap.pop();\n      if (first.children.length === 0) {\n        break;\n      }\n      first.children.forEach((child) => heap.push(child));\n    }\n\n    var root = new Cluster();\n    root.children = heap.toArray();\n    root.height = this.height;\n\n    return root;\n  }\n\n  /**\n   * Traverses the tree depth-first and calls the provided callback with each individual node\n   * @param {function} cb - The callback to be called on each node encounter\n   */\n  traverse(cb) {\n    function visit(root, callback) {\n      callback(root);\n      if (root.children) {\n        for (const child of root.children) {\n          visit(child, callback);\n        }\n      }\n    }\n    visit(this, cb);\n  }\n\n  /**\n   * Returns a list of indices for all the leaves of this cluster.\n   * The list is ordered in such a way that a dendrogram could be drawn without crossing branches.\n   * @returns {Array<number>}\n   */\n  indices() {\n    const result = [];\n    this.traverse((cluster) => {\n      if (cluster.isLeaf) {\n        result.push(cluster.index);\n      }\n    });\n    return result;\n  }\n}\n","import { euclidean } from 'ml-distance-euclidean';\nimport getDistanceMatrix from 'ml-distance-matrix';\nimport { Matrix } from 'ml-matrix';\n\nimport Cluster from './Cluster';\n\nfunction singleLink(dKI, dKJ) {\n  return Math.min(dKI, dKJ);\n}\n\nfunction completeLink(dKI, dKJ) {\n  return Math.max(dKI, dKJ);\n}\n\nfunction averageLink(dKI, dKJ, dIJ, ni, nj) {\n  const ai = ni / (ni + nj);\n  const aj = nj / (ni + nj);\n  return ai * dKI + aj * dKJ;\n}\n\nfunction weightedAverageLink(dKI, dKJ) {\n  return (dKI + dKJ) / 2;\n}\n\nfunction centroidLink(dKI, dKJ, dIJ, ni, nj) {\n  const ai = ni / (ni + nj);\n  const aj = nj / (ni + nj);\n  const b = -(ni * nj) / (ni + nj) ** 2;\n  return ai * dKI + aj * dKJ + b * dIJ;\n}\n\nfunction medianLink(dKI, dKJ, dIJ) {\n  return dKI / 2 + dKJ / 2 - dIJ / 4;\n}\n\nfunction wardLink(dKI, dKJ, dIJ, ni, nj, nk) {\n  const ai = (ni + nk) / (ni + nj + nk);\n  const aj = (nj + nk) / (ni + nj + nk);\n  const b = -nk / (ni + nj + nk);\n  return ai * dKI + aj * dKJ + b * dIJ;\n}\n\nfunction wardLink2(dKI, dKJ, dIJ, ni, nj, nk) {\n  const ai = (ni + nk) / (ni + nj + nk);\n  const aj = (nj + nk) / (ni + nj + nk);\n  const b = -nk / (ni + nj + nk);\n  return Math.sqrt(ai * dKI * dKI + aj * dKJ * dKJ + b * dIJ * dIJ);\n}\n\n/**\n * Continuously merge nodes that have the least dissimilarity\n * @param {Array<Array<number>>} data - Array of points to be clustered\n * @param {object} [options]\n * @param {Function} [options.distanceFunction]\n * @param {string} [options.method] - Default: `'complete'`\n * @param {boolean} [options.isDistanceMatrix] - Is the input already a distance matrix?\n * @constructor\n */\nexport function agnes(data, options = {}) {\n  const {\n    distanceFunction = euclidean,\n    method = 'complete',\n    isDistanceMatrix = false,\n  } = options;\n\n  let updateFunc;\n  if (!isDistanceMatrix) {\n    data = getDistanceMatrix(data, distanceFunction);\n  }\n  let distanceMatrix = new Matrix(data);\n  const numLeaves = distanceMatrix.rows;\n\n  // allows to use a string or a given function\n  if (typeof method === 'string') {\n    switch (method.toLowerCase()) {\n      case 'single':\n        updateFunc = singleLink;\n        break;\n      case 'complete':\n        updateFunc = completeLink;\n        break;\n      case 'average':\n      case 'upgma':\n        updateFunc = averageLink;\n        break;\n      case 'wpgma':\n        updateFunc = weightedAverageLink;\n        break;\n      case 'centroid':\n      case 'upgmc':\n        updateFunc = centroidLink;\n        break;\n      case 'median':\n      case 'wpgmc':\n        updateFunc = medianLink;\n        break;\n      case 'ward':\n        updateFunc = wardLink;\n        break;\n      case 'ward2':\n        updateFunc = wardLink2;\n        break;\n      default:\n        throw new RangeError(`unknown clustering method: ${method}`);\n    }\n  } else if (typeof method !== 'function') {\n    throw new TypeError('method must be a string or function');\n  }\n\n  let clusters = [];\n  for (let i = 0; i < numLeaves; i++) {\n    const cluster = new Cluster();\n    cluster.isLeaf = true;\n    cluster.index = i;\n    clusters.push(cluster);\n  }\n\n  for (let n = 0; n < numLeaves - 1; n++) {\n    const [row, column, distance] = getSmallestDistance(distanceMatrix);\n    const cluster1 = clusters[row];\n    const cluster2 = clusters[column];\n    const newCluster = new Cluster();\n    newCluster.size = cluster1.size + cluster2.size;\n    newCluster.children.push(cluster1, cluster2);\n    newCluster.height = distance;\n\n    const newClusters = [newCluster];\n    const newDistanceMatrix = new Matrix(\n      distanceMatrix.rows - 1,\n      distanceMatrix.rows - 1,\n    );\n    const previous = (newIndex) =>\n      getPreviousIndex(newIndex, Math.min(row, column), Math.max(row, column));\n\n    for (let i = 1; i < newDistanceMatrix.rows; i++) {\n      const prevI = previous(i);\n      const prevICluster = clusters[prevI];\n      newClusters.push(prevICluster);\n      for (let j = 0; j < i; j++) {\n        if (j === 0) {\n          const dKI = distanceMatrix.get(row, prevI);\n          const dKJ = distanceMatrix.get(prevI, column);\n          const val = updateFunc(\n            dKI,\n            dKJ,\n            distance,\n            cluster1.size,\n            cluster2.size,\n            prevICluster.size,\n          );\n          newDistanceMatrix.set(i, j, val);\n          newDistanceMatrix.set(j, i, val);\n        } else {\n          // Just copy distance from previous matrix\n          const val = distanceMatrix.get(prevI, previous(j));\n          newDistanceMatrix.set(i, j, val);\n          newDistanceMatrix.set(j, i, val);\n        }\n      }\n    }\n\n    clusters = newClusters;\n    distanceMatrix = newDistanceMatrix;\n  }\n\n  return clusters[0];\n}\n\nfunction getSmallestDistance(distance) {\n  let smallest = Infinity;\n  let smallestI = 0;\n  let smallestJ = 0;\n  for (let i = 1; i < distance.rows; i++) {\n    for (let j = 0; j < i; j++) {\n      if (distance.get(i, j) < smallest) {\n        smallest = distance.get(i, j);\n        smallestI = i;\n        smallestJ = j;\n      }\n    }\n  }\n  return [smallestI, smallestJ, smallest];\n}\n\nfunction getPreviousIndex(newIndex, prev1, prev2) {\n  newIndex -= 1;\n  if (newIndex >= prev1) newIndex++;\n  if (newIndex >= prev2) newIndex++;\n  return newIndex;\n}\n","'use strict';\nimport { squaredEuclidean } from 'ml-distance-euclidean';\nconst defaultOptions = {\n    distanceFunction: squaredEuclidean\n};\nexport default function nearestVector(listVectors, vector, options = defaultOptions) {\n    const distanceFunction = options.distanceFunction || defaultOptions.distanceFunction;\n    const similarityFunction = options.similarityFunction || defaultOptions.similarityFunction;\n    let vectorIndex = -1;\n    if (typeof similarityFunction === 'function') {\n        // maximum similarity\n        let maxSim = Number.MIN_VALUE;\n        for (let j = 0; j < listVectors.length; j++) {\n            const sim = similarityFunction(vector, listVectors[j]);\n            if (sim > maxSim) {\n                maxSim = sim;\n                vectorIndex = j;\n            }\n        }\n    }\n    else if (typeof distanceFunction === 'function') {\n        // minimum distance\n        let minDist = Number.MAX_VALUE;\n        for (let i = 0; i < listVectors.length; i++) {\n            const dist = distanceFunction(vector, listVectors[i]);\n            if (dist < minDist) {\n                minDist = dist;\n                vectorIndex = i;\n            }\n        }\n    }\n    else {\n        throw new Error(\"A similarity or distance function it's required\");\n    }\n    return vectorIndex;\n}\nexport function findNearestVector(vectorList, vector, options = defaultOptions) {\n    const index = nearestVector(vectorList, vector, options);\n    return vectorList[index];\n}\n","import nearestVector from 'ml-nearest-vector';\n\n/**\n * Calculates the distance matrix for a given array of points\n * @ignore\n * @param {Array<Array<number>>} data - the [x,y,z,...] points to cluster\n * @param {function} distance - Distance function to use between the points\n * @return {Array<Array<number>>} - matrix with the distance values\n */\nexport function calculateDistanceMatrix(data, distance) {\n  var distanceMatrix = new Array(data.length);\n  for (var i = 0; i < data.length; ++i) {\n    for (var j = i; j < data.length; ++j) {\n      if (!distanceMatrix[i]) {\n        distanceMatrix[i] = new Array(data.length);\n      }\n      if (!distanceMatrix[j]) {\n        distanceMatrix[j] = new Array(data.length);\n      }\n      const dist = distance(data[i], data[j]);\n      distanceMatrix[i][j] = dist;\n      distanceMatrix[j][i] = dist;\n    }\n  }\n  return distanceMatrix;\n}\n\n/**\n * Updates the cluster identifier based in the new data\n * @ignore\n * @param {Array<Array<number>>} data - the [x,y,z,...] points to cluster\n * @param {Array<Array<number>>} centers - the K centers in format [x,y,z,...]\n * @param {Array <number>} clusterID - the cluster identifier for each data dot\n * @param {function} distance - Distance function to use between the points\n * @return {Array} the cluster identifier for each data dot\n */\nexport function updateClusterID(data, centers, clusterID, distance) {\n  for (var i = 0; i < data.length; i++) {\n    clusterID[i] = nearestVector(centers, data[i], {\n      distanceFunction: distance\n    });\n  }\n  return clusterID;\n}\n\n/**\n * Update the center values based in the new configurations of the clusters\n * @ignore\n * @param {Array<Array<number>>} prevCenters - Centroids from the previous iteration\n * @param {Array <Array <number>>} data - the [x,y,z,...] points to cluster\n * @param {Array <number>} clusterID - the cluster identifier for each data dot\n * @param {number} K - Number of clusters\n * @return {Array} he K centers in format [x,y,z,...]\n */\nexport function updateCenters(prevCenters, data, clusterID, K) {\n  const nDim = data[0].length;\n\n  // copy previous centers\n  var centers = new Array(K);\n  var centersLen = new Array(K);\n  for (var i = 0; i < K; i++) {\n    centers[i] = new Array(nDim);\n    centersLen[i] = 0;\n    for (var j = 0; j < nDim; j++) {\n      centers[i][j] = 0;\n    }\n  }\n\n  // add the value for all dimensions of the point\n  for (var l = 0; l < data.length; l++) {\n    centersLen[clusterID[l]]++;\n    for (var dim = 0; dim < nDim; dim++) {\n      centers[clusterID[l]][dim] += data[l][dim];\n    }\n  }\n\n  // divides by length\n  for (var id = 0; id < K; id++) {\n    for (var d = 0; d < nDim; d++) {\n      if (centersLen[id]) {\n        centers[id][d] /= centersLen[id];\n      } else {\n        centers[id][d] = prevCenters[id][d];\n      }\n    }\n  }\n  return centers;\n}\n\n/**\n * The centers have moved more than the tolerance value?\n * @ignore\n * @param {Array<Array<number>>} centers - the K centers in format [x,y,z,...]\n * @param {Array<Array<number>>} oldCenters - the K old centers in format [x,y,z,...]\n * @param {function} distanceFunction - Distance function to use between the points\n * @param {number} tolerance - Allowed distance for the centroids to move\n * @return {boolean}\n */\nexport function hasConverged(centers, oldCenters, distanceFunction, tolerance) {\n  for (var i = 0; i < centers.length; i++) {\n    if (distanceFunction(centers[i], oldCenters[i]) > tolerance) {\n      return false;\n    }\n  }\n  return true;\n}\n","const LOOP = 8;\nconst FLOAT_MUL = 1 / 16777216;\nconst sh1 = 15;\nconst sh2 = 18;\nconst sh3 = 11;\nfunction multiply_uint32(n, m) {\n    n >>>= 0;\n    m >>>= 0;\n    const nlo = n & 0xffff;\n    const nhi = n - nlo;\n    return (((nhi * m) >>> 0) + nlo * m) >>> 0;\n}\nexport default class XSadd {\n    constructor(seed = Date.now()) {\n        this.state = new Uint32Array(4);\n        this.init(seed);\n        this.random = this.getFloat.bind(this);\n    }\n    /**\n     * Returns a 32-bit integer r (0 <= r < 2^32)\n     */\n    getUint32() {\n        this.nextState();\n        return (this.state[3] + this.state[2]) >>> 0;\n    }\n    /**\n     * Returns a floating point number r (0.0 <= r < 1.0)\n     */\n    getFloat() {\n        return (this.getUint32() >>> 8) * FLOAT_MUL;\n    }\n    init(seed) {\n        if (!Number.isInteger(seed)) {\n            throw new TypeError('seed must be an integer');\n        }\n        this.state[0] = seed;\n        this.state[1] = 0;\n        this.state[2] = 0;\n        this.state[3] = 0;\n        for (let i = 1; i < LOOP; i++) {\n            this.state[i & 3] ^=\n                (i +\n                    multiply_uint32(1812433253, this.state[(i - 1) & 3] ^ ((this.state[(i - 1) & 3] >>> 30) >>> 0))) >>>\n                    0;\n        }\n        this.periodCertification();\n        for (let i = 0; i < LOOP; i++) {\n            this.nextState();\n        }\n    }\n    periodCertification() {\n        if (this.state[0] === 0 &&\n            this.state[1] === 0 &&\n            this.state[2] === 0 &&\n            this.state[3] === 0) {\n            this.state[0] = 88; // X\n            this.state[1] = 83; // S\n            this.state[2] = 65; // A\n            this.state[3] = 68; // D\n        }\n    }\n    nextState() {\n        let t = this.state[0];\n        t ^= t << sh1;\n        t ^= t >>> sh2;\n        t ^= this.state[3] << sh3;\n        this.state[0] = this.state[1];\n        this.state[1] = this.state[2];\n        this.state[2] = this.state[3];\n        this.state[3] = t;\n    }\n}\n","const PROB_TOLERANCE = 0.00000001;\nfunction randomChoice(values, options = {}, random = Math.random) {\n    const { size = 1, replace = false, probabilities } = options;\n    let valuesArr;\n    let cumSum;\n    if (typeof values === 'number') {\n        valuesArr = getArray(values);\n    }\n    else {\n        valuesArr = values.slice();\n    }\n    if (probabilities) {\n        if (!replace) {\n            throw new Error('choice with probabilities and no replacement is not implemented');\n        }\n        // check input is sane\n        if (probabilities.length !== valuesArr.length) {\n            throw new Error('the length of probabilities option should be equal to the number of choices');\n        }\n        cumSum = [probabilities[0]];\n        for (let i = 1; i < probabilities.length; i++) {\n            cumSum[i] = cumSum[i - 1] + probabilities[i];\n        }\n        if (Math.abs(1 - cumSum[cumSum.length - 1]) > PROB_TOLERANCE) {\n            throw new Error(`probabilities should sum to 1, but instead sums to ${cumSum[cumSum.length - 1]}`);\n        }\n    }\n    if (replace === false && size > valuesArr.length) {\n        throw new Error('size option is too large');\n    }\n    const result = [];\n    for (let i = 0; i < size; i++) {\n        const index = randomIndex(valuesArr.length, random, cumSum);\n        result.push(valuesArr[index]);\n        if (!replace) {\n            valuesArr.splice(index, 1);\n        }\n    }\n    return result;\n}\nfunction getArray(n) {\n    const arr = [];\n    for (let i = 0; i < n; i++) {\n        arr.push(i);\n    }\n    return arr;\n}\nfunction randomIndex(n, random, cumSum) {\n    const rand = random();\n    if (!cumSum) {\n        return Math.floor(rand * n);\n    }\n    else {\n        let idx = 0;\n        while (rand > cumSum[idx]) {\n            idx++;\n        }\n        return idx;\n    }\n}\nexport default randomChoice;\n","// tslint:disable-next-line\nimport XSAdd from 'ml-xsadd';\nimport choice from './choice';\n/**\n * @classdesc Random class\n */\nexport default class Random {\n    /**\n     * @param [seedOrRandom=Math.random] - Control the random number generator used by the Random class instance. Pass a random number generator function with a uniform distribution over the half-open interval [0, 1[. If seed will pass it to ml-xsadd to create a seeded random number generator. If undefined will use Math.random.\n     */\n    constructor(seedOrRandom = Math.random) {\n        if (typeof seedOrRandom === 'number') {\n            const xsadd = new XSAdd(seedOrRandom);\n            this.randomGenerator = xsadd.random;\n        }\n        else {\n            this.randomGenerator = seedOrRandom;\n        }\n    }\n    choice(values, options) {\n        if (typeof values === 'number') {\n            return choice(values, options, this.randomGenerator);\n        }\n        return choice(values, options, this.randomGenerator);\n    }\n    /**\n     * Draw a random number from a uniform distribution on [0,1)\n     * @return The random number\n     */\n    random() {\n        return this.randomGenerator();\n    }\n    /**\n     * Draw a random integer from a uniform distribution on [low, high). If only low is specified, the number is drawn on [0, low)\n     * @param low - The lower bound of the uniform distribution interval.\n     * @param high - The higher bound of the uniform distribution interval.\n     */\n    randInt(low, high) {\n        if (high === undefined) {\n            high = low;\n            low = 0;\n        }\n        return low + Math.floor(this.randomGenerator() * (high - low));\n    }\n    /**\n     * Draw several random number from a uniform distribution on [0, 1)\n     * @param size - The number of number to draw\n     * @return - The list of drawn numbers.\n     */\n    randomSample(size) {\n        const result = [];\n        for (let i = 0; i < size; i++) {\n            result.push(this.random());\n        }\n        return result;\n    }\n}\n","import Random from 'ml-random';\nimport { squaredEuclidean } from 'ml-distance-euclidean';\nimport { Matrix } from 'ml-matrix';\n\n/**\n * Choose K different random points from the original data\n * @ignore\n * @param {Array<Array<number>>} data - Points in the format to cluster [x,y,z,...]\n * @param {number} K - number of clusters\n * @param {number} seed - seed for random number generation\n * @return {Array<Array<number>>} - Initial random points\n */\nexport function random(data, K, seed) {\n  const random = new Random(seed);\n  return random.choice(data, { size: K });\n}\n\n/**\n * Chooses the most distant points to a first random pick\n * @ignore\n * @param {Array<Array<number>>} data - Points in the format to cluster [x,y,z,...]\n * @param {number} K - number of clusters\n * @param {Array<Array<number>>} distanceMatrix - matrix with the distance values\n * @param {number} seed - seed for random number generation\n * @return {Array<Array<number>>} - Initial random points\n */\nexport function mostDistant(data, K, distanceMatrix, seed) {\n  const random = new Random(seed);\n  var ans = new Array(K);\n  // chooses a random point as initial cluster\n  ans[0] = Math.floor(random.random() * data.length);\n\n  if (K > 1) {\n    // chooses the more distant point\n    var maxDist = { dist: -1, index: -1 };\n    for (var l = 0; l < data.length; ++l) {\n      if (distanceMatrix[ans[0]][l] > maxDist.dist) {\n        maxDist.dist = distanceMatrix[ans[0]][l];\n        maxDist.index = l;\n      }\n    }\n    ans[1] = maxDist.index;\n\n    if (K > 2) {\n      // chooses the set of points that maximises the min distance\n      for (var k = 2; k < K; ++k) {\n        var center = { dist: -1, index: -1 };\n        for (var m = 0; m < data.length; ++m) {\n          // minimum distance to centers\n          var minDistCent = { dist: Number.MAX_VALUE, index: -1 };\n          for (var n = 0; n < k; ++n) {\n            if (\n              distanceMatrix[n][m] < minDistCent.dist &&\n              ans.indexOf(m) === -1\n            ) {\n              minDistCent = {\n                dist: distanceMatrix[n][m],\n                index: m\n              };\n            }\n          }\n\n          if (\n            minDistCent.dist !== Number.MAX_VALUE &&\n            minDistCent.dist > center.dist\n          ) {\n            center = Object.assign({}, minDistCent);\n          }\n        }\n\n        ans[k] = center.index;\n      }\n    }\n  }\n\n  return ans.map((index) => data[index]);\n}\n\n// Implementation inspired from scikit\nexport function kmeanspp(X, K, options = {}) {\n  X = new Matrix(X);\n  const nSamples = X.rows;\n  const random = new Random(options.seed);\n  // Set the number of trials\n  const centers = [];\n  const localTrials = options.localTrials || 2 + Math.floor(Math.log(K));\n\n  // Pick the first center at random from the dataset\n  const firstCenterIdx = random.randInt(nSamples);\n  centers.push(X.getRow(firstCenterIdx));\n\n  // Init closest distances\n  let closestDistSquared = new Matrix(1, X.rows);\n  for (let i = 0; i < X.rows; i++) {\n    closestDistSquared.set(0, i, squaredEuclidean(X.getRow(i), centers[0]));\n  }\n  let cumSumClosestDistSquared = [cumSum(closestDistSquared.getRow(0))];\n  const factor = 1 / cumSumClosestDistSquared[0][nSamples - 1];\n  let probabilities = Matrix.mul(closestDistSquared, factor);\n\n  // Iterate over the remaining centers\n  for (let i = 1; i < K; i++) {\n    const candidateIdx = random.choice(nSamples, {\n      replace: true,\n      size: localTrials,\n      probabilities: probabilities[0]\n    });\n\n    const candidates = X.selection(candidateIdx, range(X.columns));\n    const distanceToCandidates = euclideanDistances(candidates, X);\n\n    let bestCandidate;\n    let bestPot;\n    let bestDistSquared;\n\n    for (let j = 0; j < localTrials; j++) {\n      const newDistSquared = Matrix.min(closestDistSquared, [distanceToCandidates.getRow(j)]);\n      const newPot = newDistSquared.sum();\n      if (bestCandidate === undefined || newPot < bestPot) {\n        bestCandidate = candidateIdx[j];\n        bestPot = newPot;\n        bestDistSquared = newDistSquared;\n      }\n    }\n    centers[i] = X.getRow(bestCandidate);\n    closestDistSquared = bestDistSquared;\n    cumSumClosestDistSquared = [cumSum(closestDistSquared.getRow(0))];\n    probabilities = Matrix.mul(\n      closestDistSquared,\n      1 / cumSumClosestDistSquared[0][nSamples - 1]\n    );\n  }\n  return centers;\n}\n\nfunction euclideanDistances(A, B) {\n  const result = new Matrix(A.rows, B.rows);\n  for (let i = 0; i < A.rows; i++) {\n    for (let j = 0; j < B.rows; j++) {\n      result.set(i, j, squaredEuclidean(A.getRow(i), B.getRow(j)));\n    }\n  }\n  return result;\n}\n\nfunction range(l) {\n  let r = [];\n  for (let i = 0; i < l; i++) {\n    r.push(i);\n  }\n  return r;\n}\n\nfunction cumSum(arr) {\n  let cumSum = [arr[0]];\n  for (let i = 1; i < arr.length; i++) {\n    cumSum[i] = cumSum[i - 1] + arr[i];\n  }\n  return cumSum;\n}\n","import { updateClusterID } from './utils';\n\nconst distanceSymbol = Symbol('distance');\n\nexport default class KMeansResult {\n  /**\n   * Result of the kmeans algorithm\n   * @param {Array<number>} clusters - the cluster identifier for each data dot\n   * @param {Array<Array<object>>} centroids - the K centers in format [x,y,z,...], the error and size of the cluster\n   * @param {boolean} converged - Converge criteria satisfied\n   * @param {number} iterations - Current number of iterations\n   * @param {function} distance - (*Private*) Distance function to use between the points\n   * @constructor\n   */\n  constructor(clusters, centroids, converged, iterations, distance) {\n    this.clusters = clusters;\n    this.centroids = centroids;\n    this.converged = converged;\n    this.iterations = iterations;\n    this[distanceSymbol] = distance;\n  }\n\n  /**\n   * Allows to compute for a new array of points their cluster id\n   * @param {Array<Array<number>>} data - the [x,y,z,...] points to cluster\n   * @return {Array<number>} - cluster id for each point\n   */\n  nearest(data) {\n    const clusterID = new Array(data.length);\n    const centroids = this.centroids.map(function (centroid) {\n      return centroid.centroid;\n    });\n    return updateClusterID(data, centroids, clusterID, this[distanceSymbol]);\n  }\n\n  /**\n   * Returns a KMeansResult with the error and size of the cluster\n   * @ignore\n   * @param {Array<Array<number>>} data - the [x,y,z,...] points to cluster\n   * @return {KMeansResult}\n   */\n  computeInformation(data) {\n    var enrichedCentroids = this.centroids.map(function (centroid) {\n      return {\n        centroid: centroid,\n        error: 0,\n        size: 0\n      };\n    });\n\n    for (var i = 0; i < data.length; i++) {\n      enrichedCentroids[this.clusters[i]].error += this[distanceSymbol](\n        data[i],\n        this.centroids[this.clusters[i]]\n      );\n      enrichedCentroids[this.clusters[i]].size++;\n    }\n\n    for (var j = 0; j < this.centroids.length; j++) {\n      if (enrichedCentroids[j].size) {\n        enrichedCentroids[j].error /= enrichedCentroids[j].size;\n      } else {\n        enrichedCentroids[j].error = null;\n      }\n    }\n\n    return new KMeansResult(\n      this.clusters,\n      enrichedCentroids,\n      this.converged,\n      this.iterations,\n      this[distanceSymbol]\n    );\n  }\n}\n","import { squaredEuclidean } from 'ml-distance-euclidean';\n\nimport {\n  updateClusterID,\n  updateCenters,\n  hasConverged,\n  calculateDistanceMatrix\n} from './utils';\nimport { mostDistant, random, kmeanspp } from './initialization';\nimport KMeansResult from './KMeansResult';\n\nconst defaultOptions = {\n  maxIterations: 100,\n  tolerance: 1e-6,\n  withIterations: false,\n  initialization: 'kmeans++',\n  distanceFunction: squaredEuclidean\n};\n\n/**\n * Each step operation for kmeans\n * @ignore\n * @param {Array<Array<number>>} centers - K centers in format [x,y,z,...]\n * @param {Array<Array<number>>} data - Points [x,y,z,...] to cluster\n * @param {Array<number>} clusterID - Cluster identifier for each data dot\n * @param {number} K - Number of clusters\n * @param {object} [options] - Option object\n * @param {number} iterations - Current number of iterations\n * @return {KMeansResult}\n */\nfunction step(centers, data, clusterID, K, options, iterations) {\n  clusterID = updateClusterID(\n    data,\n    centers,\n    clusterID,\n    options.distanceFunction\n  );\n  var newCenters = updateCenters(centers, data, clusterID, K);\n  var converged = hasConverged(\n    newCenters,\n    centers,\n    options.distanceFunction,\n    options.tolerance\n  );\n  return new KMeansResult(\n    clusterID,\n    newCenters,\n    converged,\n    iterations,\n    options.distanceFunction\n  );\n}\n\n/**\n * Generator version for the algorithm\n * @ignore\n * @param {Array<Array<number>>} centers - K centers in format [x,y,z,...]\n * @param {Array<Array<number>>} data - Points [x,y,z,...] to cluster\n * @param {Array<number>} clusterID - Cluster identifier for each data dot\n * @param {number} K - Number of clusters\n * @param {object} [options] - Option object\n */\nfunction* kmeansGenerator(centers, data, clusterID, K, options) {\n  var converged = false;\n  var stepNumber = 0;\n  var stepResult;\n  while (!converged && stepNumber < options.maxIterations) {\n    stepResult = step(centers, data, clusterID, K, options, ++stepNumber);\n    yield stepResult.computeInformation(data);\n    converged = stepResult.converged;\n    centers = stepResult.centroids;\n  }\n}\n\n/**\n * K-means algorithm\n * @param {Array<Array<number>>} data - Points in the format to cluster [x,y,z,...]\n * @param {number} K - Number of clusters\n * @param {object} [options] - Option object\n * @param {number} [options.maxIterations = 100] - Maximum of iterations allowed\n * @param {number} [options.tolerance = 1e-6] - Error tolerance\n * @param {boolean} [options.withIterations = false] - Store clusters and centroids for each iteration\n * @param {function} [options.distanceFunction = squaredDistance] - Distance function to use between the points\n * @param {number} [options.seed] - Seed for random initialization.\n * @param {string|Array<Array<number>>} [options.initialization = 'kmeans++'] - K centers in format [x,y,z,...] or a method for initialize the data:\n *  * You can either specify your custom start centroids, or select one of the following initialization method:\n *  * `'kmeans++'` will use the kmeans++ method as described by http://ilpubs.stanford.edu:8090/778/1/2006-13.pdf\n *  * `'random'` will choose K random different values.\n *  * `'mostDistant'` will choose the more distant points to a first random pick\n * @return {KMeansResult} - Cluster identifier for each data dot and centroids with the following fields:\n *  * `'clusters'`: Array of indexes for the clusters.\n *  * `'centroids'`: Array with the resulting centroids.\n *  * `'iterations'`: Number of iterations that took to converge\n */\nexport default function kmeans(data, K, options) {\n  options = Object.assign({}, defaultOptions, options);\n\n  if (K <= 0 || K > data.length || !Number.isInteger(K)) {\n    throw new Error(\n      'K should be a positive integer smaller than the number of points'\n    );\n  }\n\n  var centers;\n  if (Array.isArray(options.initialization)) {\n    if (options.initialization.length !== K) {\n      throw new Error('The initial centers should have the same length as K');\n    } else {\n      centers = options.initialization;\n    }\n  } else {\n    switch (options.initialization) {\n      case 'kmeans++':\n        centers = kmeanspp(data, K, options);\n        break;\n      case 'random':\n        centers = random(data, K, options.seed);\n        break;\n      case 'mostDistant':\n        centers = mostDistant(\n          data,\n          K,\n          calculateDistanceMatrix(data, options.distanceFunction),\n          options.seed\n        );\n        break;\n      default:\n        throw new Error(\n          `Unknown initialization method: \"${options.initialization}\"`\n        );\n    }\n  }\n\n  // infinite loop until convergence\n  if (options.maxIterations === 0) {\n    options.maxIterations = Number.MAX_VALUE;\n  }\n\n  var clusterID = new Array(data.length);\n  if (options.withIterations) {\n    return kmeansGenerator(centers, data, clusterID, K, options);\n  } else {\n    var converged = false;\n    var stepNumber = 0;\n    var stepResult;\n    while (!converged && stepNumber < options.maxIterations) {\n      stepResult = step(centers, data, clusterID, K, options, ++stepNumber);\n      converged = stepResult.converged;\n      centers = stepResult.centroids;\n    }\n    return stepResult.computeInformation(data);\n  }\n}\n","import Matrix from 'ml-matrix';\n\n/**\n * @private\n * Function that retuns an array of matrices of the cases that belong to each class.\n * @param {Matrix} X - dataset\n * @param {Array} y - predictions\n * @return {Array}\n */\nexport function separateClasses(X, y) {\n  var features = X.columns;\n\n  var classes = 0;\n  var totalPerClasses = new Array(10000); // max upperbound of classes\n  for (var i = 0; i < y.length; i++) {\n    if (totalPerClasses[y[i]] === undefined) {\n      totalPerClasses[y[i]] = 0;\n      classes++;\n    }\n    totalPerClasses[y[i]]++;\n  }\n  var separatedClasses = new Array(classes);\n  var currentIndex = new Array(classes);\n  for (i = 0; i < classes; ++i) {\n    separatedClasses[i] = new Matrix(totalPerClasses[i], features);\n    currentIndex[i] = 0;\n  }\n  for (i = 0; i < X.rows; ++i) {\n    separatedClasses[y[i]].setRow(currentIndex[y[i]], X.getRow(i));\n    currentIndex[y[i]]++;\n  }\n  return separatedClasses;\n}\n","import { Matrix } from 'ml-matrix';\n\nimport { separateClasses } from './utils';\n\nexport class GaussianNB {\n  /**\n   * Constructor for the Gaussian Naive Bayes classifier, the parameters here is just for loading purposes.\n   * @constructor\n   * @param {boolean} reload\n   * @param {object} model\n   */\n  constructor(reload, model) {\n    if (reload) {\n      this.means = model.means;\n      this.calculateProbabilities = model.calculateProbabilities;\n    }\n  }\n\n  /**\n   * Function that trains the classifier with a matrix that represents the training set and an array that\n   * represents the label of each row in the training set. the labels must be numbers between 0 to n-1 where\n   * n represents the number of classes.\n   *\n   * WARNING: in the case that one class, all the cases in one or more features have the same value, the\n   * Naive Bayes classifier will not work well.\n   * @param {Matrix|Array} trainingSet\n   * @param {Matrix|Array} trainingLabels\n   */\n  train(trainingSet, trainingLabels) {\n    var C1 = Math.sqrt(2 * Math.PI); // constant to precalculate the squared root\n    trainingSet = Matrix.checkMatrix(trainingSet);\n\n    if (trainingSet.rows !== trainingLabels.length) {\n      throw new RangeError(\n        'the size of the training set and the training labels must be the same.'\n      );\n    }\n\n    var separatedClasses = separateClasses(trainingSet, trainingLabels);\n    var calculateProbabilities = new Array(separatedClasses.length);\n    this.means = new Array(separatedClasses.length);\n    for (var i = 0; i < separatedClasses.length; ++i) {\n      var means = separatedClasses[i].mean('column');\n      var std = separatedClasses[i].standardDeviation('column', {\n        mean: means\n      });\n\n      var logPriorProbability = Math.log(\n        separatedClasses[i].rows / trainingSet.rows\n      );\n      calculateProbabilities[i] = new Array(means.length + 1);\n\n      calculateProbabilities[i][0] = logPriorProbability;\n      for (var j = 1; j < means.length + 1; ++j) {\n        var currentStd = std[j - 1];\n        calculateProbabilities[i][j] = [\n          1 / (C1 * currentStd),\n          -2 * currentStd * currentStd\n        ];\n      }\n\n      this.means[i] = means;\n    }\n\n    this.calculateProbabilities = calculateProbabilities;\n  }\n\n  /**\n   * function that predicts each row of the dataset (must be a matrix).\n   *\n   * @param {Matrix|Array} dataset\n   * @return {Array}\n   */\n  predict(dataset) {\n    dataset = Matrix.checkMatrix(dataset);\n    if (dataset.rows === this.calculateProbabilities[0].length) {\n      throw new RangeError(\n        'the dataset must have the same features as the training set'\n      );\n    }\n\n    var predictions = new Array(dataset.rows);\n\n    for (var i = 0; i < predictions.length; ++i) {\n      predictions[i] = getCurrentClass(\n        dataset.getRow(i),\n        this.means,\n        this.calculateProbabilities\n      );\n    }\n\n    return predictions;\n  }\n\n  /**\n   * Function that export the NaiveBayes model.\n   * @return {object}\n   */\n  toJSON() {\n    return {\n      modelName: 'NaiveBayes',\n      means: this.means,\n      calculateProbabilities: this.calculateProbabilities\n    };\n  }\n\n  /**\n   * Function that create a GaussianNB classifier with the given model.\n   * @param {object} model\n   * @return {GaussianNB}\n   */\n  static load(model) {\n    if (model.modelName !== 'NaiveBayes') {\n      throw new RangeError(\n        'The current model is not a Multinomial Naive Bayes, current model:',\n        model.name\n      );\n    }\n\n    return new GaussianNB(true, model);\n  }\n}\n\n/**\n * @private\n * Function the retrieves a prediction with one case.\n *\n * @param {Array} currentCase\n * @param {Array} mean - Precalculated means of each class trained\n * @param {Array} classes - Precalculated value of each class (Prior probability and probability function of each feature)\n * @return {number}\n */\nfunction getCurrentClass(currentCase, mean, classes) {\n  var maxProbability = 0;\n  var predictedClass = -1;\n\n  // going through all precalculated values for the classes\n  for (var i = 0; i < classes.length; ++i) {\n    var currentProbability = classes[i][0]; // initialize with the prior probability\n    for (var j = 1; j < classes[0][1].length + 1; ++j) {\n      currentProbability += calculateLogProbability(\n        currentCase[j - 1],\n        mean[i][j - 1],\n        classes[i][j][0],\n        classes[i][j][1]\n      );\n    }\n\n    currentProbability = Math.exp(currentProbability);\n    if (currentProbability > maxProbability) {\n      maxProbability = currentProbability;\n      predictedClass = i;\n    }\n  }\n\n  return predictedClass;\n}\n\n/**\n * @private\n * function that retrieves the probability of the feature given the class.\n * @param {number} value - value of the feature.\n * @param {number} mean - mean of the feature for the given class.\n * @param {number} C1 - precalculated value of (1 / (sqrt(2*pi) * std)).\n * @param {number} C2 - precalculated value of (2 * std^2) for the denominator of the exponential.\n * @return {number}\n */\nfunction calculateLogProbability(value, mean, C1, C2) {\n  value = value - mean;\n  return Math.log(C1 * Math.exp((value * value) / C2));\n}\n","import { Matrix } from 'ml-matrix';\n\nimport { separateClasses } from './utils';\n\nexport class MultinomialNB {\n  /**\n   * Constructor for Multinomial Naive Bayes, the model parameter is for load purposes.\n   * @constructor\n   * @param {object} model - for load purposes.\n   */\n  constructor(model) {\n    if (model) {\n      this.conditionalProbability = Matrix.checkMatrix(\n        model.conditionalProbability\n      );\n      this.priorProbability = Matrix.checkMatrix(model.priorProbability);\n    }\n  }\n\n  /**\n   * Train the classifier with the current training set and labels, the labels must be numbers between 0 and n.\n   * @param {Matrix|Array} trainingSet\n   * @param {Array} trainingLabels\n   */\n  train(trainingSet, trainingLabels) {\n    trainingSet = Matrix.checkMatrix(trainingSet);\n\n    if (trainingSet.rows !== trainingLabels.length) {\n      throw new RangeError(\n        'the size of the training set and the training labels must be the same.'\n      );\n    }\n\n    var separateClass = separateClasses(trainingSet, trainingLabels);\n\n    this.priorProbability = new Matrix(separateClass.length, 1);\n\n    for (var i = 0; i < separateClass.length; ++i) {\n      this.priorProbability.set(i, 0, Math.log(\n        separateClass[i].rows / trainingSet.rows\n      ));\n    }\n\n    var features = trainingSet.columns;\n    this.conditionalProbability = new Matrix(separateClass.length, features);\n    for (i = 0; i < separateClass.length; ++i) {\n      var classValues = Matrix.checkMatrix(separateClass[i]);\n      var total = classValues.sum();\n      var divisor = total + features;\n      this.conditionalProbability.setRow(\n        i,\n        Matrix.rowVector(classValues\n          .sum('column'))\n          .add(1)\n          .div(divisor)\n          .apply(matrixLog)\n      );\n    }\n  }\n\n  /**\n   * Retrieves the predictions for the dataset with the current model.\n   * @param {Matrix|Array} dataset\n   * @return {Array} - predictions from the dataset.\n   */\n  predict(dataset) {\n    dataset = Matrix.checkMatrix(dataset);\n    var predictions = new Array(dataset.rows);\n    for (var i = 0; i < dataset.rows; ++i) {\n      var currentElement = dataset.getRowVector(i);\n      const v = Matrix.columnVector(this.conditionalProbability\n        .clone()\n        .mulRowVector(currentElement)\n        .sum('row'));\n      predictions[i] = v\n        .add(this.priorProbability)\n        .maxIndex()[0];\n    }\n\n    return predictions;\n  }\n\n  /**\n   * Function that saves the current model.\n   * @return {object} - model in JSON format.\n   */\n  toJSON() {\n    return {\n      name: 'MultinomialNB',\n      priorProbability: this.priorProbability,\n      conditionalProbability: this.conditionalProbability\n    };\n  }\n\n  /**\n   * Creates a new MultinomialNB from the given model\n   * @param {object} model\n   * @return {MultinomialNB}\n   */\n  static load(model) {\n    if (model.name !== 'MultinomialNB') {\n      throw new RangeError(`${model.name} is not a Multinomial Naive Bayes`);\n    }\n\n    return new MultinomialNB(model);\n  }\n}\n\nfunction matrixLog(i, j) {\n  this.set(i, j, Math.log(this.get(i, j)));\n}\n","/*\n * Original code from:\n *\n * k-d Tree JavaScript - V 1.01\n *\n * https://github.com/ubilabs/kd-tree-javascript\n *\n * @author Mircea Pricop <pricop@ubilabs.net>, 2012\n * @author Martin Kleppe <kleppe@ubilabs.net>, 2012\n * @author Ubilabs http://ubilabs.net, 2012\n * @license MIT License <http://www.opensource.org/licenses/mit-license.php>\n */\n\nfunction Node(obj, dimension, parent) {\n  this.obj = obj;\n  this.left = null;\n  this.right = null;\n  this.parent = parent;\n  this.dimension = dimension;\n}\n\nexport default class KDTree {\n  constructor(points, metric) {\n    // If points is not an array, assume we're loading a pre-built tree\n    if (!Array.isArray(points)) {\n      this.dimensions = points.dimensions;\n      this.root = points;\n      restoreParent(this.root);\n    } else {\n      this.dimensions = new Array(points[0].length);\n      for (var i = 0; i < this.dimensions.length; i++) {\n        this.dimensions[i] = i;\n      }\n      this.root = buildTree(points, 0, null, this.dimensions);\n    }\n    this.metric = metric;\n  }\n\n  // Convert to a JSON serializable structure; this just requires removing\n  // the `parent` property\n  toJSON() {\n    const result = toJSONImpl(this.root, true);\n    result.dimensions = this.dimensions;\n    return result;\n  }\n\n  nearest(point, maxNodes, maxDistance) {\n    const metric = this.metric;\n    const dimensions = this.dimensions;\n    var i;\n\n    const bestNodes = new BinaryHeap(function (e) {\n      return -e[1];\n    });\n\n    function nearestSearch(node) {\n      const dimension = dimensions[node.dimension];\n      const ownDistance = metric(point, node.obj);\n      const linearPoint = {};\n      var bestChild, linearDistance, otherChild, i;\n\n      function saveNode(node, distance) {\n        bestNodes.push([node, distance]);\n        if (bestNodes.size() > maxNodes) {\n          bestNodes.pop();\n        }\n      }\n\n      for (i = 0; i < dimensions.length; i += 1) {\n        if (i === node.dimension) {\n          linearPoint[dimensions[i]] = point[dimensions[i]];\n        } else {\n          linearPoint[dimensions[i]] = node.obj[dimensions[i]];\n        }\n      }\n\n      linearDistance = metric(linearPoint, node.obj);\n\n      if (node.right === null && node.left === null) {\n        if (bestNodes.size() < maxNodes || ownDistance < bestNodes.peek()[1]) {\n          saveNode(node, ownDistance);\n        }\n        return;\n      }\n\n      if (node.right === null) {\n        bestChild = node.left;\n      } else if (node.left === null) {\n        bestChild = node.right;\n      } else {\n        if (point[dimension] < node.obj[dimension]) {\n          bestChild = node.left;\n        } else {\n          bestChild = node.right;\n        }\n      }\n\n      nearestSearch(bestChild);\n\n      if (bestNodes.size() < maxNodes || ownDistance < bestNodes.peek()[1]) {\n        saveNode(node, ownDistance);\n      }\n\n      if (\n        bestNodes.size() < maxNodes ||\n        Math.abs(linearDistance) < bestNodes.peek()[1]\n      ) {\n        if (bestChild === node.left) {\n          otherChild = node.right;\n        } else {\n          otherChild = node.left;\n        }\n        if (otherChild !== null) {\n          nearestSearch(otherChild);\n        }\n      }\n    }\n\n    if (maxDistance) {\n      for (i = 0; i < maxNodes; i += 1) {\n        bestNodes.push([null, maxDistance]);\n      }\n    }\n\n    if (this.root) {\n      nearestSearch(this.root);\n    }\n\n    const result = [];\n    for (i = 0; i < Math.min(maxNodes, bestNodes.content.length); i += 1) {\n      if (bestNodes.content[i][0]) {\n        result.push([bestNodes.content[i][0].obj, bestNodes.content[i][1]]);\n      }\n    }\n    return result;\n  }\n}\n\nfunction toJSONImpl(src) {\n  const dest = new Node(src.obj, src.dimension, null);\n  if (src.left) dest.left = toJSONImpl(src.left);\n  if (src.right) dest.right = toJSONImpl(src.right);\n  return dest;\n}\n\nfunction buildTree(points, depth, parent, dimensions) {\n  const dim = depth % dimensions.length;\n\n  if (points.length === 0) {\n    return null;\n  }\n  if (points.length === 1) {\n    return new Node(points[0], dim, parent);\n  }\n\n  points.sort((a, b) => a[dimensions[dim]] - b[dimensions[dim]]);\n\n  const median = Math.floor(points.length / 2);\n  const node = new Node(points[median], dim, parent);\n  node.left = buildTree(points.slice(0, median), depth + 1, node, dimensions);\n  node.right = buildTree(points.slice(median + 1), depth + 1, node, dimensions);\n\n  return node;\n}\n\nfunction restoreParent(root) {\n  if (root.left) {\n    root.left.parent = root;\n    restoreParent(root.left);\n  }\n\n  if (root.right) {\n    root.right.parent = root;\n    restoreParent(root.right);\n  }\n}\n\n// Binary heap implementation from:\n// http://eloquentjavascript.net/appendix2.html\nclass BinaryHeap {\n  constructor(scoreFunction) {\n    this.content = [];\n    this.scoreFunction = scoreFunction;\n  }\n\n  push(element) {\n    // Add the new element to the end of the array.\n    this.content.push(element);\n    // Allow it to bubble up.\n    this.bubbleUp(this.content.length - 1);\n  }\n\n  pop() {\n    // Store the first element so we can return it later.\n    var result = this.content[0];\n    // Get the element at the end of the array.\n    var end = this.content.pop();\n    // If there are any elements left, put the end element at the\n    // start, and let it sink down.\n    if (this.content.length > 0) {\n      this.content[0] = end;\n      this.sinkDown(0);\n    }\n    return result;\n  }\n\n  peek() {\n    return this.content[0];\n  }\n\n  size() {\n    return this.content.length;\n  }\n\n  bubbleUp(n) {\n    // Fetch the element that has to be moved.\n    var element = this.content[n];\n    // When at 0, an element can not go up any further.\n    while (n > 0) {\n      // Compute the parent element's index, and fetch it.\n      const parentN = Math.floor((n + 1) / 2) - 1;\n      const parent = this.content[parentN];\n      // Swap the elements if the parent is greater.\n      if (this.scoreFunction(element) < this.scoreFunction(parent)) {\n        this.content[parentN] = element;\n        this.content[n] = parent;\n        // Update 'n' to continue at the new position.\n        n = parentN;\n      } else {\n        // Found a parent that is less, no need to move it further.\n        break;\n      }\n    }\n  }\n\n  sinkDown(n) {\n    // Look up the target element and its score.\n    var length = this.content.length;\n    var element = this.content[n];\n    var elemScore = this.scoreFunction(element);\n\n    while (true) {\n      // Compute the indices of the child elements.\n      var child2N = (n + 1) * 2;\n      var child1N = child2N - 1;\n      // This is used to store the new position of the element,\n      // if any.\n      var swap = null;\n      // If the first child exists (is inside the array)...\n      if (child1N < length) {\n        // Look it up and compute its score.\n        var child1 = this.content[child1N];\n        var child1Score = this.scoreFunction(child1);\n        // If the score is less than our element's, we need to swap.\n        if (child1Score < elemScore) {\n          swap = child1N;\n        }\n      }\n      // Do the same checks for the other child.\n      if (child2N < length) {\n        var child2 = this.content[child2N];\n        var child2Score = this.scoreFunction(child2);\n        if (child2Score < (swap === null ? elemScore : child1Score)) {\n          swap = child2N;\n        }\n      }\n\n      // If the element needs to be moved, swap it, and continue.\n      if (swap !== null) {\n        this.content[n] = this.content[swap];\n        this.content[swap] = element;\n        n = swap;\n      } else {\n        // Otherwise, we are done.\n        break;\n      }\n    }\n  }\n}\n","import { euclidean as euclideanDistance } from 'ml-distance-euclidean';\n\nimport KDTree from './KDTree';\n\nexport default class KNN {\n  /**\n   * @param {Array} dataset\n   * @param {Array} labels\n   * @param {object} options\n   * @param {number} [options.k=numberOfClasses + 1] - Number of neighbors to classify.\n   * @param {function} [options.distance=euclideanDistance] - Distance function that takes two parameters.\n   */\n  constructor(dataset, labels, options = {}) {\n    if (dataset === true) {\n      const model = labels;\n      this.kdTree = new KDTree(model.kdTree, options);\n      this.k = model.k;\n      this.classes = new Set(model.classes);\n      this.isEuclidean = model.isEuclidean;\n      return;\n    }\n\n    const classes = new Set(labels);\n\n    const { distance = euclideanDistance, k = classes.size + 1 } = options;\n\n    const points = new Array(dataset.length);\n    for (var i = 0; i < points.length; ++i) {\n      points[i] = dataset[i].slice();\n    }\n\n    for (i = 0; i < labels.length; ++i) {\n      points[i].push(labels[i]);\n    }\n\n    this.kdTree = new KDTree(points, distance);\n    this.k = k;\n    this.classes = classes;\n    this.isEuclidean = distance === euclideanDistance;\n  }\n\n  /**\n   * Create a new KNN instance with the given model.\n   * @param {object} model\n   * @param {function} distance=euclideanDistance - distance function must be provided if the model wasn't trained with euclidean distance.\n   * @return {KNN}\n   */\n  static load(model, distance = euclideanDistance) {\n    if (model.name !== 'KNN') {\n      throw new Error(`invalid model: ${model.name}`);\n    }\n    if (!model.isEuclidean && distance === euclideanDistance) {\n      throw new Error(\n        'a custom distance function was used to create the model. Please provide it again'\n      );\n    }\n    if (model.isEuclidean && distance !== euclideanDistance) {\n      throw new Error(\n        'the model was created with the default distance function. Do not load it with another one'\n      );\n    }\n    return new KNN(true, model, distance);\n  }\n\n  /**\n   * Return a JSON containing the kd-tree model.\n   * @return {object} JSON KNN model.\n   */\n  toJSON() {\n    return {\n      name: 'KNN',\n      kdTree: this.kdTree,\n      k: this.k,\n      classes: Array.from(this.classes),\n      isEuclidean: this.isEuclidean\n    };\n  }\n\n  /**\n   * Predicts the output given the matrix to predict.\n   * @param {Array} dataset\n   * @return {Array} predictions\n   */\n  predict(dataset) {\n    if (Array.isArray(dataset)) {\n      if (typeof dataset[0] === 'number') {\n        return getSinglePrediction(this, dataset);\n      } else if (\n        Array.isArray(dataset[0]) &&\n        typeof dataset[0][0] === 'number'\n      ) {\n        const predictions = new Array(dataset.length);\n        for (var i = 0; i < dataset.length; i++) {\n          predictions[i] = getSinglePrediction(this, dataset[i]);\n        }\n        return predictions;\n      }\n    }\n    throw new TypeError('dataset to predict must be an array or a matrix');\n  }\n}\n\nfunction getSinglePrediction(knn, currentCase) {\n  var nearestPoints = knn.kdTree.nearest(currentCase, knn.k);\n  var pointsPerClass = {};\n  var predictedClass = -1;\n  var maxPoints = -1;\n  var lastElement = nearestPoints[0][0].length - 1;\n\n  for (var element of knn.classes) {\n    pointsPerClass[element] = 0;\n  }\n\n  for (var i = 0; i < nearestPoints.length; ++i) {\n    var currentClass = nearestPoints[i][0][lastElement];\n    var currentPoints = ++pointsPerClass[currentClass];\n    if (currentPoints > maxPoints) {\n      predictedClass = currentClass;\n      maxPoints = currentPoints;\n    }\n  }\n\n  return predictedClass;\n}\n","import Matrix from 'ml-matrix';\n\n/**\n * @private\n * Function that given vector, returns its norm\n * @param {Vector} X\n * @return {number} Norm of the vector\n */\nexport function norm(X) {\n  return Math.sqrt(\n    X.clone()\n      .apply(pow2array)\n      .sum(),\n  );\n}\n\n/**\n * @private\n * Function that pow 2 each element of a Matrix or a Vector,\n * used in the apply method of the Matrix object\n * @param {number} i - index i.\n * @param {number} j - index j.\n * @return {Matrix} The Matrix object modified at the index i, j.\n * */\nexport function pow2array(i, j) {\n  this.set(i, j, this.get(i, j) ** 2);\n}\n\n/**\n * @private\n * Function that normalize the dataset and return the means and\n * standard deviation of each feature.\n * @param {Matrix} dataset\n * @return {object} dataset normalized, means and standard deviations\n */\nexport function featureNormalize(dataset) {\n  let means = dataset.mean('column');\n  let std = dataset.standardDeviation('column', {\n    mean: means,\n    unbiased: true,\n  });\n  let result = Matrix.checkMatrix(dataset).subRowVector(means);\n  return { result: result.divRowVector(std), means: means, std: std };\n}\n\n/**\n * @private\n * Function that initialize an array of matrices.\n * @param {Array} array\n * @param {boolean} isMatrix\n * @return {Array} array with the matrices initialized.\n */\nexport function initializeMatrices(array, isMatrix) {\n  if (isMatrix) {\n    for (let i = 0; i < array.length; ++i) {\n      for (let j = 0; j < array[i].length; ++j) {\n        let elem = array[i][j];\n        array[i][j] = elem !== null ? new Matrix(array[i][j]) : undefined;\n      }\n    }\n  } else {\n    for (let i = 0; i < array.length; ++i) {\n      array[i] = new Matrix(array[i]);\n    }\n  }\n\n  return array;\n}\n","import Matrix from 'ml-matrix';\n\nimport * as Utils from './util/utils';\n\n/**\n * @class PLS\n */\nexport class PLS {\n  /**\n   * Constructor for Partial Least Squares (PLS)\n   * @param {object} options\n   * @param {number} [options.latentVectors] - Number of latent vector to get (if the algorithm doesn't find a good model below the tolerance)\n   * @param {number} [options.tolerance=1e-5]\n   * @param {boolean} [options.scale=true] - rescale dataset using mean.\n   * @param {object} model - for load purposes.\n   */\n  constructor(options, model) {\n    if (options === true) {\n      this.meanX = model.meanX;\n      this.stdDevX = model.stdDevX;\n      this.meanY = model.meanY;\n      this.stdDevY = model.stdDevY;\n      this.PBQ = Matrix.checkMatrix(model.PBQ);\n      this.R2X = model.R2X;\n      this.scale = model.scale;\n      this.scaleMethod = model.scaleMethod;\n      this.tolerance = model.tolerance;\n    } else {\n      let { tolerance = 1e-5, scale = true } = options;\n      this.tolerance = tolerance;\n      this.scale = scale;\n      this.latentVectors = options.latentVectors;\n    }\n  }\n\n  /**\n   * Fits the model with the given data and predictions, in this function is calculated the\n   * following outputs:\n   *\n   * T - Score matrix of X\n   * P - Loading matrix of X\n   * U - Score matrix of Y\n   * Q - Loading matrix of Y\n   * B - Matrix of regression coefficient\n   * W - Weight matrix of X\n   *\n   * @param {Matrix|Array} trainingSet\n   * @param {Matrix|Array} trainingValues\n   */\n  train(trainingSet, trainingValues) {\n    trainingSet = Matrix.checkMatrix(trainingSet);\n    trainingValues = Matrix.checkMatrix(trainingValues);\n\n    if (trainingSet.length !== trainingValues.length) {\n      throw new RangeError(\n        'The number of X rows must be equal to the number of Y rows',\n      );\n    }\n\n    this.meanX = trainingSet.mean('column');\n    this.stdDevX = trainingSet.standardDeviation('column', {\n      mean: this.meanX,\n      unbiased: true,\n    });\n    this.meanY = trainingValues.mean('column');\n    this.stdDevY = trainingValues.standardDeviation('column', {\n      mean: this.meanY,\n      unbiased: true,\n    });\n\n    if (this.scale) {\n      trainingSet = trainingSet\n        .clone()\n        .subRowVector(this.meanX)\n        .divRowVector(this.stdDevX);\n      trainingValues = trainingValues\n        .clone()\n        .subRowVector(this.meanY)\n        .divRowVector(this.stdDevY);\n    }\n\n    if (this.latentVectors === undefined) {\n      this.latentVectors = Math.min(trainingSet.rows - 1, trainingSet.columns);\n    }\n\n    let rx = trainingSet.rows;\n    let cx = trainingSet.columns;\n    let ry = trainingValues.rows;\n    let cy = trainingValues.columns;\n\n    let ssqXcal = trainingSet\n      .clone()\n      .mul(trainingSet)\n      .sum(); // for the r²\n    let sumOfSquaresY = trainingValues\n      .clone()\n      .mul(trainingValues)\n      .sum();\n\n    let tolerance = this.tolerance;\n    let n = this.latentVectors;\n    let T = Matrix.zeros(rx, n);\n    let P = Matrix.zeros(cx, n);\n    let U = Matrix.zeros(ry, n);\n    let Q = Matrix.zeros(cy, n);\n    let B = Matrix.zeros(n, n);\n    let W = P.clone();\n    let k = 0;\n    let t;\n    let w;\n    let q;\n    let p;\n\n    while (Utils.norm(trainingValues) > tolerance && k < n) {\n      let transposeX = trainingSet.transpose();\n      let transposeY = trainingValues.transpose();\n\n      let tIndex = maxSumColIndex(trainingSet.clone().mul(trainingSet));\n      let uIndex = maxSumColIndex(trainingValues.clone().mul(trainingValues));\n\n      let t1 = trainingSet.getColumnVector(tIndex);\n      let u = trainingValues.getColumnVector(uIndex);\n      t = Matrix.zeros(rx, 1);\n\n      while (Utils.norm(t1.clone().sub(t)) > tolerance) {\n        w = transposeX.mmul(u);\n        w.div(Utils.norm(w));\n        t = t1;\n        t1 = trainingSet.mmul(w);\n        q = transposeY.mmul(t1);\n        q.div(Utils.norm(q));\n        u = trainingValues.mmul(q);\n      }\n\n      t = t1;\n      let num = transposeX.mmul(t);\n      let den = t\n        .transpose()\n        .mmul(t)\n        .get(0, 0);\n      p = num.div(den);\n      let pnorm = Utils.norm(p);\n      p.div(pnorm);\n      t.mul(pnorm);\n      w.mul(pnorm);\n\n      num = u.transpose().mmul(t);\n      den = t\n        .transpose()\n        .mmul(t)\n        .get(0, 0);\n      let b = num.div(den).get(0, 0);\n      trainingSet.sub(t.mmul(p.transpose()));\n      trainingValues.sub(\n        t\n          .clone()\n          .mul(b)\n          .mmul(q.transpose()),\n      );\n\n      T.setColumn(k, t);\n      P.setColumn(k, p);\n      U.setColumn(k, u);\n      Q.setColumn(k, q);\n      W.setColumn(k, w);\n\n      B.set(k, k, b);\n      k++;\n    }\n\n    k--;\n    T = T.subMatrix(0, T.rows - 1, 0, k);\n    P = P.subMatrix(0, P.rows - 1, 0, k);\n    U = U.subMatrix(0, U.rows - 1, 0, k);\n    Q = Q.subMatrix(0, Q.rows - 1, 0, k);\n    W = W.subMatrix(0, W.rows - 1, 0, k);\n    B = B.subMatrix(0, k, 0, k);\n\n    this.ssqYcal = sumOfSquaresY;\n    this.E = trainingSet;\n    this.F = trainingValues;\n    this.T = T;\n    this.P = P;\n    this.U = U;\n    this.Q = Q;\n    this.W = W;\n    this.B = B;\n    this.PBQ = P.mmul(B).mmul(Q.transpose());\n    this.R2X = t\n      .transpose()\n      .mmul(t)\n      .mmul(p.transpose().mmul(p))\n      .div(ssqXcal)\n      .get(0, 0);\n  }\n\n  /**\n   * Predicts the behavior of the given dataset.\n   * @param {Matrix|Array} dataset - data to be predicted.\n   * @return {Matrix} - predictions of each element of the dataset.\n   */\n  predict(dataset) {\n    let X = Matrix.checkMatrix(dataset);\n    if (this.scale) {\n      X = X.subRowVector(this.meanX).divRowVector(this.stdDevX);\n    }\n    let Y = X.mmul(this.PBQ);\n    Y = Y.mulRowVector(this.stdDevY).addRowVector(this.meanY);\n    return Y;\n  }\n\n  /**\n   * Returns the explained variance on training of the PLS model\n   * @return {number}\n   */\n  getExplainedVariance() {\n    return this.R2X;\n  }\n\n  /**\n   * Export the current model to JSON.\n   * @return {object} - Current model.\n   */\n  toJSON() {\n    return {\n      name: 'PLS',\n      R2X: this.R2X,\n      meanX: this.meanX,\n      stdDevX: this.stdDevX,\n      meanY: this.meanY,\n      stdDevY: this.stdDevY,\n      PBQ: this.PBQ,\n      tolerance: this.tolerance,\n      scale: this.scale,\n    };\n  }\n\n  /**\n   * Load a PLS model from a JSON Object\n   * @param {object} model\n   * @return {PLS} - PLS object from the given model\n   */\n  static load(model) {\n    if (model.name !== 'PLS') {\n      throw new RangeError(`Invalid model: ${model.name}`);\n    }\n    return new PLS(true, model);\n  }\n}\n\n/**\n * @private\n * Function that returns the index where the sum of each\n * column vector is maximum.\n * @param {Matrix} data\n * @return {number} index of the maximum\n */\nfunction maxSumColIndex(data) {\n  return Matrix.rowVector(data.sum('column')).maxIndex()[0];\n}\n","import { Matrix, SingularValueDecomposition, inverse } from 'ml-matrix';\n\nimport { initializeMatrices } from './util/utils';\n\n/**\n * @class KOPLS\n */\nexport class KOPLS {\n  /**\n   * Constructor for Kernel-based Orthogonal Projections to Latent Structures (K-OPLS)\n   * @param {object} options\n   * @param {number} [options.predictiveComponents] - Number of predictive components to use.\n   * @param {number} [options.orthogonalComponents] - Number of Y-Orthogonal components.\n   * @param {Kernel} [options.kernel] - Kernel object to apply, see [ml-kernel](https://github.com/mljs/kernel).\n   * @param {object} model - for load purposes.\n   */\n  constructor(options, model) {\n    if (options === true) {\n      this.trainingSet = new Matrix(model.trainingSet);\n      this.YLoadingMat = new Matrix(model.YLoadingMat);\n      this.SigmaPow = new Matrix(model.SigmaPow);\n      this.YScoreMat = new Matrix(model.YScoreMat);\n      this.predScoreMat = initializeMatrices(model.predScoreMat, false);\n      this.YOrthLoadingVec = initializeMatrices(model.YOrthLoadingVec, false);\n      this.YOrthEigen = model.YOrthEigen;\n      this.YOrthScoreMat = initializeMatrices(model.YOrthScoreMat, false);\n      this.toNorm = initializeMatrices(model.toNorm, false);\n      this.TURegressionCoeff = initializeMatrices(\n        model.TURegressionCoeff,\n        false,\n      );\n      this.kernelX = initializeMatrices(model.kernelX, true);\n      this.kernel = model.kernel;\n      this.orthogonalComp = model.orthogonalComp;\n      this.predictiveComp = model.predictiveComp;\n    } else {\n      if (options.predictiveComponents === undefined) {\n        throw new RangeError('no predictive components found!');\n      }\n      if (options.orthogonalComponents === undefined) {\n        throw new RangeError('no orthogonal components found!');\n      }\n      if (options.kernel === undefined) {\n        throw new RangeError('no kernel found!');\n      }\n\n      this.orthogonalComp = options.orthogonalComponents;\n      this.predictiveComp = options.predictiveComponents;\n      this.kernel = options.kernel;\n    }\n  }\n\n  /**\n   * Train the K-OPLS model with the given training set and labels.\n   * @param {Matrix|Array} trainingSet\n   * @param {Matrix|Array} trainingValues\n   */\n  train(trainingSet, trainingValues) {\n    trainingSet = Matrix.checkMatrix(trainingSet);\n    trainingValues = Matrix.checkMatrix(trainingValues);\n\n    // to save and compute kernel with the prediction dataset.\n    this.trainingSet = trainingSet.clone();\n\n    let kernelX = this.kernel.compute(trainingSet);\n\n    let Identity = Matrix.eye(kernelX.rows, kernelX.rows, 1);\n    let temp = kernelX;\n    kernelX = new Array(this.orthogonalComp + 1);\n    for (let i = 0; i < this.orthogonalComp + 1; i++) {\n      kernelX[i] = new Array(this.orthogonalComp + 1);\n    }\n    kernelX[0][0] = temp;\n\n    let result = new SingularValueDecomposition(\n      trainingValues\n        .transpose()\n        .mmul(kernelX[0][0])\n        .mmul(trainingValues),\n      {\n        computeLeftSingularVectors: true,\n        computeRightSingularVectors: false,\n      },\n    );\n    let YLoadingMat = result.leftSingularVectors;\n    let Sigma = result.diagonalMatrix;\n\n    YLoadingMat = YLoadingMat.subMatrix(\n      0,\n      YLoadingMat.rows - 1,\n      0,\n      this.predictiveComp - 1,\n    );\n    Sigma = Sigma.subMatrix(\n      0,\n      this.predictiveComp - 1,\n      0,\n      this.predictiveComp - 1,\n    );\n\n    let YScoreMat = trainingValues.mmul(YLoadingMat);\n\n    let predScoreMat = new Array(this.orthogonalComp + 1);\n    let TURegressionCoeff = new Array(this.orthogonalComp + 1);\n    let YOrthScoreMat = new Array(this.orthogonalComp);\n    let YOrthLoadingVec = new Array(this.orthogonalComp);\n    let YOrthEigen = new Array(this.orthogonalComp);\n    let YOrthScoreNorm = new Array(this.orthogonalComp);\n\n    let SigmaPow = Matrix.pow(Sigma, -0.5);\n    // to avoid errors, check infinity\n    SigmaPow.apply(function(i, j) {\n      if (this.get(i, j) === Infinity) {\n        this.set(i, j, 0);\n      }\n    });\n\n    for (let i = 0; i < this.orthogonalComp; ++i) {\n      predScoreMat[i] = kernelX[0][i]\n        .transpose()\n        .mmul(YScoreMat)\n        .mmul(SigmaPow);\n\n      let TpiPrime = predScoreMat[i].transpose();\n      TURegressionCoeff[i] = inverse(TpiPrime.mmul(predScoreMat[i]))\n        .mmul(TpiPrime)\n        .mmul(YScoreMat);\n\n      result = new SingularValueDecomposition(\n        TpiPrime.mmul(\n          Matrix.sub(kernelX[i][i], predScoreMat[i].mmul(TpiPrime)),\n        ).mmul(predScoreMat[i]),\n        {\n          computeLeftSingularVectors: true,\n          computeRightSingularVectors: false,\n        },\n      );\n      let CoTemp = result.leftSingularVectors;\n      let SoTemp = result.diagonalMatrix;\n\n      YOrthLoadingVec[i] = CoTemp.subMatrix(0, CoTemp.rows - 1, 0, 0);\n      YOrthEigen[i] = SoTemp.get(0, 0);\n\n      YOrthScoreMat[i] = Matrix.sub(\n        kernelX[i][i],\n        predScoreMat[i].mmul(TpiPrime),\n      )\n        .mmul(predScoreMat[i])\n        .mmul(YOrthLoadingVec[i])\n        .mul(Math.pow(YOrthEigen[i], -0.5));\n\n      let toiPrime = YOrthScoreMat[i].transpose();\n      YOrthScoreNorm[i] = Matrix.sqrt(toiPrime.mmul(YOrthScoreMat[i]));\n\n      YOrthScoreMat[i] = YOrthScoreMat[i].divRowVector(YOrthScoreNorm[i]);\n\n      let ITo = Matrix.sub(\n        Identity,\n        YOrthScoreMat[i].mmul(YOrthScoreMat[i].transpose()),\n      );\n\n      kernelX[0][i + 1] = kernelX[0][i].mmul(ITo);\n      kernelX[i + 1][i + 1] = ITo.mmul(kernelX[i][i]).mmul(ITo);\n    }\n\n    let lastScoreMat = (predScoreMat[this.orthogonalComp] = kernelX[0][\n      this.orthogonalComp\n    ]\n      .transpose()\n      .mmul(YScoreMat)\n      .mmul(SigmaPow));\n\n    let lastTpPrime = lastScoreMat.transpose();\n    TURegressionCoeff[this.orthogonalComp] = inverse(\n      lastTpPrime.mmul(lastScoreMat),\n    )\n      .mmul(lastTpPrime)\n      .mmul(YScoreMat);\n\n    this.YLoadingMat = YLoadingMat;\n    this.SigmaPow = SigmaPow;\n    this.YScoreMat = YScoreMat;\n    this.predScoreMat = predScoreMat;\n    this.YOrthLoadingVec = YOrthLoadingVec;\n    this.YOrthEigen = YOrthEigen;\n    this.YOrthScoreMat = YOrthScoreMat;\n    this.toNorm = YOrthScoreNorm;\n    this.TURegressionCoeff = TURegressionCoeff;\n    this.kernelX = kernelX;\n  }\n\n  /**\n   * Predicts the output given the matrix to predict.\n   * @param {Matrix|Array} toPredict\n   * @return {{y: Matrix, predScoreMat: Array<Matrix>, predYOrthVectors: Array<Matrix>}} predictions\n   */\n  predict(toPredict) {\n    let KTestTrain = this.kernel.compute(toPredict, this.trainingSet);\n\n    let temp = KTestTrain;\n    KTestTrain = new Array(this.orthogonalComp + 1);\n    for (let i = 0; i < this.orthogonalComp + 1; i++) {\n      KTestTrain[i] = new Array(this.orthogonalComp + 1);\n    }\n    KTestTrain[0][0] = temp;\n\n    let YOrthScoreVector = new Array(this.orthogonalComp);\n    let predScoreMat = new Array(this.orthogonalComp);\n\n    let i;\n    for (i = 0; i < this.orthogonalComp; ++i) {\n      predScoreMat[i] = KTestTrain[i][0]\n        .mmul(this.YScoreMat)\n        .mmul(this.SigmaPow);\n\n      YOrthScoreVector[i] = Matrix.sub(\n        KTestTrain[i][i],\n        predScoreMat[i].mmul(this.predScoreMat[i].transpose()),\n      )\n        .mmul(this.predScoreMat[i])\n        .mmul(this.YOrthLoadingVec[i])\n        .mul(Math.pow(this.YOrthEigen[i], -0.5));\n\n      YOrthScoreVector[i] = YOrthScoreVector[i].divRowVector(this.toNorm[i]);\n\n      let scoreMatPrime = this.YOrthScoreMat[i].transpose();\n      KTestTrain[i + 1][0] = Matrix.sub(\n        KTestTrain[i][0],\n        YOrthScoreVector[i]\n          .mmul(scoreMatPrime)\n          .mmul(this.kernelX[0][i].transpose()),\n      );\n\n      let p1 = Matrix.sub(\n        KTestTrain[i][0],\n        KTestTrain[i][i].mmul(this.YOrthScoreMat[i]).mmul(scoreMatPrime),\n      );\n      let p2 = YOrthScoreVector[i].mmul(scoreMatPrime).mmul(this.kernelX[i][i]);\n      let p3 = p2.mmul(this.YOrthScoreMat[i]).mmul(scoreMatPrime);\n\n      KTestTrain[i + 1][i + 1] = p1.sub(p2).add(p3);\n    }\n\n    predScoreMat[i] = KTestTrain[i][0].mmul(this.YScoreMat).mmul(this.SigmaPow);\n    let prediction = predScoreMat[i]\n      .mmul(this.TURegressionCoeff[i])\n      .mmul(this.YLoadingMat.transpose());\n\n    return {\n      prediction: prediction,\n      predScoreMat: predScoreMat,\n      predYOrthVectors: YOrthScoreVector,\n    };\n  }\n\n  /**\n   * Export the current model to JSON.\n   * @return {object} - Current model.\n   */\n  toJSON() {\n    return {\n      name: 'K-OPLS',\n      YLoadingMat: this.YLoadingMat,\n      SigmaPow: this.SigmaPow,\n      YScoreMat: this.YScoreMat,\n      predScoreMat: this.predScoreMat,\n      YOrthLoadingVec: this.YOrthLoadingVec,\n      YOrthEigen: this.YOrthEigen,\n      YOrthScoreMat: this.YOrthScoreMat,\n      toNorm: this.toNorm,\n      TURegressionCoeff: this.TURegressionCoeff,\n      kernelX: this.kernelX,\n      trainingSet: this.trainingSet,\n      orthogonalComp: this.orthogonalComp,\n      predictiveComp: this.predictiveComp,\n    };\n  }\n\n  /**\n   * Load a K-OPLS with the given model.\n   * @param {object} model\n   * @param {Kernel} kernel - kernel used on the model, see [ml-kernel](https://github.com/mljs/kernel).\n   * @return {KOPLS}\n   */\n  static load(model, kernel) {\n    if (model.name !== 'K-OPLS') {\n      throw new RangeError(`Invalid model: ${model.name}`);\n    }\n\n    if (!kernel) {\n      throw new RangeError('You must provide a kernel for the model!');\n    }\n\n    model.kernel = kernel;\n    return new KOPLS(true, model);\n  }\n}\n","/**\n *  Constructs a confusion matrix\n * @class ConfusionMatrix\n * @example\n * const CM = new ConfusionMatrix([[13, 2], [10, 5]], ['cat', 'dog'])\n * @param {Array<Array<number>>} matrix - The confusion matrix, a 2D Array. Rows represent the actual label and columns\n *     the predicted label.\n * @param {Array<any>} labels - Labels of the confusion matrix, a 1D Array\n */\nexport default class ConfusionMatrix {\n  constructor(matrix, labels) {\n    if (matrix.length !== matrix[0].length) {\n      throw new Error('Confusion matrix must be square');\n    }\n    if (labels.length !== matrix.length) {\n      throw new Error(\n        'Confusion matrix and labels should have the same length',\n      );\n    }\n    this.labels = labels;\n    this.matrix = matrix;\n  }\n\n  /**\n   * Construct confusion matrix from the predicted and actual labels (classes). Be sure to provide the arguments in\n   * the correct order!\n   * @param {Array<any>} actual  - The predicted labels of the classification\n   * @param {Array<any>} predicted     - The actual labels of the classification. Has to be of same length as\n   *     predicted.\n   * @param {object} [options] - Additional options\n   * @param {Array<any>} [options.labels] - The list of labels that should be used. If not provided the distinct set\n   *     of labels present in predicted and actual is used. Labels are compared using the strict equality operator\n   *     '==='\n   * @return {ConfusionMatrix} - Confusion matrix\n   */\n  static fromLabels(actual, predicted, options = {}) {\n    if (predicted.length !== actual.length) {\n      throw new Error('predicted and actual must have the same length');\n    }\n    let distinctLabels;\n    if (options.labels) {\n      distinctLabels = new Set(options.labels);\n    } else {\n      distinctLabels = new Set([...actual, ...predicted]);\n    }\n    distinctLabels = Array.from(distinctLabels);\n    if (options.sort) {\n      distinctLabels.sort(options.sort);\n    }\n\n    // Create confusion matrix and fill with 0's\n    const matrix = Array.from({ length: distinctLabels.length });\n    for (let i = 0; i < matrix.length; i++) {\n      matrix[i] = new Array(matrix.length);\n      matrix[i].fill(0);\n    }\n\n    for (let i = 0; i < predicted.length; i++) {\n      const actualIdx = distinctLabels.indexOf(actual[i]);\n      const predictedIdx = distinctLabels.indexOf(predicted[i]);\n      if (actualIdx >= 0 && predictedIdx >= 0) {\n        matrix[actualIdx][predictedIdx]++;\n      }\n    }\n\n    return new ConfusionMatrix(matrix, distinctLabels);\n  }\n\n  /**\n   * Get the confusion matrix\n   * @return {Array<Array<number> >}\n   */\n  getMatrix() {\n    return this.matrix;\n  }\n\n  getLabels() {\n    return this.labels;\n  }\n\n  /**\n   * Get the total number of samples\n   * @return {number}\n   */\n  getTotalCount() {\n    let predicted = 0;\n    for (let i = 0; i < this.matrix.length; i++) {\n      for (let j = 0; j < this.matrix.length; j++) {\n        predicted += this.matrix[i][j];\n      }\n    }\n    return predicted;\n  }\n\n  /**\n   * Get the total number of true predictions\n   * @return {number}\n   */\n  getTrueCount() {\n    let count = 0;\n    for (let i = 0; i < this.matrix.length; i++) {\n      count += this.matrix[i][i];\n    }\n    return count;\n  }\n\n  /**\n   * Get the total number of false predictions.\n   * @return {number}\n   */\n  getFalseCount() {\n    return this.getTotalCount() - this.getTrueCount();\n  }\n\n  /**\n   * Get the number of true positive predictions.\n   * @param {any} label - The label that should be considered \"positive\"\n   * @return {number}\n   */\n  getTruePositiveCount(label) {\n    const index = this.getIndex(label);\n    return this.matrix[index][index];\n  }\n\n  /**\n   * Get the number of true negative predictions\n   * @param {any} label - The label that should be considered \"positive\"\n   * @return {number}\n   */\n  getTrueNegativeCount(label) {\n    const index = this.getIndex(label);\n    let count = 0;\n    for (let i = 0; i < this.matrix.length; i++) {\n      for (let j = 0; j < this.matrix.length; j++) {\n        if (i !== index && j !== index) {\n          count += this.matrix[i][j];\n        }\n      }\n    }\n    return count;\n  }\n\n  /**\n   * Get the number of false positive predictions.\n   * @param {any} label - The label that should be considered \"positive\"\n   * @return {number}\n   */\n  getFalsePositiveCount(label) {\n    const index = this.getIndex(label);\n    let count = 0;\n    for (let i = 0; i < this.matrix.length; i++) {\n      if (i !== index) {\n        count += this.matrix[i][index];\n      }\n    }\n    return count;\n  }\n\n  /**\n   * Get the number of false negative predictions.\n   * @param {any} label - The label that should be considered \"positive\"\n   * @return {number}\n   */\n  getFalseNegativeCount(label) {\n    const index = this.getIndex(label);\n    let count = 0;\n    for (let i = 0; i < this.matrix.length; i++) {\n      if (i !== index) {\n        count += this.matrix[index][i];\n      }\n    }\n    return count;\n  }\n\n  /**\n   * Get the number of real positive samples.\n   * @param {any} label - The label that should be considered \"positive\"\n   * @return {number}\n   */\n  getPositiveCount(label) {\n    return this.getTruePositiveCount(label) + this.getFalseNegativeCount(label);\n  }\n\n  /**\n   * Get the number of real negative samples.\n   * @param {any} label - The label that should be considered \"positive\"\n   * @return {number}\n   */\n  getNegativeCount(label) {\n    return this.getTrueNegativeCount(label) + this.getFalsePositiveCount(label);\n  }\n\n  /**\n   * Get the index in the confusion matrix that corresponds to the given label\n   * @param {any} label - The label to search for\n   * @throws if the label is not found\n   * @return {number}\n   */\n  getIndex(label) {\n    const index = this.labels.indexOf(label);\n    if (index === -1) throw new Error('The label does not exist');\n    return index;\n  }\n\n  /**\n   * Get the true positive rate a.k.a. sensitivity. Computes the ratio between the number of true positive predictions and the total number of positive samples.\n   * {@link https://en.wikipedia.org/wiki/Sensitivity_and_specificity}\n   * @param {any} label - The label that should be considered \"positive\"\n   * @return {number} - The true positive rate [0-1]\n   */\n  getTruePositiveRate(label) {\n    return this.getTruePositiveCount(label) / this.getPositiveCount(label);\n  }\n\n  /**\n   * Get the true negative rate a.k.a. specificity. Computes the ration between the number of true negative predictions and the total number of negative samples.\n   * {@link https://en.wikipedia.org/wiki/Sensitivity_and_specificity}\n   * @param {any} label - The label that should be considered \"positive\"\n   * @return {number}\n   */\n  getTrueNegativeRate(label) {\n    return this.getTrueNegativeCount(label) / this.getNegativeCount(label);\n  }\n\n  /**\n   * Get the positive predictive value a.k.a. precision. Computes TP / (TP + FP)\n   * {@link https://en.wikipedia.org/wiki/Positive_and_negative_predictive_values}\n   * @param {any} label - The label that should be considered \"positive\"\n   * @return {number}\n   */\n  getPositivePredictiveValue(label) {\n    const TP = this.getTruePositiveCount(label);\n    return TP / (TP + this.getFalsePositiveCount(label));\n  }\n\n  /**\n   * Negative predictive value\n   * {@link https://en.wikipedia.org/wiki/Positive_and_negative_predictive_values}\n   * @param {any} label - The label that should be considered \"positive\"\n   * @return {number}\n   */\n  getNegativePredictiveValue(label) {\n    const TN = this.getTrueNegativeCount(label);\n    return TN / (TN + this.getFalseNegativeCount(label));\n  }\n\n  /**\n   * False negative rate a.k.a. miss rate.\n   * {@link https://en.wikipedia.org/wiki/Type_I_and_type_II_errors#False_positive_and_false_negative_rates}\n   * @param {any} label - The label that should be considered \"positive\"\n   * @return {number}\n   */\n  getFalseNegativeRate(label) {\n    return 1 - this.getTruePositiveRate(label);\n  }\n\n  /**\n   * False positive rate a.k.a. fall-out rate.\n   * {@link https://en.wikipedia.org/wiki/Type_I_and_type_II_errors#False_positive_and_false_negative_rates}\n   * @param {any} label - The label that should be considered \"positive\"\n   * @return {number}\n   */\n  getFalsePositiveRate(label) {\n    return 1 - this.getTrueNegativeRate(label);\n  }\n\n  /**\n   * False discovery rate (FDR)\n   * {@link https://en.wikipedia.org/wiki/False_discovery_rate}\n   * @param {any} label - The label that should be considered \"positive\"\n   * @return {number}\n   */\n  getFalseDiscoveryRate(label) {\n    const FP = this.getFalsePositiveCount(label);\n    return FP / (FP + this.getTruePositiveCount(label));\n  }\n\n  /**\n   * False omission rate (FOR)\n   * @param {any} label - The label that should be considered \"positive\"\n   * @return {number}\n   */\n  getFalseOmissionRate(label) {\n    const FN = this.getFalseNegativeCount(label);\n    return FN / (FN + this.getTruePositiveCount(label));\n  }\n\n  /**\n   * F1 score\n   * {@link https://en.wikipedia.org/wiki/F1_score}\n   * @param {any} label - The label that should be considered \"positive\"\n   * @return {number}\n   */\n  getF1Score(label) {\n    const TP = this.getTruePositiveCount(label);\n    return (\n      (2 * TP) /\n      (2 * TP +\n        this.getFalsePositiveCount(label) +\n        this.getFalseNegativeCount(label))\n    );\n  }\n\n  /**\n   * Matthews correlation coefficient (MCC)\n   * {@link https://en.wikipedia.org/wiki/Matthews_correlation_coefficient}\n   * @param {any} label - The label that should be considered \"positive\"\n   * @return {number}\n   */\n  getMatthewsCorrelationCoefficient(label) {\n    const TP = this.getTruePositiveCount(label);\n    const TN = this.getTrueNegativeCount(label);\n    const FP = this.getFalsePositiveCount(label);\n    const FN = this.getFalseNegativeCount(label);\n    return (\n      (TP * TN - FP * FN) /\n      Math.sqrt((TP + FP) * (TP + FN) * (TN + FP) * (TN + FN))\n    );\n  }\n\n  /**\n   * Informedness\n   * {@link https://en.wikipedia.org/wiki/Youden%27s_J_statistic}\n   * @param {any} label - The label that should be considered \"positive\"\n   * @return {number}\n   */\n  getInformedness(label) {\n    return (\n      this.getTruePositiveRate(label) + this.getTrueNegativeRate(label) - 1\n    );\n  }\n\n  /**\n   * Markedness\n   * @param {any} label - The label that should be considered \"positive\"\n   * @return {number}\n   */\n  getMarkedness(label) {\n    return (\n      this.getPositivePredictiveValue(label) +\n      this.getNegativePredictiveValue(label) -\n      1\n    );\n  }\n\n  /**\n   * Get the confusion table.\n   * @param {any} label - The label that should be considered \"positive\"\n   * @return {Array<Array<number> >} - The 2x2 confusion table. [[TP, FN], [FP, TN]]\n   */\n  getConfusionTable(label) {\n    return [\n      [this.getTruePositiveCount(label), this.getFalseNegativeCount(label)],\n      [this.getFalsePositiveCount(label), this.getTrueNegativeCount(label)],\n    ];\n  }\n\n  /**\n   * Get total accuracy.\n   * @return {number} - The ratio between the number of true predictions and total number of classifications ([0-1])\n   */\n  getAccuracy() {\n    let correct = 0;\n    let incorrect = 0;\n    for (let i = 0; i < this.matrix.length; i++) {\n      for (let j = 0; j < this.matrix.length; j++) {\n        if (i === j) correct += this.matrix[i][j];\n        else incorrect += this.matrix[i][j];\n      }\n    }\n    return correct / (correct + incorrect);\n  }\n\n  /**\n   * Returns the element in the confusion matrix that corresponds to the given actual and predicted labels.\n   * @param {any} actual - The true label\n   * @param {any} predicted - The predicted label\n   * @return {number} - The element in the confusion matrix\n   */\n  getCount(actual, predicted) {\n    const actualIndex = this.getIndex(actual);\n    const predictedIndex = this.getIndex(predicted);\n    return this.matrix[actualIndex][predictedIndex];\n  }\n\n  /**\n   * Compute the general prediction accuracy\n   * @deprecated Use getAccuracy\n   * @return {number} - The prediction accuracy ([0-1]\n   */\n  get accuracy() {\n    return this.getAccuracy();\n  }\n\n  /**\n   * Compute the number of predicted observations\n   * @deprecated Use getTotalCount\n   * @return {number}\n   */\n  get total() {\n    return this.getTotalCount();\n  }\n}\n","(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(factory());\n}(this, (function () { 'use strict';\n\n\tfunction createCommonjsModule(fn, module) {\n\t\treturn module = { exports: {} }, fn(module, module.exports), module.exports;\n\t}\n\n\tvar runtime = createCommonjsModule(function (module) {\n\t/**\n\t * Copyright (c) 2014-present, Facebook, Inc.\n\t *\n\t * This source code is licensed under the MIT license found in the\n\t * LICENSE file in the root directory of this source tree.\n\t */\n\n\t!(function(global) {\n\n\t  var Op = Object.prototype;\n\t  var hasOwn = Op.hasOwnProperty;\n\t  var undefined; // More compressible than void 0.\n\t  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n\t  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n\t  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n\t  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\t  var runtime = global.regeneratorRuntime;\n\t  if (runtime) {\n\t    {\n\t      // If regeneratorRuntime is defined globally and we're in a module,\n\t      // make the exports object identical to regeneratorRuntime.\n\t      module.exports = runtime;\n\t    }\n\t    // Don't bother evaluating the rest of this file if the runtime was\n\t    // already defined globally.\n\t    return;\n\t  }\n\n\t  // Define the runtime globally (as expected by generated code) as either\n\t  // module.exports (if we're in a module) or a new, empty object.\n\t  runtime = global.regeneratorRuntime = module.exports;\n\n\t  function wrap(innerFn, outerFn, self, tryLocsList) {\n\t    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n\t    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n\t    var generator = Object.create(protoGenerator.prototype);\n\t    var context = new Context(tryLocsList || []);\n\n\t    // The ._invoke method unifies the implementations of the .next,\n\t    // .throw, and .return methods.\n\t    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n\t    return generator;\n\t  }\n\t  runtime.wrap = wrap;\n\n\t  // Try/catch helper to minimize deoptimizations. Returns a completion\n\t  // record like context.tryEntries[i].completion. This interface could\n\t  // have been (and was previously) designed to take a closure to be\n\t  // invoked without arguments, but in all the cases we care about we\n\t  // already have an existing method we want to call, so there's no need\n\t  // to create a new function object. We can even get away with assuming\n\t  // the method takes exactly one argument, since that happens to be true\n\t  // in every case, so we don't have to touch the arguments object. The\n\t  // only additional allocation required is the completion record, which\n\t  // has a stable shape and so hopefully should be cheap to allocate.\n\t  function tryCatch(fn, obj, arg) {\n\t    try {\n\t      return { type: \"normal\", arg: fn.call(obj, arg) };\n\t    } catch (err) {\n\t      return { type: \"throw\", arg: err };\n\t    }\n\t  }\n\n\t  var GenStateSuspendedStart = \"suspendedStart\";\n\t  var GenStateSuspendedYield = \"suspendedYield\";\n\t  var GenStateExecuting = \"executing\";\n\t  var GenStateCompleted = \"completed\";\n\n\t  // Returning this object from the innerFn has the same effect as\n\t  // breaking out of the dispatch switch statement.\n\t  var ContinueSentinel = {};\n\n\t  // Dummy constructor functions that we use as the .constructor and\n\t  // .constructor.prototype properties for functions that return Generator\n\t  // objects. For full spec compliance, you may wish to configure your\n\t  // minifier not to mangle the names of these two functions.\n\t  function Generator() {}\n\t  function GeneratorFunction() {}\n\t  function GeneratorFunctionPrototype() {}\n\n\t  // This is a polyfill for %IteratorPrototype% for environments that\n\t  // don't natively support it.\n\t  var IteratorPrototype = {};\n\t  IteratorPrototype[iteratorSymbol] = function () {\n\t    return this;\n\t  };\n\n\t  var getProto = Object.getPrototypeOf;\n\t  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n\t  if (NativeIteratorPrototype &&\n\t      NativeIteratorPrototype !== Op &&\n\t      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n\t    // This environment has a native %IteratorPrototype%; use it instead\n\t    // of the polyfill.\n\t    IteratorPrototype = NativeIteratorPrototype;\n\t  }\n\n\t  var Gp = GeneratorFunctionPrototype.prototype =\n\t    Generator.prototype = Object.create(IteratorPrototype);\n\t  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n\t  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n\t  GeneratorFunctionPrototype[toStringTagSymbol] =\n\t    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n\t  // Helper for defining the .next, .throw, and .return methods of the\n\t  // Iterator interface in terms of a single ._invoke method.\n\t  function defineIteratorMethods(prototype) {\n\t    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n\t      prototype[method] = function(arg) {\n\t        return this._invoke(method, arg);\n\t      };\n\t    });\n\t  }\n\n\t  runtime.isGeneratorFunction = function(genFun) {\n\t    var ctor = typeof genFun === \"function\" && genFun.constructor;\n\t    return ctor\n\t      ? ctor === GeneratorFunction ||\n\t        // For the native GeneratorFunction constructor, the best we can\n\t        // do is to check its .name property.\n\t        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n\t      : false;\n\t  };\n\n\t  runtime.mark = function(genFun) {\n\t    if (Object.setPrototypeOf) {\n\t      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n\t    } else {\n\t      genFun.__proto__ = GeneratorFunctionPrototype;\n\t      if (!(toStringTagSymbol in genFun)) {\n\t        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n\t      }\n\t    }\n\t    genFun.prototype = Object.create(Gp);\n\t    return genFun;\n\t  };\n\n\t  // Within the body of any async function, `await x` is transformed to\n\t  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n\t  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n\t  // meant to be awaited.\n\t  runtime.awrap = function(arg) {\n\t    return { __await: arg };\n\t  };\n\n\t  function AsyncIterator(generator) {\n\t    function invoke(method, arg, resolve, reject) {\n\t      var record = tryCatch(generator[method], generator, arg);\n\t      if (record.type === \"throw\") {\n\t        reject(record.arg);\n\t      } else {\n\t        var result = record.arg;\n\t        var value = result.value;\n\t        if (value &&\n\t            typeof value === \"object\" &&\n\t            hasOwn.call(value, \"__await\")) {\n\t          return Promise.resolve(value.__await).then(function(value) {\n\t            invoke(\"next\", value, resolve, reject);\n\t          }, function(err) {\n\t            invoke(\"throw\", err, resolve, reject);\n\t          });\n\t        }\n\n\t        return Promise.resolve(value).then(function(unwrapped) {\n\t          // When a yielded Promise is resolved, its final value becomes\n\t          // the .value of the Promise<{value,done}> result for the\n\t          // current iteration. If the Promise is rejected, however, the\n\t          // result for this iteration will be rejected with the same\n\t          // reason. Note that rejections of yielded Promises are not\n\t          // thrown back into the generator function, as is the case\n\t          // when an awaited Promise is rejected. This difference in\n\t          // behavior between yield and await is important, because it\n\t          // allows the consumer to decide what to do with the yielded\n\t          // rejection (swallow it and continue, manually .throw it back\n\t          // into the generator, abandon iteration, whatever). With\n\t          // await, by contrast, there is no opportunity to examine the\n\t          // rejection reason outside the generator function, so the\n\t          // only option is to throw it from the await expression, and\n\t          // let the generator function handle the exception.\n\t          result.value = unwrapped;\n\t          resolve(result);\n\t        }, reject);\n\t      }\n\t    }\n\n\t    var previousPromise;\n\n\t    function enqueue(method, arg) {\n\t      function callInvokeWithMethodAndArg() {\n\t        return new Promise(function(resolve, reject) {\n\t          invoke(method, arg, resolve, reject);\n\t        });\n\t      }\n\n\t      return previousPromise =\n\t        // If enqueue has been called before, then we want to wait until\n\t        // all previous Promises have been resolved before calling invoke,\n\t        // so that results are always delivered in the correct order. If\n\t        // enqueue has not been called before, then it is important to\n\t        // call invoke immediately, without waiting on a callback to fire,\n\t        // so that the async generator function has the opportunity to do\n\t        // any necessary setup in a predictable way. This predictability\n\t        // is why the Promise constructor synchronously invokes its\n\t        // executor callback, and why async functions synchronously\n\t        // execute code before the first await. Since we implement simple\n\t        // async functions in terms of async generators, it is especially\n\t        // important to get this right, even though it requires care.\n\t        previousPromise ? previousPromise.then(\n\t          callInvokeWithMethodAndArg,\n\t          // Avoid propagating failures to Promises returned by later\n\t          // invocations of the iterator.\n\t          callInvokeWithMethodAndArg\n\t        ) : callInvokeWithMethodAndArg();\n\t    }\n\n\t    // Define the unified helper method that is used to implement .next,\n\t    // .throw, and .return (see defineIteratorMethods).\n\t    this._invoke = enqueue;\n\t  }\n\n\t  defineIteratorMethods(AsyncIterator.prototype);\n\t  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n\t    return this;\n\t  };\n\t  runtime.AsyncIterator = AsyncIterator;\n\n\t  // Note that simple async functions are implemented on top of\n\t  // AsyncIterator objects; they just return a Promise for the value of\n\t  // the final result produced by the iterator.\n\t  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n\t    var iter = new AsyncIterator(\n\t      wrap(innerFn, outerFn, self, tryLocsList)\n\t    );\n\n\t    return runtime.isGeneratorFunction(outerFn)\n\t      ? iter // If outerFn is a generator, return the full iterator.\n\t      : iter.next().then(function(result) {\n\t          return result.done ? result.value : iter.next();\n\t        });\n\t  };\n\n\t  function makeInvokeMethod(innerFn, self, context) {\n\t    var state = GenStateSuspendedStart;\n\n\t    return function invoke(method, arg) {\n\t      if (state === GenStateExecuting) {\n\t        throw new Error(\"Generator is already running\");\n\t      }\n\n\t      if (state === GenStateCompleted) {\n\t        if (method === \"throw\") {\n\t          throw arg;\n\t        }\n\n\t        // Be forgiving, per 25.3.3.3.3 of the spec:\n\t        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n\t        return doneResult();\n\t      }\n\n\t      context.method = method;\n\t      context.arg = arg;\n\n\t      while (true) {\n\t        var delegate = context.delegate;\n\t        if (delegate) {\n\t          var delegateResult = maybeInvokeDelegate(delegate, context);\n\t          if (delegateResult) {\n\t            if (delegateResult === ContinueSentinel) continue;\n\t            return delegateResult;\n\t          }\n\t        }\n\n\t        if (context.method === \"next\") {\n\t          // Setting context._sent for legacy support of Babel's\n\t          // function.sent implementation.\n\t          context.sent = context._sent = context.arg;\n\n\t        } else if (context.method === \"throw\") {\n\t          if (state === GenStateSuspendedStart) {\n\t            state = GenStateCompleted;\n\t            throw context.arg;\n\t          }\n\n\t          context.dispatchException(context.arg);\n\n\t        } else if (context.method === \"return\") {\n\t          context.abrupt(\"return\", context.arg);\n\t        }\n\n\t        state = GenStateExecuting;\n\n\t        var record = tryCatch(innerFn, self, context);\n\t        if (record.type === \"normal\") {\n\t          // If an exception is thrown from innerFn, we leave state ===\n\t          // GenStateExecuting and loop back for another invocation.\n\t          state = context.done\n\t            ? GenStateCompleted\n\t            : GenStateSuspendedYield;\n\n\t          if (record.arg === ContinueSentinel) {\n\t            continue;\n\t          }\n\n\t          return {\n\t            value: record.arg,\n\t            done: context.done\n\t          };\n\n\t        } else if (record.type === \"throw\") {\n\t          state = GenStateCompleted;\n\t          // Dispatch the exception by looping back around to the\n\t          // context.dispatchException(context.arg) call above.\n\t          context.method = \"throw\";\n\t          context.arg = record.arg;\n\t        }\n\t      }\n\t    };\n\t  }\n\n\t  // Call delegate.iterator[context.method](context.arg) and handle the\n\t  // result, either by returning a { value, done } result from the\n\t  // delegate iterator, or by modifying context.method and context.arg,\n\t  // setting context.delegate to null, and returning the ContinueSentinel.\n\t  function maybeInvokeDelegate(delegate, context) {\n\t    var method = delegate.iterator[context.method];\n\t    if (method === undefined) {\n\t      // A .throw or .return when the delegate iterator has no .throw\n\t      // method always terminates the yield* loop.\n\t      context.delegate = null;\n\n\t      if (context.method === \"throw\") {\n\t        if (delegate.iterator.return) {\n\t          // If the delegate iterator has a return method, give it a\n\t          // chance to clean up.\n\t          context.method = \"return\";\n\t          context.arg = undefined;\n\t          maybeInvokeDelegate(delegate, context);\n\n\t          if (context.method === \"throw\") {\n\t            // If maybeInvokeDelegate(context) changed context.method from\n\t            // \"return\" to \"throw\", let that override the TypeError below.\n\t            return ContinueSentinel;\n\t          }\n\t        }\n\n\t        context.method = \"throw\";\n\t        context.arg = new TypeError(\n\t          \"The iterator does not provide a 'throw' method\");\n\t      }\n\n\t      return ContinueSentinel;\n\t    }\n\n\t    var record = tryCatch(method, delegate.iterator, context.arg);\n\n\t    if (record.type === \"throw\") {\n\t      context.method = \"throw\";\n\t      context.arg = record.arg;\n\t      context.delegate = null;\n\t      return ContinueSentinel;\n\t    }\n\n\t    var info = record.arg;\n\n\t    if (! info) {\n\t      context.method = \"throw\";\n\t      context.arg = new TypeError(\"iterator result is not an object\");\n\t      context.delegate = null;\n\t      return ContinueSentinel;\n\t    }\n\n\t    if (info.done) {\n\t      // Assign the result of the finished delegate to the temporary\n\t      // variable specified by delegate.resultName (see delegateYield).\n\t      context[delegate.resultName] = info.value;\n\n\t      // Resume execution at the desired location (see delegateYield).\n\t      context.next = delegate.nextLoc;\n\n\t      // If context.method was \"throw\" but the delegate handled the\n\t      // exception, let the outer generator proceed normally. If\n\t      // context.method was \"next\", forget context.arg since it has been\n\t      // \"consumed\" by the delegate iterator. If context.method was\n\t      // \"return\", allow the original .return call to continue in the\n\t      // outer generator.\n\t      if (context.method !== \"return\") {\n\t        context.method = \"next\";\n\t        context.arg = undefined;\n\t      }\n\n\t    } else {\n\t      // Re-yield the result returned by the delegate method.\n\t      return info;\n\t    }\n\n\t    // The delegate iterator is finished, so forget it and continue with\n\t    // the outer generator.\n\t    context.delegate = null;\n\t    return ContinueSentinel;\n\t  }\n\n\t  // Define Generator.prototype.{next,throw,return} in terms of the\n\t  // unified ._invoke helper method.\n\t  defineIteratorMethods(Gp);\n\n\t  Gp[toStringTagSymbol] = \"Generator\";\n\n\t  // A Generator should always return itself as the iterator object when the\n\t  // @@iterator function is called on it. Some browsers' implementations of the\n\t  // iterator prototype chain incorrectly implement this, causing the Generator\n\t  // object to not be returned from this call. This ensures that doesn't happen.\n\t  // See https://github.com/facebook/regenerator/issues/274 for more details.\n\t  Gp[iteratorSymbol] = function() {\n\t    return this;\n\t  };\n\n\t  Gp.toString = function() {\n\t    return \"[object Generator]\";\n\t  };\n\n\t  function pushTryEntry(locs) {\n\t    var entry = { tryLoc: locs[0] };\n\n\t    if (1 in locs) {\n\t      entry.catchLoc = locs[1];\n\t    }\n\n\t    if (2 in locs) {\n\t      entry.finallyLoc = locs[2];\n\t      entry.afterLoc = locs[3];\n\t    }\n\n\t    this.tryEntries.push(entry);\n\t  }\n\n\t  function resetTryEntry(entry) {\n\t    var record = entry.completion || {};\n\t    record.type = \"normal\";\n\t    delete record.arg;\n\t    entry.completion = record;\n\t  }\n\n\t  function Context(tryLocsList) {\n\t    // The root entry object (effectively a try statement without a catch\n\t    // or a finally block) gives us a place to store values thrown from\n\t    // locations where there is no enclosing try statement.\n\t    this.tryEntries = [{ tryLoc: \"root\" }];\n\t    tryLocsList.forEach(pushTryEntry, this);\n\t    this.reset(true);\n\t  }\n\n\t  runtime.keys = function(object) {\n\t    var keys = [];\n\t    for (var key in object) {\n\t      keys.push(key);\n\t    }\n\t    keys.reverse();\n\n\t    // Rather than returning an object with a next method, we keep\n\t    // things simple and return the next function itself.\n\t    return function next() {\n\t      while (keys.length) {\n\t        var key = keys.pop();\n\t        if (key in object) {\n\t          next.value = key;\n\t          next.done = false;\n\t          return next;\n\t        }\n\t      }\n\n\t      // To avoid creating an additional object, we just hang the .value\n\t      // and .done properties off the next function object itself. This\n\t      // also ensures that the minifier will not anonymize the function.\n\t      next.done = true;\n\t      return next;\n\t    };\n\t  };\n\n\t  function values(iterable) {\n\t    if (iterable) {\n\t      var iteratorMethod = iterable[iteratorSymbol];\n\t      if (iteratorMethod) {\n\t        return iteratorMethod.call(iterable);\n\t      }\n\n\t      if (typeof iterable.next === \"function\") {\n\t        return iterable;\n\t      }\n\n\t      if (!isNaN(iterable.length)) {\n\t        var i = -1, next = function next() {\n\t          while (++i < iterable.length) {\n\t            if (hasOwn.call(iterable, i)) {\n\t              next.value = iterable[i];\n\t              next.done = false;\n\t              return next;\n\t            }\n\t          }\n\n\t          next.value = undefined;\n\t          next.done = true;\n\n\t          return next;\n\t        };\n\n\t        return next.next = next;\n\t      }\n\t    }\n\n\t    // Return an iterator with no values.\n\t    return { next: doneResult };\n\t  }\n\t  runtime.values = values;\n\n\t  function doneResult() {\n\t    return { value: undefined, done: true };\n\t  }\n\n\t  Context.prototype = {\n\t    constructor: Context,\n\n\t    reset: function(skipTempReset) {\n\t      this.prev = 0;\n\t      this.next = 0;\n\t      // Resetting context._sent for legacy support of Babel's\n\t      // function.sent implementation.\n\t      this.sent = this._sent = undefined;\n\t      this.done = false;\n\t      this.delegate = null;\n\n\t      this.method = \"next\";\n\t      this.arg = undefined;\n\n\t      this.tryEntries.forEach(resetTryEntry);\n\n\t      if (!skipTempReset) {\n\t        for (var name in this) {\n\t          // Not sure about the optimal order of these conditions:\n\t          if (name.charAt(0) === \"t\" &&\n\t              hasOwn.call(this, name) &&\n\t              !isNaN(+name.slice(1))) {\n\t            this[name] = undefined;\n\t          }\n\t        }\n\t      }\n\t    },\n\n\t    stop: function() {\n\t      this.done = true;\n\n\t      var rootEntry = this.tryEntries[0];\n\t      var rootRecord = rootEntry.completion;\n\t      if (rootRecord.type === \"throw\") {\n\t        throw rootRecord.arg;\n\t      }\n\n\t      return this.rval;\n\t    },\n\n\t    dispatchException: function(exception) {\n\t      if (this.done) {\n\t        throw exception;\n\t      }\n\n\t      var context = this;\n\t      function handle(loc, caught) {\n\t        record.type = \"throw\";\n\t        record.arg = exception;\n\t        context.next = loc;\n\n\t        if (caught) {\n\t          // If the dispatched exception was caught by a catch block,\n\t          // then let that catch block handle the exception normally.\n\t          context.method = \"next\";\n\t          context.arg = undefined;\n\t        }\n\n\t        return !! caught;\n\t      }\n\n\t      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n\t        var entry = this.tryEntries[i];\n\t        var record = entry.completion;\n\n\t        if (entry.tryLoc === \"root\") {\n\t          // Exception thrown outside of any try block that could handle\n\t          // it, so set the completion value of the entire function to\n\t          // throw the exception.\n\t          return handle(\"end\");\n\t        }\n\n\t        if (entry.tryLoc <= this.prev) {\n\t          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n\t          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n\t          if (hasCatch && hasFinally) {\n\t            if (this.prev < entry.catchLoc) {\n\t              return handle(entry.catchLoc, true);\n\t            } else if (this.prev < entry.finallyLoc) {\n\t              return handle(entry.finallyLoc);\n\t            }\n\n\t          } else if (hasCatch) {\n\t            if (this.prev < entry.catchLoc) {\n\t              return handle(entry.catchLoc, true);\n\t            }\n\n\t          } else if (hasFinally) {\n\t            if (this.prev < entry.finallyLoc) {\n\t              return handle(entry.finallyLoc);\n\t            }\n\n\t          } else {\n\t            throw new Error(\"try statement without catch or finally\");\n\t          }\n\t        }\n\t      }\n\t    },\n\n\t    abrupt: function(type, arg) {\n\t      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n\t        var entry = this.tryEntries[i];\n\t        if (entry.tryLoc <= this.prev &&\n\t            hasOwn.call(entry, \"finallyLoc\") &&\n\t            this.prev < entry.finallyLoc) {\n\t          var finallyEntry = entry;\n\t          break;\n\t        }\n\t      }\n\n\t      if (finallyEntry &&\n\t          (type === \"break\" ||\n\t           type === \"continue\") &&\n\t          finallyEntry.tryLoc <= arg &&\n\t          arg <= finallyEntry.finallyLoc) {\n\t        // Ignore the finally entry if control is not jumping to a\n\t        // location outside the try/catch block.\n\t        finallyEntry = null;\n\t      }\n\n\t      var record = finallyEntry ? finallyEntry.completion : {};\n\t      record.type = type;\n\t      record.arg = arg;\n\n\t      if (finallyEntry) {\n\t        this.method = \"next\";\n\t        this.next = finallyEntry.finallyLoc;\n\t        return ContinueSentinel;\n\t      }\n\n\t      return this.complete(record);\n\t    },\n\n\t    complete: function(record, afterLoc) {\n\t      if (record.type === \"throw\") {\n\t        throw record.arg;\n\t      }\n\n\t      if (record.type === \"break\" ||\n\t          record.type === \"continue\") {\n\t        this.next = record.arg;\n\t      } else if (record.type === \"return\") {\n\t        this.rval = this.arg = record.arg;\n\t        this.method = \"return\";\n\t        this.next = \"end\";\n\t      } else if (record.type === \"normal\" && afterLoc) {\n\t        this.next = afterLoc;\n\t      }\n\n\t      return ContinueSentinel;\n\t    },\n\n\t    finish: function(finallyLoc) {\n\t      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n\t        var entry = this.tryEntries[i];\n\t        if (entry.finallyLoc === finallyLoc) {\n\t          this.complete(entry.completion, entry.afterLoc);\n\t          resetTryEntry(entry);\n\t          return ContinueSentinel;\n\t        }\n\t      }\n\t    },\n\n\t    \"catch\": function(tryLoc) {\n\t      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n\t        var entry = this.tryEntries[i];\n\t        if (entry.tryLoc === tryLoc) {\n\t          var record = entry.completion;\n\t          if (record.type === \"throw\") {\n\t            var thrown = record.arg;\n\t            resetTryEntry(entry);\n\t          }\n\t          return thrown;\n\t        }\n\t      }\n\n\t      // The context.catch method must only be called with a location\n\t      // argument that corresponds to a known catch block.\n\t      throw new Error(\"illegal catch attempt\");\n\t    },\n\n\t    delegateYield: function(iterable, resultName, nextLoc) {\n\t      this.delegate = {\n\t        iterator: values(iterable),\n\t        resultName: resultName,\n\t        nextLoc: nextLoc\n\t      };\n\n\t      if (this.method === \"next\") {\n\t        // Deliberately forget the last sent value so that we don't\n\t        // accidentally pass it on to the delegate.\n\t        this.arg = undefined;\n\t      }\n\n\t      return ContinueSentinel;\n\t    }\n\t  };\n\t})(\n\t  // In sloppy mode, unbound `this` refers to the global object, fallback to\n\t  // Function constructor if we're in global strict mode. That is sadly a form\n\t  // of indirect eval which violates Content Security Policy.\n\t  (function() { return this })() || Function(\"return this\")()\n\t);\n\t});\n\n\t/**\n\t * Copyright (c) 2014-present, Facebook, Inc.\n\t *\n\t * This source code is licensed under the MIT license found in the\n\t * LICENSE file in the root directory of this source tree.\n\t */\n\n\t// This method of obtaining a reference to the global object needs to be\n\t// kept identical to the way it is obtained in runtime.js\n\tvar g = (function() { return this })() || Function(\"return this\")();\n\n\t// Use `getOwnPropertyNames` because not all browsers support calling\n\t// `hasOwnProperty` on the global `self` object in a worker. See #183.\n\tvar hadRuntime = g.regeneratorRuntime &&\n\t  Object.getOwnPropertyNames(g).indexOf(\"regeneratorRuntime\") >= 0;\n\n\t// Save the old regeneratorRuntime in case it needs to be restored later.\n\tvar oldRuntime = hadRuntime && g.regeneratorRuntime;\n\n\t// Force reevalutation of runtime.js.\n\tg.regeneratorRuntime = undefined;\n\n\tvar runtimeModule = runtime;\n\n\tif (hadRuntime) {\n\t  // Restore the original runtime.\n\t  g.regeneratorRuntime = oldRuntime;\n\t} else {\n\t  // Remove the global property added by runtime.js.\n\t  try {\n\t    delete g.regeneratorRuntime;\n\t  } catch(e) {\n\t    g.regeneratorRuntime = undefined;\n\t  }\n\t}\n\n\tvar regenerator = runtimeModule;\n\n\tvar defaultOptions = {\n\t  mode: 'index'\n\t};\n\n\tmodule.exports = /*#__PURE__*/regenerator.mark(function _callee(M, N, options) {\n\t  var a, c, b, p, x, y, z, i, twiddle;\n\t  return regenerator.wrap(function _callee$(_context) {\n\t    while (1) {\n\t      switch (_context.prev = _context.next) {\n\t        case 0:\n\t          twiddle = function twiddle() {\n\t            var i, j, k;\n\t            j = 1;\n\t            while (p[j] <= 0) {\n\t              j++;\n\t            }\n\t            if (p[j - 1] === 0) {\n\t              for (i = j - 1; i !== 1; i--) {\n\t                p[i] = -1;\n\t              }\n\t              p[j] = 0;\n\t              x = z = 0;\n\t              p[1] = 1;\n\t              y = j - 1;\n\t            } else {\n\t              if (j > 1) {\n\t                p[j - 1] = 0;\n\t              }\n\t              do {\n\t                j++;\n\t              } while (p[j] > 0);\n\t              k = j - 1;\n\t              i = j;\n\t              while (p[i] === 0) {\n\t                p[i++] = -1;\n\t              }\n\t              if (p[i] === -1) {\n\t                p[i] = p[k];\n\t                z = p[k] - 1;\n\t                x = i - 1;\n\t                y = k - 1;\n\t                p[k] = -1;\n\t              } else {\n\t                if (i === p[0]) {\n\t                  return 0;\n\t                } else {\n\t                  p[j] = p[i];\n\t                  z = p[i] - 1;\n\t                  p[i] = 0;\n\t                  x = j - 1;\n\t                  y = i - 1;\n\t                }\n\t              }\n\t            }\n\t            return 1;\n\t          };\n\n\t          options = Object.assign({}, defaultOptions, options);\n\t          a = new Array(N);\n\t          c = new Array(M);\n\t          b = new Array(N);\n\t          p = new Array(N + 2);\n\n\n\t          // init a and b\n\t          for (i = 0; i < N; i++) {\n\t            a[i] = i;\n\t            if (i < N - M) b[i] = 0;else b[i] = 1;\n\t          }\n\n\t          // init c\n\t          for (i = 0; i < M; i++) {\n\t            c[i] = N - M + i;\n\t          }\n\n\t          // init p\n\t          for (i = 0; i < p.length; i++) {\n\t            if (i === 0) p[i] = N + 1;else if (i <= N - M) p[i] = 0;else if (i <= N) p[i] = i - N + M;else p[i] = -2;\n\t          }\n\n\t          if (!(options.mode === 'index')) {\n\t            _context.next = 20;\n\t            break;\n\t          }\n\n\t          _context.next = 12;\n\t          return c.slice();\n\n\t        case 12:\n\t          if (!twiddle()) {\n\t            _context.next = 18;\n\t            break;\n\t          }\n\n\t          c[z] = a[x];\n\t          _context.next = 16;\n\t          return c.slice();\n\n\t        case 16:\n\t          _context.next = 12;\n\t          break;\n\n\t        case 18:\n\t          _context.next = 33;\n\t          break;\n\n\t        case 20:\n\t          if (!(options.mode === 'mask')) {\n\t            _context.next = 32;\n\t            break;\n\t          }\n\n\t          _context.next = 23;\n\t          return b.slice();\n\n\t        case 23:\n\t          if (!twiddle()) {\n\t            _context.next = 30;\n\t            break;\n\t          }\n\n\t          b[x] = 1;\n\t          b[y] = 0;\n\t          _context.next = 28;\n\t          return b.slice();\n\n\t        case 28:\n\t          _context.next = 23;\n\t          break;\n\n\t        case 30:\n\t          _context.next = 33;\n\t          break;\n\n\t        case 32:\n\t          throw new Error('Invalid mode');\n\n\t        case 33:\n\t        case 'end':\n\t          return _context.stop();\n\t      }\n\t    }\n\t  }, _callee, this);\n\t});\n\n})));\n","/**\n * get folds indexes\n * @param {Array} features\n * @param {Number} k - number of folds, a\n */\nexport function getFolds(features, k = 5) {\n  let N = features.length;\n  let allIdx = new Array(N);\n  for (let i = 0; i < N; i++) {\n    allIdx[i] = i;\n  }\n\n  let l = Math.floor(N / k);\n  // create random k-folds\n  let current = [];\n  let folds = [];\n  while (allIdx.length) {\n    let randi = Math.floor(Math.random() * allIdx.length);\n    current.push(allIdx[randi]);\n    allIdx.splice(randi, 1);\n    if (current.length === l) {\n      folds.push(current);\n      current = [];\n    }\n  }\n  // we push the remaining to the last fold so that the total length is\n  // preserved. Otherwise the Q2 will fail.\n  if (current.length) current.forEach((e) => folds[k - 1].push(e));\n  folds = folds.slice(0, k);\n\n  let foldsIndex = folds.map((x, idx) => ({\n    testIndex: x,\n    trainIndex: [].concat(...folds.filter((el, idx2) => idx2 !== idx)),\n  }));\n  return foldsIndex;\n}\n","/**\n * A function to sample a dataset maintaining classes equilibrated\n * @param {Array} classVector - an array containing class or group information\n * @param {Number} fraction - a fraction of the class to sample\n * @return {Object} - an object with indexes\n */\n\nexport function sampleAClass(classVector, fraction) {\n  // sort the vector\n  let classVectorSorted = JSON.parse(JSON.stringify(classVector));\n  let result = Array.from(Array(classVectorSorted.length).keys()).sort((a, b) =>\n    classVectorSorted[a] < classVectorSorted[b]\n      ? -1\n      : (classVectorSorted[b] < classVectorSorted[a]) | 0,\n  );\n  classVectorSorted.sort((a, b) => (a < b ? -1 : (b < a) | 0));\n\n  // counts the class elements\n  let counts = {};\n  classVectorSorted.forEach((x) => (counts[x] = (counts[x] || 0) + 1));\n\n  // pick a few per class\n  let indexOfSelected = [];\n\n  Object.keys(counts).forEach((e, i) => {\n    let shift = [];\n    Object.values(counts).reduce((a, c, item) => (shift[item] = a + c), 0);\n\n    let arr = [...Array(counts[e]).keys()];\n\n    let r = [];\n    for (let j = 0; j < Math.floor(counts[e] * fraction); j++) {\n      let n = arr[Math.floor(Math.random() * arr.length)];\n      r.push(n);\n      let ind = arr.indexOf(n);\n      arr.splice(ind, 1);\n    }\n\n    if (i === 0) {\n      indexOfSelected = indexOfSelected.concat(r);\n    } else {\n      indexOfSelected = indexOfSelected.concat(r.map((x) => x + shift[i - 1]));\n    }\n  });\n\n  // sort back the index\n  let trainIndex = [];\n  indexOfSelected.forEach((e) => trainIndex.push(result[e]));\n\n  let testIndex = [];\n  let mask = [];\n  classVector.forEach((el, idx) => {\n    if (trainIndex.includes(idx)) {\n      mask.push(true);\n    } else {\n      mask.push(false);\n      testIndex.push(idx);\n    }\n  });\n  return { trainIndex, testIndex, mask };\n}\n","import ConfusionMatrix from 'ml-confusion-matrix';\nimport combinations from 'ml-combinations';\n\nimport { getFolds } from './getFolds.js';\n\nexport { sampleAClass } from './sampleAClass.js';\nexport { getFolds } from './getFolds.js';\n\n/**\n * Performs a leave-one-out cross-validation (LOO-CV) of the given samples. In LOO-CV, 1 observation is used as the\n * validation set while the rest is used as the training set. This is repeated once for each observation. LOO-CV is a\n * special case of LPO-CV. @see leavePout\n * @param {function} Classifier - The classifier's constructor to use for the cross validation. Expect ml-classifier\n *     api.\n * @param {Array} features - The features for all samples of the data-set\n * @param {Array} labels - The classification class of all samples of the data-set\n * @param {object} classifierOptions - The classifier options with which the classifier should be instantiated.\n * @return {ConfusionMatrix} - The cross-validation confusion matrix\n */\n\nexport function leaveOneOut(Classifier, features, labels, classifierOptions) {\n  if (typeof labels === 'function') {\n    let callback = labels;\n    labels = features;\n    features = Classifier;\n    return leavePOut(features, labels, 1, callback);\n  }\n  return leavePOut(Classifier, features, labels, classifierOptions, 1);\n}\n\n/**\n * Performs a leave-p-out cross-validation (LPO-CV) of the given samples. In LPO-CV, p observations are used as the\n * validation set while the rest is used as the training set. This is repeated as many times as there are possible\n * ways to combine p observations from the set (unordered without replacement). Be aware that for relatively small\n * data-set size this can require a very large number of training and testing to do!\n * @param {function} Classifier - The classifier's constructor to use for the cross validation. Expect ml-classifier\n *     api.\n * @param {Array} features - The features for all samples of the data-set\n * @param {Array} labels - The classification class of all samples of the data-set\n * @param {object} classifierOptions - The classifier options with which the classifier should be instantiated.\n * @param {number} p - The size of the validation sub-samples' set\n * @return {ConfusionMatrix} - The cross-validation confusion matrix\n */\nexport function leavePOut(Classifier, features, labels, classifierOptions, p) {\n  let callback;\n  if (typeof classifierOptions === 'function') {\n    callback = classifierOptions;\n    p = labels;\n    labels = features;\n    features = Classifier;\n  }\n  check(features, labels);\n  const distinct = getDistinct(labels);\n  const confusionMatrix = initMatrix(distinct.length, distinct.length);\n\n  let N = features.length;\n  let gen = combinations(p, N);\n  let allIdx = new Array(N);\n  for (let i = 0; i < N; i++) {\n    allIdx[i] = i;\n  }\n  for (const testIdx of gen) {\n    let trainIdx = allIdx.slice();\n\n    for (let i = testIdx.length - 1; i >= 0; i--) {\n      trainIdx.splice(testIdx[i], 1);\n    }\n\n    if (callback) {\n      validateWithCallback(\n        features,\n        labels,\n        testIdx,\n        trainIdx,\n        confusionMatrix,\n        distinct,\n        callback,\n      );\n    } else {\n      validate(\n        Classifier,\n        features,\n        labels,\n        classifierOptions,\n        testIdx,\n        trainIdx,\n        confusionMatrix,\n        distinct,\n      );\n    }\n  }\n\n  return new ConfusionMatrix(confusionMatrix, distinct);\n}\n\n/**\n * Performs k-fold cross-validation (KF-CV). KF-CV separates the data-set into k random equally sized partitions, and\n * uses each as a validation set, with all other partitions used in the training set. Observations left over from if k\n * does not divide the number of observations are left out of the cross-validation process.\n * @param {function} Classifier - The classifier's to use for the cross validation. Expect ml-classifier api.\n * @param {Array} features - The features for all samples of the data-set\n * @param {Array} labels - The classification class of all samples of the data-set\n * @param {object} classifierOptions - The classifier options with which the classifier should be instantiated.\n * @param {number} k - The number of partitions to create\n * @return {ConfusionMatrix} - The cross-validation confusion matrix\n */\nexport function kFold(Classifier, features, labels, classifierOptions, k) {\n  let callback;\n  if (typeof classifierOptions === 'function') {\n    callback = classifierOptions;\n    k = labels;\n    labels = features;\n    features = Classifier;\n  }\n  check(features, labels);\n  const distinct = getDistinct(labels);\n  const confusionMatrix = initMatrix(distinct.length, distinct.length);\n\n  let folds = getFolds(features, k);\n\n  for (let i = 0; i < folds.length; i++) {\n    let testIdx = folds[i].testIndex;\n    let trainIdx = folds[i].trainIndex;\n\n    if (callback) {\n      validateWithCallback(\n        features,\n        labels,\n        testIdx,\n        trainIdx,\n        confusionMatrix,\n        distinct,\n        callback,\n      );\n    } else {\n      validate(\n        Classifier,\n        features,\n        labels,\n        classifierOptions,\n        testIdx,\n        trainIdx,\n        confusionMatrix,\n        distinct,\n      );\n    }\n  }\n\n  return new ConfusionMatrix(confusionMatrix, distinct);\n}\n\nfunction check(features, labels) {\n  if (features.length !== labels.length) {\n    throw new Error('features and labels should have the same length');\n  }\n}\n\nfunction initMatrix(rows, columns) {\n  return new Array(rows).fill(0).map(() => new Array(columns).fill(0));\n}\n\nfunction getDistinct(arr) {\n  let s = new Set();\n  for (let i = 0; i < arr.length; i++) {\n    s.add(arr[i]);\n  }\n  return Array.from(s);\n}\n\nfunction validate(\n  Classifier,\n  features,\n  labels,\n  classifierOptions,\n  testIdx,\n  trainIdx,\n  confusionMatrix,\n  distinct,\n) {\n  const { testFeatures, trainFeatures, testLabels, trainLabels } = getTrainTest(\n    features,\n    labels,\n    testIdx,\n    trainIdx,\n  );\n\n  let classifier;\n  if (Classifier.prototype.train) {\n    classifier = new Classifier(classifierOptions);\n    classifier.train(trainFeatures, trainLabels);\n  } else {\n    classifier = new Classifier(trainFeatures, trainLabels, classifierOptions);\n  }\n\n  let predictedLabels = classifier.predict(testFeatures);\n  updateConfusionMatrix(confusionMatrix, testLabels, predictedLabels, distinct);\n}\n\nfunction validateWithCallback(\n  features,\n  labels,\n  testIdx,\n  trainIdx,\n  confusionMatrix,\n  distinct,\n  callback,\n) {\n  const { testFeatures, trainFeatures, testLabels, trainLabels } = getTrainTest(\n    features,\n    labels,\n    testIdx,\n    trainIdx,\n  );\n  const predictedLabels = callback(trainFeatures, trainLabels, testFeatures);\n  updateConfusionMatrix(confusionMatrix, testLabels, predictedLabels, distinct);\n}\n\nfunction updateConfusionMatrix(\n  confusionMatrix,\n  testLabels,\n  predictedLabels,\n  distinct,\n) {\n  for (let i = 0; i < predictedLabels.length; i++) {\n    const actualIdx = distinct.indexOf(testLabels[i]);\n    const predictedIdx = distinct.indexOf(predictedLabels[i]);\n    if (actualIdx < 0 || predictedIdx < 0) {\n      // eslint-disable-next-line no-console\n      console.warn(`ignore unknown predicted label ${predictedLabels[i]}`);\n    }\n    confusionMatrix[actualIdx][predictedIdx]++;\n  }\n}\n\nexport function getTrainTest(features, labels, testIdx, trainIdx) {\n  return {\n    testFeatures: testIdx.map(function(index) {\n      return features[index];\n    }),\n    trainFeatures: trainIdx.map(function(index) {\n      return features[index];\n    }),\n    testLabels: testIdx.map(function(index) {\n      return labels[index];\n    }),\n    trainLabels: trainIdx.map(function(index) {\n      return labels[index];\n    }),\n  };\n}\n","import Matrix from 'ml-matrix';\n\nimport { norm } from './util/utils.js';\n\n/**\n * OPLS loop\n * @param {Array} x a matrix with features\n * @param {Array} y an array of labels (dependent variable)\n * @param {Object} options an object with options\n * @return {Object} an object with model (filteredX: err,\n    loadingsXOrtho: pOrtho,\n    scoresXOrtho: tOrtho,\n    weightsXOrtho: wOrtho,\n    weightsPred: w,\n    loadingsXpred: p,\n    scoresXpred: t,\n    loadingsY:)\n */\nexport function OPLSNipals(x, y, options = {}) {\n  const { numberOSC = 100 } = options;\n\n  let X = Matrix.checkMatrix(x);\n  let Y = Matrix.checkMatrix(y);\n\n  let u = Y.getColumnVector(0);\n\n  let diff = 1;\n  let t, c, w, uNew;\n  for (let i = 0; i < numberOSC && diff > 1e-10; i++) {\n    w = u\n      .transpose()\n      .mmul(X)\n      .div(\n        u\n          .transpose()\n          .mmul(u)\n          .get(0, 0),\n      );\n    w = w.transpose().div(norm(w));\n\n    t = X.mmul(w).div(\n      w\n        .transpose()\n        .mmul(w)\n        .get(0, 0),\n    ); // t_h paso 3\n\n    // calc loading\n    c = t\n      .transpose()\n      .mmul(Y)\n      .div(\n        t\n          .transpose()\n          .mmul(t)\n          .get(0, 0),\n      );\n\n    // calc new u and compare with one in previus iteration (stop criterion)\n    uNew = Y.mmul(c.transpose());\n    uNew = uNew.div(\n      c\n        .transpose()\n        .mmul(c)\n        .get(0, 0),\n    );\n\n    if (i > 0) {\n      diff =\n        uNew\n          .clone()\n          .sub(u)\n          .pow(2)\n          .sum() /\n        uNew\n          .clone()\n          .pow(2)\n          .sum();\n    }\n\n    u = uNew.clone();\n  }\n\n  // calc loadings\n  let p = t\n    .transpose()\n    .mmul(X)\n    .div(\n      t\n        .transpose()\n        .mmul(t)\n        .get(0, 0),\n    );\n\n  let wOrtho = p.clone().sub(\n    w\n      .transpose()\n      .mmul(p.transpose())\n      .div(\n        w\n          .transpose()\n          .mmul(w)\n          .get(0, 0),\n      )\n      .mmul(w.transpose()),\n  );\n  wOrtho.div(norm(wOrtho));\n\n  // orthogonal scores\n  let tOrtho = X.mmul(wOrtho.transpose()).div(\n    wOrtho.mmul(wOrtho.transpose()).get(0, 0),\n  );\n\n  // orthogonal loadings\n  let pOrtho = tOrtho\n    .transpose()\n    .mmul(X)\n    .div(\n      tOrtho\n        .transpose()\n        .mmul(tOrtho)\n        .get(0, 0),\n    );\n\n  // filtered data\n  let err = X.clone().sub(tOrtho.mmul(pOrtho));\n  return {\n    filteredX: err,\n    weightsXOrtho: wOrtho,\n    loadingsXOrtho: pOrtho,\n    scoresXOrtho: tOrtho,\n    weightsXPred: w,\n    loadingsXpred: p,\n    scoresXpred: t,\n    loadingsY: c,\n  };\n}\n","import { Matrix } from 'ml-matrix';\n\n/**\n * Get total sum of square\n * @param {Array} x an array\n * @return {Number} - the sum of the squares\n */\nexport function tss(x) {\n  return Matrix.mul(x, x).sum();\n}\n","import { Matrix, NIPALS } from 'ml-matrix';\nimport ConfusionMatrix from 'ml-confusion-matrix';\nimport { getFolds } from 'ml-cross-validation';\n\nimport { OPLSNipals } from './OPLSNipals.js';\nimport { tss } from './util/tss.js';\n\n/**\n * Creates new OPLS (orthogonal partial latent structures) from features and labels.\n * @param {Matrix} data - matrix containing data (X).\n * @param {Array} labels - 1D Array containing metadata (Y).\n * @param {Object} [options]\n * @param {number} [options.nComp = 3] - number of latent structures computed.\n * @param {boolean} [options.center = true] - should the data be centered (subtract the mean).\n * @param {boolean} [options.scale = false] - should the data be scaled (divide by the standard deviation).\n * @param {Array} [options.cvFolds = []] - allows to provide folds as 2D array for testing purpose.\n * */\n\nexport class OPLS {\n  constructor(data, labels, options = {}) {\n    if (data === true) {\n      const opls = options;\n      this.center = opls.center;\n      this.scale = opls.scale;\n      this.means = opls.means;\n      this.meansY = opls.meansY;\n      this.stdevs = opls.stdevs;\n      this.stdevs = opls.stdevsY;\n      this.model = opls.model;\n      this.tCV = opls.tCV;\n      this.tOrthCV = opls.tOrthCV;\n      this.yHatCV = opls.yHatCV;\n      this.mode = opls.mode;\n      return;\n    }\n\n    let features = data.clone();\n    // set default values\n    // cvFolds allows to define folds for testing purpose\n    const { nComp = 3, center = true, scale = true, cvFolds = [] } = options;\n\n    let group;\n    if (typeof labels[0] === 'number') {\n      // numeric labels: OPLS regression is used\n      this.mode = 'regression';\n      group = Matrix.from1DArray(labels.length, 1, labels);\n    } else if (typeof labels[0] === 'string') {\n      // non-numeric labels: OPLS-DA is used\n      this.mode = 'discriminantAnalysis';\n      group = labels;\n      throw new Error('discriminant analysis is not yet supported');\n    }\n\n    // check types of features and labels\n    if (features.constructor.name !== 'Matrix') {\n      throw new TypeError('features must be of class Matrix');\n    }\n    // getting center and scale the features (all)\n    this.center = center;\n    if (this.center) {\n      this.means = features.mean('column');\n      this.meansY = group.mean('column');\n    } else {\n      this.stdevs = null;\n    }\n    this.scale = scale;\n    if (this.scale) {\n      this.stdevs = features.standardDeviation('column');\n      this.stdevsY = group.standardDeviation('column');\n    } else {\n      this.means = null;\n    }\n\n    // check and remove for features with sd = 0 TODO here\n    // check opls.R line 70\n\n    let folds;\n    if (cvFolds.length > 0) {\n      folds = cvFolds;\n    } else {\n      folds = getFolds(labels, 5);\n    }\n\n    let Q2 = [];\n    this.model = [];\n\n    this.tCV = [];\n    this.tOrthCV = [];\n    this.yHatCV = [];\n    let oplsCV = [];\n\n    let modelNC = [];\n\n    // this code could be made more efficient by reverting the order of the loops\n    // this is a legacy loop to be consistent with R code from MetaboMate package\n    // this allows for having statistic (R2) from CV to decide wether to continue\n    // with more latent structures\n    let nc;\n    for (nc = 0; nc < nComp; nc++) {\n      let yHatk = new Matrix(group.rows, 1);\n      let tPredk = new Matrix(group.rows, 1);\n      let tOrthk = new Matrix(group.rows, 1);\n      let oplsk = [];\n\n      let f = 0;\n      for (let fold of folds) {\n        let trainTest = this._getTrainTest(features, group, fold);\n        let testXk = trainTest.testFeatures;\n        let Xk = trainTest.trainFeatures;\n        let Yk = trainTest.trainLabels;\n\n        // determine center and scale of training set\n        let dataCenter = Xk.mean('column');\n        let dataSD = Xk.standardDeviation('column');\n\n        // center and scale training set\n        if (center) {\n          Xk.center('column');\n          Yk.center('column');\n        }\n\n        if (scale) {\n          Xk.scale('column');\n          Yk.scale('column');\n        }\n\n        // perform opls\n        if (nc === 0) {\n          oplsk[f] = OPLSNipals(Xk, Yk);\n        } else {\n          oplsk[f] = OPLSNipals(oplsCV[nc - 1][f].filteredX, Yk);\n        }\n        // store model for next component\n        oplsCV[nc] = oplsk;\n\n        let plsCV = new NIPALS(oplsk[f].filteredX, { Y: Yk });\n\n        // scaling the test dataset with respect to the train\n        testXk.center('column', { center: dataCenter });\n        testXk.scale('column', { scale: dataSD });\n\n        let Eh = testXk;\n        // removing the orthogonal components from PLS\n        let scores;\n        for (let idx = 0; idx < nc + 1; idx++) {\n          scores = Eh.mmul(oplsCV[idx][f].weightsXOrtho.transpose()); // ok\n          Eh.sub(scores.mmul(oplsCV[idx][f].loadingsXOrtho));\n        }\n\n        // prediction\n        let tPred = Eh.mmul(plsCV.w.transpose());\n        // this should be summed over ncomp (pls_prediction.R line 23)\n        let yHat = tPred.mmul(plsCV.betas); // ok\n\n        // adding all prediction from all folds\n        for (let i = 0; i < fold.testIndex.length; i++) {\n          yHatk.setRow(fold.testIndex[i], [yHat.get(i, 0)]);\n          tPredk.setRow(fold.testIndex[i], [tPred.get(i, 0)]);\n          tOrthk.setRow(fold.testIndex[i], [scores.get(i, 0)]);\n        }\n        f++;\n      } // end of loop over folds\n\n      this.tCV.push(tPredk);\n      this.tOrthCV.push(tOrthk);\n      this.yHatCV.push(yHatk);\n\n      // calculate Q2y for all the prediction (all folds)\n      // ROC for DA is not implemented (check opls.R line 183) TODO\n      if (this.mode === 'regression') {\n        let tssy = tss(group.center('column').scale('column'));\n        let press = tss(group.clone().sub(yHatk));\n        let Q2y = 1 - press / tssy;\n        Q2.push(Q2y);\n      } else if (this.mode === 'discriminantAnalysis') {\n        throw new Error('discriminant analysis is not yet supported');\n      }\n\n      // calculate the R2y for the complete data\n      if (nc === 0) {\n        modelNC = this._predictAll(features, group);\n      } else {\n        modelNC = this._predictAll(\n          modelNC.xRes,\n          group,\n          (options = { scale: false, center: false }),\n        );\n      }\n\n      // adding the predictive statistics from CV\n      modelNC.Q2y = Q2;\n      // store the model for each component\n      this.model.push(modelNC);\n      // console.warn(`OPLS iteration over # of Components: ${nc + 1}`);\n    } // end of loop over nc\n\n    // store scores from CV\n    let tCV = this.tCV;\n    let tOrthCV = this.tOrthCV;\n\n    let m = this.model[nc - 1];\n    let XOrth = m.XOrth;\n    let FeaturesCS = features.center('column').scale('column');\n    let labelsCS = group.center('column').scale('column');\n    let Xres = FeaturesCS.clone().sub(XOrth);\n    let plsCall = new NIPALS(Xres, { Y: labelsCS });\n    let E = Xres.clone().sub(plsCall.t.mmul(plsCall.p));\n\n    let R2x = this.model.map((x) => x.R2x);\n    let R2y = this.model.map((x) => x.R2y);\n\n    this.output = {\n      Q2y: Q2,\n      R2x,\n      R2y,\n      tPred: m.plsC.t,\n      pPred: m.plsC.p,\n      wPred: m.plsC.w,\n      betasPred: m.plsC.betas,\n      Qpc: m.plsC.q,\n      tCV,\n      tOrthCV,\n      tOrth: m.tOrth,\n      pOrth: m.pOrth,\n      wOrth: m.wOrth,\n      XOrth,\n      yHat: m.totalPred,\n      Yres: m.plsC.yResidual,\n      E,\n    };\n  }\n\n  /**\n   * get access to all the computed elements\n   * Mainly for debug and testing\n   * @return {Object} output object\n   */\n  getLogs() {\n    return this.output;\n  }\n\n  getScores() {\n    let scoresX = this.tCV.map((x) => x.to1DArray());\n    let scoresY = this.tOrthCV.map((x) => x.to1DArray());\n    return { scoresX, scoresY };\n  }\n\n  /**\n   * Load an OPLS model from JSON\n   * @param {Object} model\n   * @return {OPLS}\n   */\n  static load(model) {\n    if (typeof model.name !== 'string') {\n      throw new TypeError('model must have a name property');\n    }\n    if (model.name !== 'OPLS') {\n      throw new RangeError(`invalid model: ${model.name}`);\n    }\n    return new OPLS(true, [], model);\n  }\n\n  /**\n   * Export the current model to a JSON object\n   * @return {Object} model\n   */\n  toJSON() {\n    return {\n      name: 'OPLS',\n      center: this.center,\n      scale: this.scale,\n      means: this.means,\n      stdevs: this.stdevs,\n      model: this.model,\n      tCV: this.tCV,\n      tOrthCV: this.tOrthCV,\n      yHatCV: this.yHatCV,\n    };\n  }\n\n  /**\n   * Predict scores for new data\n   * @param {Matrix} features - a matrix containing new data\n   * @param {Object} [options]\n   * @param {Array} [options.trueLabel] - an array with true values to compute confusion matrix\n   * @param {Number} [options.nc] - the number of components to be used\n   * @return {Object} - predictions\n   */\n  predict(newData, options = {}) {\n    let { trueLabels = [], nc = 1 } = options;\n    let labels = [];\n    if (trueLabels.length > 0) {\n      trueLabels = Matrix.from1DArray(trueLabels.length, 1, trueLabels);\n      labels = trueLabels.clone();\n    }\n\n    let features = newData.clone();\n\n    // scaling the test dataset with respect to the train\n    if (this.center) {\n      features.center('column', { center: this.means });\n      if (labels.rows > 0 && this.mode === 'regression') {\n        labels.center('column', { center: this.meansY });\n      }\n    }\n    if (this.scale) {\n      features.scale('column', { scale: this.stdevs });\n      if (labels.rows > 0 && this.mode === 'regression') {\n        labels.scale('column', { scale: this.stdevsY });\n      }\n    }\n\n    let Eh = features.clone();\n    // removing the orthogonal components from PLS\n    let tOrth;\n    let wOrth;\n    let pOrth;\n    let yHat;\n    let tPred;\n\n    for (let idx = 0; idx < nc; idx++) {\n      wOrth = this.model[idx].wOrth.transpose();\n      pOrth = this.model[idx].pOrth;\n      tOrth = Eh.mmul(wOrth);\n      Eh.sub(tOrth.mmul(pOrth));\n      // prediction\n      tPred = Eh.mmul(this.model[idx].plsC.w.transpose());\n      // this should be summed over ncomp (pls_prediction.R line 23)\n      yHat = tPred.mmul(this.model[idx].plsC.betas);\n    }\n\n    if (labels.rows > 0) {\n      if (this.mode === 'regression') {\n        let tssy = tss(labels);\n        let press = tss(labels.clone().sub(yHat));\n        let Q2y = 1 - press / tssy;\n\n        return { tPred, tOrth, yHat, Q2y };\n      } else if (this.mode === 'discriminantAnalysis') {\n        let confusionMatrix = [];\n        confusionMatrix = ConfusionMatrix.fromLabels(\n          trueLabels.to1DArray(),\n          yHat.to1DArray(),\n        );\n\n        return { tPred, tOrth, yHat, confusionMatrix };\n      }\n    } else {\n      return { tPred, tOrth, yHat };\n    }\n  }\n\n  _predictAll(features, labels, options = {}) {\n    // cannot use the global this.center here\n    // since it is used in the NC loop and\n    // centering and scaling should only be\n    // performed once\n    const { center = true, scale = true } = options;\n\n    if (center) {\n      features.center('column');\n      labels.center('column');\n    }\n\n    if (scale) {\n      features.scale('column');\n      labels.scale('column');\n      // reevaluate tssy and tssx after scaling\n      // must be global because re-used for next nc iteration\n      // tssx is only evaluate the first time\n      this.tssy = tss(labels);\n      this.tssx = tss(features);\n    }\n\n    let oplsC = OPLSNipals(features, labels);\n    let plsC = new NIPALS(oplsC.filteredX, { Y: labels });\n\n    let tPred = oplsC.filteredX.mmul(plsC.w.transpose());\n    let yHat = tPred.mmul(plsC.betas);\n\n    let rss = tss(labels.clone().sub(yHat));\n    let R2y = 1 - rss / this.tssy;\n\n    let xEx = plsC.t.mmul(plsC.p);\n    let rssx = tss(xEx);\n    let R2x = rssx / this.tssx;\n\n    return {\n      R2y,\n      R2x,\n      xRes: oplsC.filteredX,\n      tOrth: oplsC.scoresXOrtho,\n      pOrth: oplsC.loadingsXOrtho,\n      wOrth: oplsC.weightsXOrtho,\n      tPred: tPred,\n      totalPred: yHat,\n      XOrth: oplsC.scoresXOrtho.mmul(oplsC.loadingsXOrtho),\n      oplsC,\n      plsC,\n    };\n  }\n  /**\n   *\n   * @param {*} X - dataset matrix object\n   * @param {*} group - labels matrix object\n   * @param {*} index - train and test index (output from getFold())\n   */\n  _getTrainTest(X, group, index) {\n    let testFeatures = new Matrix(index.testIndex.length, X.columns);\n    let testLabels = new Matrix(index.testIndex.length, 1);\n    index.testIndex.forEach((el, idx) => {\n      testFeatures.setRow(idx, X.getRow(el));\n      testLabels.setRow(idx, group.getRow(el));\n    });\n\n    let trainFeatures = new Matrix(index.trainIndex.length, X.columns);\n    let trainLabels = new Matrix(index.trainIndex.length, 1);\n    index.trainIndex.forEach((el, idx) => {\n      trainFeatures.setRow(idx, X.getRow(el));\n      trainLabels.setRow(idx, group.getRow(el));\n    });\n\n    return {\n      trainFeatures,\n      testFeatures,\n      trainLabels,\n      testLabels,\n    };\n  }\n}\n","'use strict';\n\nvar mlMatrix = require('ml-matrix');\n\nfunction logistic(val) {\n  return 1 / (1 + Math.exp(-val));\n}\n\nfunction expELU(val, param) {\n  return val < 0 ? param * (Math.exp(val) - 1) : val;\n}\n\nfunction softExponential(val, param) {\n  if (param < 0) {\n    return -Math.log(1 - param * (val + param)) / param;\n  }\n  if (param > 0) {\n    return ((Math.exp(param * val) - 1) / param) + param;\n  }\n  return val;\n}\n\nfunction softExponentialPrime(val, param) {\n  if (param < 0) {\n    return 1 / (1 - param * (param + val));\n  } else {\n    return Math.exp(param * val);\n  }\n}\n\nconst ACTIVATION_FUNCTIONS = {\n  tanh: {\n    activation: Math.tanh,\n    derivate: (val) => 1 - (val * val)\n  },\n  identity: {\n    activation: (val) => val,\n    derivate: () => 1\n  },\n  logistic: {\n    activation: logistic,\n    derivate: (val) => logistic(val) * (1 - logistic(val))\n  },\n  arctan: {\n    activation: Math.atan,\n    derivate: (val) => 1 / (val * val + 1)\n  },\n  softsign: {\n    activation: (val) => val / (1 + Math.abs(val)),\n    derivate: (val) => 1 / ((1 + Math.abs(val)) * (1 + Math.abs(val)))\n  },\n  relu: {\n    activation: (val) => (val < 0 ? 0 : val),\n    derivate: (val) => (val < 0 ? 0 : 1)\n  },\n  softplus: {\n    activation: (val) => Math.log(1 + Math.exp(val)),\n    derivate: (val) => 1 / (1 + Math.exp(-val))\n  },\n  bent: {\n    activation: (val) => ((Math.sqrt(val * val + 1) - 1) / 2) + val,\n    derivate: (val) => (val / (2 * Math.sqrt(val * val + 1))) + 1\n  },\n  sinusoid: {\n    activation: Math.sin,\n    derivate: Math.cos\n  },\n  sinc: {\n    activation: (val) => (val === 0 ? 1 : Math.sin(val) / val),\n    derivate: (val) => (val === 0 ? 0 : (Math.cos(val) / val) - (Math.sin(val) / (val * val)))\n  },\n  gaussian: {\n    activation: (val) => Math.exp(-(val * val)),\n    derivate: (val) => -2 * val * Math.exp(-(val * val))\n  },\n  'parametric-relu': {\n    activation: (val, param) => (val < 0 ? param * val : val),\n    derivate: (val, param) => (val < 0 ? param : 1)\n  },\n  'exponential-elu': {\n    activation: expELU,\n    derivate: (val, param) => (val < 0 ? expELU(val, param) + param : 1)\n  },\n  'soft-exponential': {\n    activation: softExponential,\n    derivate: softExponentialPrime\n  }\n};\n\nclass Layer {\n  /**\n     * @private\n     * Create a new layer with the given options\n     * @param {object} options\n     * @param {number} [options.inputSize] - Number of conections that enter the neurons.\n     * @param {number} [options.outputSize] - Number of conections that leave the neurons.\n     * @param {number} [options.regularization] - Regularization parameter.\n     * @param {number} [options.epsilon] - Learning rate parameter.\n     * @param {string} [options.activation] - Activation function parameter from the FeedForwardNeuralNetwork class.\n     * @param {number} [options.activationParam] - Activation parameter if needed.\n     */\n  constructor(options) {\n    this.inputSize = options.inputSize;\n    this.outputSize = options.outputSize;\n    this.regularization = options.regularization;\n    this.epsilon = options.epsilon;\n    this.activation = options.activation;\n    this.activationParam = options.activationParam;\n\n    var selectedFunction = ACTIVATION_FUNCTIONS[options.activation];\n    var params = selectedFunction.activation.length;\n\n    var actFunction = params > 1 ? (val) => selectedFunction.activation(val, options.activationParam) : selectedFunction.activation;\n    var derFunction = params > 1 ? (val) => selectedFunction.derivate(val, options.activationParam) : selectedFunction.derivate;\n\n    this.activationFunction = function (i, j) {\n      this.set(i, j, actFunction(this.get(i, j)));\n    };\n    this.derivate = function (i, j) {\n      this.set(i, j, derFunction(this.get(i, j)));\n    };\n\n    if (options.model) {\n      // load model\n      this.W = mlMatrix.Matrix.checkMatrix(options.W);\n      this.b = mlMatrix.Matrix.checkMatrix(options.b);\n    } else {\n      // default constructor\n      this.W = mlMatrix.Matrix.rand(this.inputSize, this.outputSize);\n      this.b = mlMatrix.Matrix.zeros(1, this.outputSize);\n\n      this.W.apply(function (i, j) {\n        this.set(i, j, this.get(i, j) / Math.sqrt(options.inputSize));\n      });\n    }\n  }\n\n  /**\n     * @private\n     * propagate the given input through the current layer.\n     * @param {Matrix} X - input.\n     * @return {Matrix} output at the current layer.\n     */\n  forward(X) {\n    var z = X.mmul(this.W).addRowVector(this.b);\n    z.apply(this.activationFunction);\n    this.a = z.clone();\n    return z;\n  }\n\n  /**\n     * @private\n     * apply backpropagation algorithm at the current layer\n     * @param {Matrix} delta - delta values estimated at the following layer.\n     * @param {Matrix} a - 'a' values from the following layer.\n     * @return {Matrix} the new delta values for the next layer.\n     */\n  backpropagation(delta, a) {\n    this.dW = a.transpose().mmul(delta);\n    this.db = mlMatrix.Matrix.rowVector(delta.sum('column'));\n\n    var aCopy = a.clone();\n    return delta.mmul(this.W.transpose()).mul(aCopy.apply(this.derivate));\n  }\n\n  /**\n     * @private\n     * Function that updates the weights at the current layer with the derivatives.\n     */\n  update() {\n    this.dW.add(this.W.clone().mul(this.regularization));\n    this.W.add(this.dW.mul(-this.epsilon));\n    this.b.add(this.db.mul(-this.epsilon));\n  }\n\n  /**\n     * @private\n     * Export the current layer to JSON.\n     * @return {object} model\n     */\n  toJSON() {\n    return {\n      model: 'Layer',\n      inputSize: this.inputSize,\n      outputSize: this.outputSize,\n      regularization: this.regularization,\n      epsilon: this.epsilon,\n      activation: this.activation,\n      W: this.W,\n      b: this.b\n    };\n  }\n\n  /**\n     * @private\n     * Creates a new Layer with the given model.\n     * @param {object} model\n     * @return {Layer}\n     */\n  static load(model) {\n    if (model.model !== 'Layer') {\n      throw new RangeError('the current model is not a Layer model');\n    }\n    return new Layer(model);\n  }\n}\n\nclass OutputLayer extends Layer {\n  constructor(options) {\n    super(options);\n\n    this.activationFunction = function (i, j) {\n      this.set(i, j, Math.exp(this.get(i, j)));\n    };\n  }\n\n  static load(model) {\n    if (model.model !== 'Layer') {\n      throw new RangeError('the current model is not a Layer model');\n    }\n\n    return new OutputLayer(model);\n  }\n}\n\nclass FeedForwardNeuralNetworks {\n  /**\n   * Create a new Feedforward neural network model.\n   * @class FeedForwardNeuralNetworks\n   * @param {object} [options]\n   * @param {Array} [options.hiddenLayers=[10]] - Array that contains the sizes of the hidden layers.\n   * @param {number} [options.iterations=50] - Number of iterations at the training step.\n   * @param {number} [options.learningRate=0.01] - Learning rate of the neural net (also known as epsilon).\n   * @param {number} [options.regularization=0.01] - Regularization parameter af the neural net.\n   * @param {string} [options.activation='tanh'] - activation function to be used. (options: 'tanh'(default),\n   * 'identity', 'logistic', 'arctan', 'softsign', 'relu', 'softplus', 'bent', 'sinusoid', 'sinc', 'gaussian').\n   * (single-parametric options: 'parametric-relu', 'exponential-relu', 'soft-exponential').\n   * @param {number} [options.activationParam=1] - if the selected activation function needs a parameter.\n   */\n  constructor(options) {\n    options = options || {};\n    if (options.model) {\n      // load network\n      this.hiddenLayers = options.hiddenLayers;\n      this.iterations = options.iterations;\n      this.learningRate = options.learningRate;\n      this.regularization = options.regularization;\n      this.dicts = options.dicts;\n      this.activation = options.activation;\n      this.activationParam = options.activationParam;\n      this.model = new Array(options.layers.length);\n\n      for (var i = 0; i < this.model.length - 1; ++i) {\n        this.model[i] = Layer.load(options.layers[i]);\n      }\n      this.model[this.model.length - 1] = OutputLayer.load(options.layers[this.model.length - 1]);\n    } else {\n      // default constructor\n      this.hiddenLayers = options.hiddenLayers || [10];\n      this.iterations = options.iterations || 50;\n\n      this.learningRate = options.learningRate || 0.01;\n      this.regularization = options.regularization || 0.01;\n\n      this.activation = options.activation || 'tanh';\n      this.activationParam = options.activationParam || 1;\n      if (!(this.activation in Object.keys(ACTIVATION_FUNCTIONS))) {\n        this.activation = 'tanh';\n      }\n    }\n  }\n\n  /**\n   * @private\n   * Function that build and initialize the neural net.\n   * @param {number} inputSize - total of features to fit.\n   * @param {number} outputSize - total of labels of the prediction set.\n   */\n  buildNetwork(inputSize, outputSize) {\n    var size = 2 + (this.hiddenLayers.length - 1);\n    this.model = new Array(size);\n\n    // input layer\n    this.model[0] = new Layer({\n      inputSize: inputSize,\n      outputSize: this.hiddenLayers[0],\n      activation: this.activation,\n      activationParam: this.activationParam,\n      regularization: this.regularization,\n      epsilon: this.learningRate\n    });\n\n    // hidden layers\n    for (var i = 1; i < this.hiddenLayers.length; ++i) {\n      this.model[i] = new Layer({\n        inputSize: this.hiddenLayers[i - 1],\n        outputSize: this.hiddenLayers[i],\n        activation: this.activation,\n        activationParam: this.activationParam,\n        regularization: this.regularization,\n        epsilon: this.learningRate\n      });\n    }\n\n    // output layer\n    this.model[size - 1] = new OutputLayer({\n      inputSize: this.hiddenLayers[this.hiddenLayers.length - 1],\n      outputSize: outputSize,\n      activation: this.activation,\n      activationParam: this.activationParam,\n      regularization: this.regularization,\n      epsilon: this.learningRate\n    });\n  }\n\n  /**\n   * Train the neural net with the given features and labels.\n   * @param {Matrix|Array} features\n   * @param {Matrix|Array} labels\n   */\n  train(features, labels) {\n    features = mlMatrix.Matrix.checkMatrix(features);\n    this.dicts = dictOutputs(labels);\n\n    var inputSize = features.columns;\n    var outputSize = Object.keys(this.dicts.inputs).length;\n\n    if (!this.model) {\n      this.buildNetwork(inputSize, outputSize);\n    }\n\n    for (var i = 0; i < this.iterations; ++i) {\n      var probabilities = this.propagate(features);\n      this.backpropagation(features, labels, probabilities);\n    }\n  }\n\n  /**\n   * @private\n   * Propagate the input(training set) and retrives the probabilities of each class.\n   * @param {Matrix} X\n   * @return {Matrix} probabilities of each class.\n   */\n  propagate(X) {\n    var input = X;\n    for (var i = 0; i < this.model.length; ++i) {\n      input = this.model[i].forward(input);\n    }\n\n    // get probabilities\n    return input.divColumnVector(input.sum('row'));\n  }\n\n  /**\n   * @private\n   * Function that applies the backpropagation algorithm on each layer of the network\n   * in order to fit the features and labels.\n   * @param {Matrix} features\n   * @param {Array} labels\n   * @param {Matrix} probabilities - probabilities of each class of the feature set.\n   */\n  backpropagation(features, labels, probabilities) {\n    for (var i = 0; i < probabilities.rows; ++i) {\n      probabilities.set(i, this.dicts.inputs[labels[i]], probabilities.get(i, this.dicts.inputs[labels[i]]) - 1);\n    }\n\n    // remember, the last delta doesn't matter\n    var delta = probabilities;\n    for (i = this.model.length - 1; i >= 0; --i) {\n      var a = i > 0 ? this.model[i - 1].a : features;\n      delta = this.model[i].backpropagation(delta, a);\n    }\n\n    for (i = 0; i < this.model.length; ++i) {\n      this.model[i].update();\n    }\n  }\n\n  /**\n   * Predict the output given the feature set.\n   * @param {Array|Matrix} features\n   * @return {Array}\n   */\n  predict(features) {\n    features = mlMatrix.Matrix.checkMatrix(features);\n    var outputs = new Array(features.rows);\n    var probabilities = this.propagate(features);\n    for (var i = 0; i < features.rows; ++i) {\n      outputs[i] = this.dicts.outputs[probabilities.maxRowIndex(i)[1]];\n    }\n\n    return outputs;\n  }\n\n  /**\n   * Export the current model to JSON.\n   * @return {object} model\n   */\n  toJSON() {\n    var model = {\n      model: 'FNN',\n      hiddenLayers: this.hiddenLayers,\n      iterations: this.iterations,\n      learningRate: this.learningRate,\n      regularization: this.regularization,\n      activation: this.activation,\n      activationParam: this.activationParam,\n      dicts: this.dicts,\n      layers: new Array(this.model.length)\n    };\n\n    for (var i = 0; i < this.model.length; ++i) {\n      model.layers[i] = this.model[i].toJSON();\n    }\n\n    return model;\n  }\n\n  /**\n   * Load a Feedforward Neural Network with the current model.\n   * @param {object} model\n   * @return {FeedForwardNeuralNetworks}\n   */\n  static load(model) {\n    if (model.model !== 'FNN') {\n      throw new RangeError('the current model is not a feed forward network');\n    }\n\n    return new FeedForwardNeuralNetworks(model);\n  }\n}\n\n/**\n * @private\n * Method that given an array of labels(predictions), returns two dictionaries, one to transform from labels to\n * numbers and other in the reverse way\n * @param {Array} array\n * @return {object}\n */\nfunction dictOutputs(array) {\n  var inputs = {};\n  var outputs = {};\n  var index = 0;\n  for (var i = 0; i < array.length; i += 1) {\n    if (inputs[array[i]] === undefined) {\n      inputs[array[i]] = index;\n      outputs[index] = array[i];\n      index++;\n    }\n  }\n\n  return {\n    inputs: inputs,\n    outputs: outputs\n  };\n}\n\nmodule.exports = FeedForwardNeuralNetworks;\n","function NodeSquare(x, y, weights, som) {\n    this.x = x;\n    this.y = y;\n    this.weights = weights;\n    this.som = som;\n    this.neighbors = {};\n}\n\nNodeSquare.prototype.adjustWeights = function adjustWeights(target, learningRate, influence) {\n    for (var i = 0, ii = this.weights.length; i < ii; i++) {\n        this.weights[i] += learningRate * influence * (target[i] - this.weights[i]);\n    }\n};\n\nNodeSquare.prototype.getDistance = function getDistance(otherNode) {\n    return Math.max(Math.abs(this.x - otherNode.x), Math.abs(this.y - otherNode.y));\n};\n\nNodeSquare.prototype.getDistanceTorus = function getDistanceTorus(otherNode) {\n    var distX = Math.abs(this.x - otherNode.x),\n        distY = Math.abs(this.y - otherNode.y);\n    return Math.max(Math.min(distX, this.som.gridDim.x - distX), Math.min(distY, this.som.gridDim.y - distY));\n};\n\nNodeSquare.prototype.getNeighbors = function getNeighbors(xy) {\n    if (!this.neighbors[xy]) {\n        this.neighbors[xy] = new Array(2);\n\n        // left or bottom neighbor\n        var v;\n        if (this[xy] > 0) {\n            v = this[xy] - 1;\n        } else if (this.som.torus) {\n            v = this.som.gridDim[xy] - 1\n        }\n        if (typeof v !== 'undefined') {\n            var x, y;\n            if (xy === 'x') {\n                x = v;\n                y = this.y;\n            } else {\n                x = this.x;\n                y = v;\n            }\n            this.neighbors[xy][0] = this.som.nodes[x][y];\n        }\n\n        // top or right neighbor\n        var w;\n        if (this[xy] < (this.som.gridDim[xy] - 1)) {\n            w = this[xy] + 1;\n        } else if (this.som.torus) {\n            w = 0;\n        }\n        if (typeof w !== 'undefined') {\n            if (xy === 'x') {\n                x = w;\n                y = this.y;\n            } else {\n                x = this.x;\n                y = w;\n            }\n            this.neighbors[xy][1] = this.som.nodes[x][y];\n        }\n    }\n    return this.neighbors[xy];\n};\n\nNodeSquare.prototype.getPos = function getPos(xy, element) {\n    var neighbors = this.getNeighbors(xy),\n        distance = this.som.distance,\n        bestNeighbor,\n        direction;\n    if(neighbors[0]) {\n        if (neighbors[1]) {\n            var dist1 = distance(element, neighbors[0].weights),\n                dist2 = distance(element, neighbors[1].weights);\n            if(dist1 < dist2) {\n                bestNeighbor = neighbors[0];\n                direction = -1;\n            } else {\n                bestNeighbor = neighbors[1];\n                direction = 1;\n            }\n        } else {\n            bestNeighbor = neighbors[0];\n            direction = -1;\n        }\n    } else {\n        bestNeighbor = neighbors[1];\n        direction = 1;\n    }\n    var simA = 1 - distance(element, this.weights),\n        simB = 1 - distance(element, bestNeighbor.weights);\n    var factor = ((simA - simB) / (2 - simA - simB));\n    return 0.5 + 0.5 * factor * direction;\n};\n\nNodeSquare.prototype.getPosition = function getPosition(element) {\n    return [\n        this.getPos('x', element),\n        this.getPos('y', element)\n    ];\n};\n\nmodule.exports = NodeSquare;","var NodeSquare = require('./node-square');\n\nfunction NodeHexagonal(x, y, weights, som) {\n\n    NodeSquare.call(this, x, y, weights, som);\n\n    this.hX = x - Math.floor(y / 2);\n    this.z = 0 - this.hX - y;\n\n}\n\nNodeHexagonal.prototype = new NodeSquare;\nNodeHexagonal.prototype.constructor = NodeHexagonal;\n\nNodeHexagonal.prototype.getDistance = function getDistanceHexagonal(otherNode) {\n    return Math.max(Math.abs(this.hX - otherNode.hX), Math.abs(this.y - otherNode.y), Math.abs(this.z - otherNode.z));\n};\n\nNodeHexagonal.prototype.getDistanceTorus = function getDistanceTorus(otherNode) {\n    var distX = Math.abs(this.hX - otherNode.hX),\n        distY = Math.abs(this.y - otherNode.y),\n        distZ = Math.abs(this.z - otherNode.z);\n    return Math.max(Math.min(distX, this.som.gridDim.x - distX), Math.min(distY, this.som.gridDim.y - distY), Math.min(distZ, this.som.gridDim.z - distZ));\n};\n\nNodeHexagonal.prototype.getPosition = function getPosition() {\n    throw new Error('Unimplemented : cannot get position of the points for hexagonal grid');\n};\n\nmodule.exports = NodeHexagonal;","'use strict';\n\nvar NodeSquare = require('./node-square'),\n    NodeHexagonal = require('./node-hexagonal');\n\nvar defaultOptions = {\n    fields: 3,\n    randomizer: Math.random,\n    distance: squareEuclidean,\n    iterations: 10,\n    learningRate: 0.1,\n    gridType: 'rect',\n    torus: true,\n    method: 'random'\n};\n\nfunction SOM(x, y, options, reload) {\n\n    this.x = x;\n    this.y = y;\n\n    options = options || {};\n    this.options = {};\n    for (var i in defaultOptions) {\n        if (options.hasOwnProperty(i)) {\n            this.options[i] = options[i];\n        } else {\n            this.options[i] = defaultOptions[i];\n        }\n    }\n\n    if (typeof this.options.fields === 'number') {\n        this.numWeights = this.options.fields;\n    } else if (Array.isArray(this.options.fields)) {\n        this.numWeights = this.options.fields.length;\n        var converters = getConverters(this.options.fields);\n        this.extractor = converters.extractor;\n        this.creator = converters.creator;\n    } else {\n        throw new Error('Invalid fields definition');\n    }\n\n    if (this.options.gridType === 'rect') {\n        this.nodeType = NodeSquare;\n        this.gridDim = {\n            x: x,\n            y: y\n        };\n    } else {\n        this.nodeType = NodeHexagonal;\n        var hx = this.x - Math.floor(this.y / 2);\n        this.gridDim = {\n            x: hx,\n            y: this.y,\n            z: -(0 - hx - this.y)\n        };\n    }\n\n    this.torus = this.options.torus;\n    this.distanceMethod = this.torus ? 'getDistanceTorus' : 'getDistance';\n\n    this.distance = this.options.distance;\n\n    this.maxDistance = getMaxDistance(this.distance, this.numWeights);\n\n    if (reload === true) { // For model loading\n        this.done = true;\n        return;\n    }\n    if (!(x > 0 && y > 0)) {\n        throw new Error('x and y must be positive');\n    }\n\n    this.times = {\n        findBMU: 0,\n        adjust: 0\n    };\n\n    this.randomizer = this.options.randomizer;\n\n    this.iterationCount = 0;\n    this.iterations = this.options.iterations;\n\n    this.startLearningRate = this.learningRate = this.options.learningRate;\n\n    this.mapRadius = Math.floor(Math.max(x, y) / 2);\n\n    this.algorithmMethod = this.options.method;\n\n    this._initNodes();\n\n    this.done = false;\n}\n\nSOM.load = function loadModel(model, distance) {\n    if (model.name === 'SOM') {\n        var x = model.data.length,\n            y = model.data[0].length;\n        if (distance) {\n            model.options.distance = distance;\n        } else if (model.options.distance) {\n            model.options.distance = eval('(' + model.options.distance + ')');\n        }\n        var som = new SOM(x, y, model.options, true);\n        som.nodes = new Array(x);\n        for (var i = 0; i < x; i++) {\n            som.nodes[i] = new Array(y);\n            for (var j = 0; j < y; j++) {\n                som.nodes[i][j] = new som.nodeType(i, j, model.data[i][j], som);\n            }\n        }\n        return som;\n    } else {\n        throw new Error('expecting a SOM model');\n    }\n};\n\nSOM.prototype.export = function exportModel(includeDistance) {\n    if (!this.done) {\n        throw new Error('model is not ready yet');\n    }\n    var model = {\n        name: 'SOM'\n    };\n    model.options = {\n        fields: this.options.fields,\n        gridType: this.options.gridType,\n        torus: this.options.torus\n    };\n    model.data = new Array(this.x);\n    for (var i = 0; i < this.x; i++) {\n        model.data[i] = new Array(this.y);\n        for (var j = 0; j < this.y; j++) {\n            model.data[i][j] = this.nodes[i][j].weights;\n        }\n    }\n    if (includeDistance) {\n        model.options.distance = this.distance.toString();\n    }\n    return model;\n};\n\nSOM.prototype._initNodes = function initNodes() {\n    var now = Date.now(),\n        i, j, k;\n    this.nodes = new Array(this.x);\n    for (i = 0; i < this.x; i++) {\n        this.nodes[i] = new Array(this.y);\n        for (j = 0; j < this.y; j++) {\n            var weights = new Array(this.numWeights);\n            for (k = 0; k < this.numWeights; k++) {\n                weights[k] = this.randomizer();\n            }\n            this.nodes[i][j] = new this.nodeType(i, j, weights, this);\n        }\n    }\n    this.times.initNodes = Date.now() - now;\n};\n\nSOM.prototype.setTraining = function setTraining(trainingSet) {\n    if (this.trainingSet) {\n        throw new Error('training set has already been set');\n    }\n    var now = Date.now();\n    var convertedSet = trainingSet;\n    var i, l = trainingSet.length;\n    if (this.extractor) {\n        convertedSet = new Array(l);\n        for (i = 0; i < l; i++) {\n            convertedSet[i] = this.extractor(trainingSet[i]);\n        }\n    }\n    this.numIterations = this.iterations * l;\n\n    if (this.algorithmMethod === 'random') {\n        this.timeConstant = this.numIterations / Math.log(this.mapRadius);\n    } else {\n        this.timeConstant = l / Math.log(this.mapRadius);\n    }\n    this.trainingSet = convertedSet;\n    this.times.setTraining = Date.now() - now;\n};\n\nSOM.prototype.trainOne = function trainOne() {\n    if (this.done) {\n\n        return false;\n\n    } else if (this.numIterations-- > 0) {\n\n        var neighbourhoodRadius,\n            trainingValue,\n            trainingSetFactor;\n\n        if (this.algorithmMethod === 'random') { // Pick a random value of the training set at each step\n            neighbourhoodRadius = this.mapRadius * Math.exp(-this.iterationCount / this.timeConstant);\n            trainingValue = getRandomValue(this.trainingSet, this.randomizer);\n            this._adjust(trainingValue, neighbourhoodRadius);\n            this.learningRate = this.startLearningRate * Math.exp(-this.iterationCount / this.numIterations);\n        } else { // Get next input vector\n            trainingSetFactor = -Math.floor(this.iterationCount / this.trainingSet.length);\n            neighbourhoodRadius = this.mapRadius * Math.exp(trainingSetFactor / this.timeConstant);\n            trainingValue = this.trainingSet[this.iterationCount % this.trainingSet.length];\n            this._adjust(trainingValue, neighbourhoodRadius);\n            if (((this.iterationCount + 1) % this.trainingSet.length) === 0) {\n                this.learningRate = this.startLearningRate * Math.exp(trainingSetFactor / Math.floor(this.numIterations / this.trainingSet.length));\n            }\n        }\n\n        this.iterationCount++;\n\n        return true;\n\n    } else {\n\n        this.done = true;\n        return false;\n\n    }\n};\n\nSOM.prototype._adjust = function adjust(trainingValue, neighbourhoodRadius) {\n    var now = Date.now(),\n        x, y, dist, influence;\n\n    var bmu = this._findBestMatchingUnit(trainingValue);\n\n    var now2 = Date.now();\n    this.times.findBMU += now2 - now;\n\n    var radiusLimit = Math.floor(neighbourhoodRadius);\n    var xMin = bmu.x - radiusLimit,\n        xMax = bmu.x + radiusLimit,\n        yMin = bmu.y - radiusLimit,\n        yMax = bmu.y + radiusLimit;\n\n    for (x = xMin; x <= xMax; x++) {\n        var theX = x;\n        if (x < 0) {\n            theX += this.x;\n        } else if (x >= this.x) {\n            theX -= this.x;\n        }\n        for (y = yMin; y <= yMax; y++) {\n            var theY = y;\n            if (y < 0) {\n                theY += this.y;\n            } else if (y >= this.y) {\n                theY -= this.y;\n            }\n\n            dist = bmu[this.distanceMethod](this.nodes[theX][theY]);\n\n            if (dist < neighbourhoodRadius) {\n                influence = Math.exp(-dist / (2 * neighbourhoodRadius));\n                this.nodes[theX][theY].adjustWeights(trainingValue, this.learningRate, influence);\n            }\n\n        }\n    }\n\n    this.times.adjust += (Date.now() - now2);\n\n};\n\nSOM.prototype.train = function train(trainingSet) {\n    if (!this.done) {\n        this.setTraining(trainingSet);\n        while (this.trainOne()) {\n        }\n    }\n};\n\nSOM.prototype.getConvertedNodes = function getConvertedNodes() {\n    var result = new Array(this.x);\n    for (var i = 0; i < this.x; i++) {\n        result[i] = new Array(this.y);\n        for (var j = 0; j < this.y; j++) {\n            var node = this.nodes[i][j];\n            result[i][j] = this.creator ? this.creator(node.weights) : node.weights;\n        }\n    }\n    return result;\n};\n\nSOM.prototype._findBestMatchingUnit = function findBestMatchingUnit(candidate) {\n\n    var bmu,\n        lowest = Infinity,\n        dist;\n\n    for (var i = 0; i < this.x; i++) {\n        for (var j = 0; j < this.y; j++) {\n            dist = this.distance(this.nodes[i][j].weights, candidate);\n            if (dist < lowest) {\n                lowest = dist;\n                bmu = this.nodes[i][j];\n            }\n        }\n    }\n\n    return bmu;\n\n};\n\nSOM.prototype.predict = function predict(data, computePosition) {\n    if (typeof data === 'boolean') {\n        computePosition = data;\n        data = null;\n    }\n    if (!data) {\n        data = this.trainingSet;\n    }\n    if (Array.isArray(data) && (Array.isArray(data[0]) || (typeof data[0] === 'object'))) { // predict a dataset\n        var self = this;\n        return data.map(function (element) {\n            return self._predict(element, computePosition);\n        });\n    } else { // predict a single element\n        return this._predict(data, computePosition);\n    }\n};\n\nSOM.prototype._predict = function _predict(element, computePosition) {\n    if (!Array.isArray(element)) {\n        element = this.extractor(element);\n    }\n    var bmu = this._findBestMatchingUnit(element);\n    var result = [bmu.x, bmu.y];\n    if (computePosition) {\n        result[2] = bmu.getPosition(element);\n    }\n    return result;\n};\n\n// As seen in http://www.scholarpedia.org/article/Kohonen_network\nSOM.prototype.getQuantizationError = function getQuantizationError() {\n    var fit = this.getFit(),\n        l = fit.length,\n        sum = 0;\n    for (var i = 0; i < l; i++) {\n        sum += fit[i];\n    }\n    return sum / l;\n};\n\nSOM.prototype.getFit = function getFit(dataset) {\n    if (!dataset) {\n        dataset = this.trainingSet;\n    }\n    var l = dataset.length,\n        bmu,\n        result = new Array(l);\n    for (var i = 0; i < l; i++) {\n        bmu = this._findBestMatchingUnit(dataset[i]);\n        result[i] = Math.sqrt(this.distance(dataset[i], bmu.weights));\n    }\n    return result;\n};\n\nfunction getConverters(fields) {\n    var l = fields.length,\n        normalizers = new Array(l),\n        denormalizers = new Array(l);\n    for (var i = 0; i < l; i++) {\n        normalizers[i] = getNormalizer(fields[i].range);\n        denormalizers[i] = getDenormalizer(fields[i].range);\n    }\n    return {\n        extractor: function extractor(value) {\n            var result = new Array(l);\n            for (var i = 0; i < l; i++) {\n                result[i] = normalizers[i](value[fields[i].name]);\n            }\n            return result;\n        },\n        creator: function creator(value) {\n            var result = {};\n            for (var i = 0; i < l; i++) {\n                result[fields[i].name] = denormalizers[i](value[i]);\n            }\n            return result;\n        }\n    };\n}\n\nfunction getNormalizer(minMax) {\n    return function normalizer(value) {\n        return (value - minMax[0]) / (minMax[1] - minMax[0]);\n    };\n}\n\nfunction getDenormalizer(minMax) {\n    return function denormalizer(value) {\n        return (minMax[0] + value * (minMax[1] - minMax[0]));\n    };\n}\n\nfunction squareEuclidean(a, b) {\n    var d = 0;\n    for (var i = 0, ii = a.length; i < ii; i++) {\n        d += (a[i] - b[i]) * (a[i] - b[i]);\n    }\n    return d;\n}\n\nfunction getRandomValue(arr, randomizer) {\n    return arr[Math.floor(randomizer() * arr.length)];\n}\n\nfunction getMaxDistance(distance, numWeights) {\n    var zero = new Array(numWeights),\n        one = new Array(numWeights);\n    for (var i = 0; i < numWeights; i++) {\n        zero[i] = 0;\n        one[i] = 1;\n    }\n    return distance(zero, one);\n}\n\nmodule.exports = SOM;","export default function maybeToPrecision(value, digits) {\n  if (value < 0) {\n    value = 0 - value;\n    if (typeof digits === 'number') {\n      return `- ${value.toPrecision(digits)}`;\n    } else {\n      return `- ${value.toString()}`;\n    }\n  } else {\n    if (typeof digits === 'number') {\n      return value.toPrecision(digits);\n    } else {\n      return value.toString();\n    }\n  }\n}\n","export default function checkArraySize(x, y) {\n  if (!Array.isArray(x) || !Array.isArray(y)) {\n    throw new TypeError('x and y must be arrays');\n  }\n  if (x.length !== y.length) {\n    throw new RangeError('x and y arrays must have the same length');\n  }\n}\n","export { default as maybeToPrecision } from './maybeToPrecision';\nexport { default as checkArrayLength } from './checkArrayLength';\n\nexport default class BaseRegression {\n  constructor() {\n    if (new.target === BaseRegression) {\n      throw new Error('BaseRegression must be subclassed');\n    }\n  }\n\n  predict(x) {\n    if (typeof x === 'number') {\n      return this._predict(x);\n    } else if (Array.isArray(x)) {\n      const y = [];\n      for (let i = 0; i < x.length; i++) {\n        y.push(this._predict(x[i]));\n      }\n      return y;\n    } else {\n      throw new TypeError('x must be a number or array');\n    }\n  }\n\n  _predict() {\n    throw new Error('_predict must be implemented');\n  }\n\n  train() {\n    // Do nothing for this package\n  }\n\n  toString() {\n    return '';\n  }\n\n  toLaTeX() {\n    return '';\n  }\n\n  /**\n   * Return the correlation coefficient of determination (r) and chi-square.\n   * @param {Array<number>} x\n   * @param {Array<number>} y\n   * @return {object}\n   */\n  score(x, y) {\n    if (!Array.isArray(x) || !Array.isArray(y) || x.length !== y.length) {\n      throw new Error('x and y must be arrays of the same length');\n    }\n\n    const n = x.length;\n    const y2 = new Array(n);\n    for (let i = 0; i < n; i++) {\n      y2[i] = this._predict(x[i]);\n    }\n\n    let xSum = 0;\n    let ySum = 0;\n    let chi2 = 0;\n    let rmsd = 0;\n    let xSquared = 0;\n    let ySquared = 0;\n    let xY = 0;\n    for (let i = 0; i < n; i++) {\n      xSum += y2[i];\n      ySum += y[i];\n      xSquared += y2[i] * y2[i];\n      ySquared += y[i] * y[i];\n      xY += y2[i] * y[i];\n      if (y[i] !== 0) {\n        chi2 += ((y[i] - y2[i]) * (y[i] - y2[i])) / y[i];\n      }\n      rmsd += (y[i] - y2[i]) * (y[i] - y2[i]);\n    }\n\n    const r =\n      (n * xY - xSum * ySum) /\n      Math.sqrt((n * xSquared - xSum * xSum) * (n * ySquared - ySum * ySum));\n\n    return {\n      r: r,\n      r2: r * r,\n      chi2: chi2,\n      rmsd: Math.sqrt(rmsd / n)\n    };\n  }\n}\n","import BaseRegression, {\n  checkArrayLength,\n  maybeToPrecision\n} from 'ml-regression-base';\nimport { Matrix, MatrixTransposeView, solve } from 'ml-matrix';\n\nexport default class PolynomialRegression extends BaseRegression {\n  constructor(x, y, degree) {\n    super();\n    if (x === true) {\n      this.degree = y.degree;\n      this.powers = y.powers;\n      this.coefficients = y.coefficients;\n    } else {\n      checkArrayLength(x, y);\n      regress(this, x, y, degree);\n    }\n  }\n\n  _predict(x) {\n    let y = 0;\n    for (let k = 0; k < this.powers.length; k++) {\n      y += this.coefficients[k] * Math.pow(x, this.powers[k]);\n    }\n    return y;\n  }\n\n  toJSON() {\n    return {\n      name: 'polynomialRegression',\n      degree: this.degree,\n      powers: this.powers,\n      coefficients: this.coefficients\n    };\n  }\n\n  toString(precision) {\n    return this._toFormula(precision, false);\n  }\n\n  toLaTeX(precision) {\n    return this._toFormula(precision, true);\n  }\n\n  _toFormula(precision, isLaTeX) {\n    let sup = '^';\n    let closeSup = '';\n    let times = ' * ';\n    if (isLaTeX) {\n      sup = '^{';\n      closeSup = '}';\n      times = '';\n    }\n\n    let fn = '';\n    let str = '';\n    for (let k = 0; k < this.coefficients.length; k++) {\n      str = '';\n      if (this.coefficients[k] !== 0) {\n        if (this.powers[k] === 0) {\n          str = maybeToPrecision(this.coefficients[k], precision);\n        } else {\n          if (this.powers[k] === 1) {\n            str =\n              `${maybeToPrecision(this.coefficients[k], precision) + times}x`;\n          } else {\n            str =\n              `${maybeToPrecision(this.coefficients[k], precision) +\n              times\n              }x${\n                sup\n              }${this.powers[k]\n              }${closeSup}`;\n          }\n        }\n\n        if (this.coefficients[k] > 0 && k !== this.coefficients.length - 1) {\n          str = ` + ${str}`;\n        } else if (k !== this.coefficients.length - 1) {\n          str = ` ${str}`;\n        }\n      }\n      fn = str + fn;\n    }\n    if (fn.charAt(0) === '+') {\n      fn = fn.slice(1);\n    }\n\n    return `f(x) = ${fn}`;\n  }\n\n  static load(json) {\n    if (json.name !== 'polynomialRegression') {\n      throw new TypeError('not a polynomial regression model');\n    }\n    return new PolynomialRegression(true, json);\n  }\n}\n\nfunction regress(pr, x, y, degree) {\n  const n = x.length;\n  let powers;\n  if (Array.isArray(degree)) {\n    powers = degree;\n    degree = powers.length;\n  } else {\n    degree++;\n    powers = new Array(degree);\n    for (let k = 0; k < degree; k++) {\n      powers[k] = k;\n    }\n  }\n  const F = new Matrix(n, degree);\n  const Y = new Matrix([y]);\n  for (let k = 0; k < degree; k++) {\n    for (let i = 0; i < n; i++) {\n      if (powers[k] === 0) {\n        F.set(i, k, 1);\n      } else {\n        F.set(i, k, Math.pow(x[i], powers[k]));\n      }\n    }\n  }\n\n  const FT = new MatrixTransposeView(F);\n  const A = FT.mmul(F);\n  const B = FT.mmul(new MatrixTransposeView(Y));\n\n  pr.degree = degree - 1;\n  pr.powers = powers;\n  pr.coefficients = solve(A, B).to1DArray();\n}\n","import BaseRegression, {\n  checkArrayLength,\n  maybeToPrecision\n} from 'ml-regression-base';\n\nexport default class SimpleLinearRegression extends BaseRegression {\n  constructor(x, y) {\n    super();\n    if (x === true) {\n      this.slope = y.slope;\n      this.intercept = y.intercept;\n      this.coefficients = [y.intercept, y.slope];\n    } else {\n      checkArrayLength(x, y);\n      regress(this, x, y);\n    }\n  }\n\n  toJSON() {\n    return {\n      name: 'simpleLinearRegression',\n      slope: this.slope,\n      intercept: this.intercept\n    };\n  }\n\n  _predict(x) {\n    return this.slope * x + this.intercept;\n  }\n\n  computeX(y) {\n    return (y - this.intercept) / this.slope;\n  }\n\n  toString(precision) {\n    let result = 'f(x) = ';\n    if (this.slope !== 0) {\n      const xFactor = maybeToPrecision(this.slope, precision);\n      result += `${xFactor === '1' ? '' : `${xFactor} * `}x`;\n      if (this.intercept !== 0) {\n        const absIntercept = Math.abs(this.intercept);\n        const operator = absIntercept === this.intercept ? '+' : '-';\n        result += ` ${operator} ${maybeToPrecision(absIntercept, precision)}`;\n      }\n    } else {\n      result += maybeToPrecision(this.intercept, precision);\n    }\n    return result;\n  }\n\n  toLaTeX(precision) {\n    return this.toString(precision);\n  }\n\n  static load(json) {\n    if (json.name !== 'simpleLinearRegression') {\n      throw new TypeError('not a SLR model');\n    }\n    return new SimpleLinearRegression(true, json);\n  }\n}\n\nfunction regress(slr, x, y) {\n  const n = x.length;\n  let xSum = 0;\n  let ySum = 0;\n\n  let xSquared = 0;\n  let xY = 0;\n\n  for (let i = 0; i < n; i++) {\n    xSum += x[i];\n    ySum += y[i];\n    xSquared += x[i] * x[i];\n    xY += x[i] * y[i];\n  }\n\n  const numerator = n * xY - xSum * ySum;\n  slr.slope = numerator / (n * xSquared - xSum * xSum);\n  slr.intercept = (1 / n) * ySum - slr.slope * (1 / n) * xSum;\n  slr.coefficients = [slr.intercept, slr.slope];\n}\n","import BaseRegression, {\n  checkArrayLength,\n  maybeToPrecision\n} from 'ml-regression-base';\nimport SimpleLinearRegression from 'ml-regression-simple-linear';\n\nexport default class ExponentialRegression extends BaseRegression {\n  constructor(x, y) {\n    super();\n    if (x === true) {\n      this.A = y.A;\n      this.B = y.B;\n    } else {\n      checkArrayLength(x, y);\n      regress(this, x, y);\n    }\n  }\n\n  _predict(input) {\n    return this.B * Math.exp(input * this.A);\n  }\n\n  toJSON() {\n    return {\n      name: 'exponentialRegression',\n      A: this.A,\n      B: this.B\n    };\n  }\n\n  toString(precision) {\n    return (\n      `f(x) = ${\n        maybeToPrecision(this.B, precision)\n      } * e^(${\n        maybeToPrecision(this.A, precision)\n      } * x)`\n    );\n  }\n\n  toLaTeX(precision) {\n    if (this.A >= 0) {\n      return (\n        `f(x) = ${\n          maybeToPrecision(this.B, precision)\n        }e^{${\n          maybeToPrecision(this.A, precision)\n        }x}`\n      );\n    } else {\n      return (\n        `f(x) = \\\\frac{${\n          maybeToPrecision(this.B, precision)\n        }}{e^{${\n          maybeToPrecision(-this.A, precision)\n        }x}}`\n      );\n    }\n  }\n\n  static load(json) {\n    if (json.name !== 'exponentialRegression') {\n      throw new TypeError('not a exponential regression model');\n    }\n    return new ExponentialRegression(true, json);\n  }\n}\n\nfunction regress(er, x, y) {\n  const n = x.length;\n  const yl = new Array(n);\n  for (let i = 0; i < n; i++) {\n    yl[i] = Math.log(y[i]);\n  }\n\n  const linear = new SimpleLinearRegression(x, yl);\n  er.A = linear.slope;\n  er.B = Math.exp(linear.intercept);\n}\n","import BaseRegression, {\n  checkArrayLength,\n  maybeToPrecision\n} from 'ml-regression-base';\nimport SimpleLinearRegression from 'ml-regression-simple-linear';\n\nexport default class PowerRegression extends BaseRegression {\n  constructor(x, y) {\n    super();\n    if (x === true) {\n      // reloading model\n      this.A = y.A;\n      this.B = y.B;\n    } else {\n      checkArrayLength(x, y);\n      regress(this, x, y);\n    }\n  }\n\n  _predict(newInputs) {\n    return this.A * Math.pow(newInputs, this.B);\n  }\n\n  toJSON() {\n    return {\n      name: 'powerRegression',\n      A: this.A,\n      B: this.B\n    };\n  }\n\n  toString(precision) {\n    return `f(x) = ${maybeToPrecision(\n      this.A,\n      precision\n    )} * x^${maybeToPrecision(this.B, precision)}`;\n  }\n\n  toLaTeX(precision) {\n    let latex = '';\n    if (this.B >= 0) {\n      latex = `f(x) = ${maybeToPrecision(\n        this.A,\n        precision\n      )}x^{${maybeToPrecision(this.B, precision)}}`;\n    } else {\n      latex = `f(x) = \\\\frac{${maybeToPrecision(\n        this.A,\n        precision\n      )}}{x^{${maybeToPrecision(-this.B, precision)}}}`;\n    }\n    latex = latex.replace(/e([+-]?[0-9]+)/g, 'e^{$1}');\n    return latex;\n  }\n\n  static load(json) {\n    if (json.name !== 'powerRegression') {\n      throw new TypeError('not a power regression model');\n    }\n    return new PowerRegression(true, json);\n  }\n}\n\nfunction regress(pr, x, y) {\n  const n = x.length;\n  const xl = new Array(n);\n  const yl = new Array(n);\n  for (let i = 0; i < n; i++) {\n    xl[i] = Math.log(x[i]);\n    yl[i] = Math.log(y[i]);\n  }\n\n  const linear = new SimpleLinearRegression(xl, yl);\n  pr.A = Math.exp(linear.intercept);\n  pr.B = linear.slope;\n}\n","import Matrix, { SVD, pseudoInverse } from 'ml-matrix';\n\nexport default class MultivariateLinearRegression {\n  constructor(x, y, options = {}) {\n    const { intercept = true, statistics = true } = options;\n    this.statistics = statistics;\n    if (x === true) {\n      this.weights = y.weights;\n      this.inputs = y.inputs;\n      this.outputs = y.outputs;\n      this.intercept = y.intercept;\n    } else {\n      x = new Matrix(x);\n      y = new Matrix(y);\n      if (intercept) {\n        x.addColumn(new Array(x.rows).fill(1));\n      }\n      let xt = x.transpose();\n      const xx = xt\n        .mmul(x);\n      const xy = xt\n        .mmul(y);\n      const invxx = new SVD(xx)\n        .inverse();\n      const beta = xy\n        .transpose()\n        .mmul(invxx)\n        .transpose();\n      this.weights = beta.to2DArray();\n      this.inputs = x.columns;\n      this.outputs = y.columns;\n      if (intercept) this.inputs--;\n      this.intercept = intercept;\n      if (statistics) {\n        /*\n         * Let's add some basic statistics about the beta's to be able to interpret them.\n         * source: http://dept.stat.lsa.umich.edu/~kshedden/Courses/Stat401/Notes/401-multreg.pdf\n         * validated against Excel Regression AddIn\n         * test: \"datamining statistics test\"\n         */\n        const fittedValues = x.mmul(beta);\n        const residuals = y.clone().addM(fittedValues.neg());\n        const variance =\n          residuals\n            .to2DArray()\n            .map((ri) => Math.pow(ri[0], 2))\n            .reduce((a, b) => a + b) /\n          (y.rows - x.columns);\n        this.stdError = Math.sqrt(variance);\n        this.stdErrorMatrix = pseudoInverse(xx).mul(variance);\n        this.stdErrors = this.stdErrorMatrix\n          .diagonal()\n          .map((d) => Math.sqrt(d));\n        this.tStats = this.weights.map((d, i) =>\n          (this.stdErrors[i] === 0 ? 0 : d[0] / this.stdErrors[i])\n        );\n      }\n    }\n  }\n\n  predict(x) {\n    if (Array.isArray(x)) {\n      if (typeof x[0] === 'number') {\n        return this._predict(x);\n      } else if (Array.isArray(x[0])) {\n        const y = new Array(x.length);\n        for (let i = 0; i < x.length; i++) {\n          y[i] = this._predict(x[i]);\n        }\n        return y;\n      }\n    } else if (Matrix.isMatrix(x)) {\n      const y = new Matrix(x.rows, this.outputs);\n      for (let i = 0; i < x.rows; i++) {\n        y.setRow(i, this._predict(x.getRow(i)));\n      }\n      return y;\n    }\n    throw new TypeError('x must be a matrix or array of numbers');\n  }\n\n  _predict(x) {\n    const result = new Array(this.outputs);\n    if (this.intercept) {\n      for (let i = 0; i < this.outputs; i++) {\n        result[i] = this.weights[this.inputs][i];\n      }\n    } else {\n      result.fill(0);\n    }\n    for (let i = 0; i < this.inputs; i++) {\n      for (let j = 0; j < this.outputs; j++) {\n        result[j] += this.weights[i][j] * x[i];\n      }\n    }\n    return result;\n  }\n\n  score() {\n    throw new Error('score method is not implemented yet');\n  }\n\n  toJSON() {\n    return {\n      name: 'multivariateLinearRegression',\n      weights: this.weights,\n      inputs: this.inputs,\n      outputs: this.outputs,\n      intercept: this.intercept,\n      summary: this.statistics\n        ? {\n          regressionStatistics: {\n            standardError: this.stdError,\n            observations: this.outputs\n          },\n          variables: this.weights.map((d, i) => {\n            return {\n              label:\n                  i === this.weights.length - 1\n                    ? 'Intercept'\n                    : `X Variable ${i + 1}`,\n              coefficients: d,\n              standardError: this.stdErrors[i],\n              tStat: this.tStats[i]\n            };\n          })\n        }\n        : undefined\n    };\n  }\n\n  static load(model) {\n    if (model.name !== 'multivariateLinearRegression') {\n      throw new Error('not a MLR model');\n    }\n    return new MultivariateLinearRegression(true, model);\n  }\n}\n","'use strict';\n\nconst { squaredEuclidean } = require('ml-distance-euclidean');\n\nconst defaultOptions = {\n  sigma: 1\n};\n\nclass GaussianKernel {\n  constructor(options) {\n    options = Object.assign({}, defaultOptions, options);\n    this.sigma = options.sigma;\n    this.divisor = 2 * options.sigma * options.sigma;\n  }\n  compute(x, y) {\n    const distance = squaredEuclidean(x, y);\n    return Math.exp(-distance / this.divisor);\n  }\n}\n\nmodule.exports = GaussianKernel;\n","'use strict';\n\nconst defaultOptions = {\n  degree: 1,\n  constant: 1,\n  scale: 1\n};\n\nclass PolynomialKernel {\n  constructor(options) {\n    options = Object.assign({}, defaultOptions, options);\n\n    this.degree = options.degree;\n    this.constant = options.constant;\n    this.scale = options.scale;\n  }\n\n  compute(x, y) {\n    var sum = 0;\n    for (var i = 0; i < x.length; i++) {\n      sum += x[i] * y[i];\n    }\n    return Math.pow(this.scale * sum + this.constant, this.degree);\n  }\n}\n\nmodule.exports = PolynomialKernel;\n","'use strict';\n\nconst defaultOptions = {\n  alpha: 0.01,\n  constant: -Math.E\n};\n\nclass SigmoidKernel {\n  constructor(options) {\n    options = Object.assign({}, defaultOptions, options);\n    this.alpha = options.alpha;\n    this.constant = options.constant;\n  }\n\n  compute(x, y) {\n    var sum = 0;\n    for (var i = 0; i < x.length; i++) {\n      sum += x[i] * y[i];\n    }\n    return Math.tanh(this.alpha * sum + this.constant);\n  }\n}\n\nmodule.exports = SigmoidKernel;\n","'use strict';\n\nconst defaultOptions = {\n  sigma: 1,\n  degree: 1\n};\n\nclass ANOVAKernel {\n  constructor(options) {\n    options = Object.assign({}, defaultOptions, options);\n    this.sigma = options.sigma;\n    this.degree = options.degree;\n  }\n\n  compute(x, y) {\n    var sum = 0;\n    var len = Math.min(x.length, y.length);\n    for (var i = 1; i <= len; ++i) {\n      sum += Math.pow(\n        Math.exp(\n          -this.sigma *\n            Math.pow(Math.pow(x[i - 1], i) - Math.pow(y[i - 1], i), 2)\n        ),\n        this.degree\n      );\n    }\n    return sum;\n  }\n}\n\nmodule.exports = ANOVAKernel;\n","'use strict';\n\nconst { squaredEuclidean } = require('ml-distance-euclidean');\n\nconst defaultOptions = {\n  sigma: 1\n};\n\nclass CauchyKernel {\n  constructor(options) {\n    options = Object.assign({}, defaultOptions, options);\n    this.sigma = options.sigma;\n  }\n\n  compute(x, y) {\n    return 1 / (1 + squaredEuclidean(x, y) / (this.sigma * this.sigma));\n  }\n}\n\nmodule.exports = CauchyKernel;\n","'use strict';\n\nconst { euclidean } = require('ml-distance-euclidean');\n\nconst defaultOptions = {\n  sigma: 1\n};\n\nclass ExponentialKernel {\n  constructor(options) {\n    options = Object.assign({}, defaultOptions, options);\n    this.sigma = options.sigma;\n    this.divisor = 2 * options.sigma * options.sigma;\n  }\n\n  compute(x, y) {\n    const distance = euclidean(x, y);\n    return Math.exp(-distance / this.divisor);\n  }\n}\n\nmodule.exports = ExponentialKernel;\n","'use strict';\n\nclass HistogramIntersectionKernel {\n  compute(x, y) {\n    var min = Math.min(x.length, y.length);\n    var sum = 0;\n    for (var i = 0; i < min; ++i) {\n      sum += Math.min(x[i], y[i]);\n    }\n\n    return sum;\n  }\n}\n\nmodule.exports = HistogramIntersectionKernel;\n","'use strict';\n\nconst { euclidean } = require('ml-distance-euclidean');\n\nconst defaultOptions = {\n  sigma: 1\n};\n\nclass LaplacianKernel {\n  constructor(options) {\n    options = Object.assign({}, defaultOptions, options);\n    this.sigma = options.sigma;\n  }\n\n  compute(x, y) {\n    const distance = euclidean(x, y);\n    return Math.exp(-distance / this.sigma);\n  }\n}\n\nmodule.exports = LaplacianKernel;\n","'use strict';\n\nconst { squaredEuclidean } = require('ml-distance-euclidean');\n\nconst defaultOptions = {\n  constant: 1\n};\n\nclass MultiquadraticKernel {\n  constructor(options) {\n    options = Object.assign({}, defaultOptions, options);\n    this.constant = options.constant;\n  }\n\n  compute(x, y) {\n    return Math.sqrt(squaredEuclidean(x, y) + this.constant * this.constant);\n  }\n}\n\nmodule.exports = MultiquadraticKernel;\n","'use strict';\n\nconst { squaredEuclidean } = require('ml-distance-euclidean');\n\nconst defaultOptions = {\n  constant: 1\n};\n\nclass RationalQuadraticKernel {\n  constructor(options) {\n    options = Object.assign({}, defaultOptions, options);\n    this.constant = options.constant;\n  }\n\n  compute(x, y) {\n    const distance = squaredEuclidean(x, y);\n    return 1 - distance / (distance + this.constant);\n  }\n}\n\nmodule.exports = RationalQuadraticKernel;\n","'use strict';\n\nconst { Matrix, MatrixTransposeView } = require('ml-matrix');\nconst GaussianKernel = require('ml-kernel-gaussian');\nconst PolynomialKernel = require('ml-kernel-polynomial');\nconst SigmoidKernel = require('ml-kernel-sigmoid');\n\nconst ANOVAKernel = require('./kernels/anova-kernel');\nconst CauchyKernel = require('./kernels/cauchy-kernel');\nconst ExponentialKernel = require('./kernels/exponential-kernel');\nconst HistogramKernel = require('./kernels/histogram-intersection-kernel');\nconst LaplacianKernel = require('./kernels/laplacian-kernel');\nconst MultiquadraticKernel = require('./kernels/multiquadratic-kernel');\nconst RationalKernel = require('./kernels/rational-quadratic-kernel');\n\nconst kernelType = {\n  gaussian: GaussianKernel,\n  rbf: GaussianKernel,\n  polynomial: PolynomialKernel,\n  poly: PolynomialKernel,\n  anova: ANOVAKernel,\n  cauchy: CauchyKernel,\n  exponential: ExponentialKernel,\n  histogram: HistogramKernel,\n  min: HistogramKernel,\n  laplacian: LaplacianKernel,\n  multiquadratic: MultiquadraticKernel,\n  rational: RationalKernel,\n  sigmoid: SigmoidKernel,\n  mlp: SigmoidKernel\n};\n\nclass Kernel {\n  constructor(type, options) {\n    this.kernelType = type;\n    if (type === 'linear') return;\n\n    if (typeof type === 'string') {\n      type = type.toLowerCase();\n\n      var KernelConstructor = kernelType[type];\n      if (KernelConstructor) {\n        this.kernelFunction = new KernelConstructor(options);\n      } else {\n        throw new Error(`unsupported kernel type: ${type}`);\n      }\n    } else if (typeof type === 'object' && typeof type.compute === 'function') {\n      this.kernelFunction = type;\n    } else {\n      throw new TypeError(\n        'first argument must be a valid kernel type or instance'\n      );\n    }\n  }\n\n  compute(inputs, landmarks) {\n    inputs = Matrix.checkMatrix(inputs);\n    if (landmarks === undefined) {\n      landmarks = inputs;\n    } else {\n      landmarks = Matrix.checkMatrix(landmarks);\n    }\n    if (this.kernelType === 'linear') {\n      return inputs.mmul(new MatrixTransposeView(landmarks));\n    }\n\n    const kernelMatrix = new Matrix(inputs.rows, landmarks.rows);\n    if (inputs === landmarks) {\n      // fast path, matrix is symmetric\n      for (let i = 0; i < inputs.rows; i++) {\n        for (let j = i; j < inputs.rows; j++) {\n          const value = this.kernelFunction.compute(\n            inputs.getRow(i),\n            inputs.getRow(j)\n          );\n          kernelMatrix.set(i, j, value);\n          kernelMatrix.set(j, i, value);\n        }\n      }\n    } else {\n      for (let i = 0; i < inputs.rows; i++) {\n        for (let j = 0; j < landmarks.rows; j++) {\n          kernelMatrix.set(\n            i,\n            j,\n            this.kernelFunction.compute(inputs.getRow(i), landmarks.getRow(j))\n          );\n        }\n      }\n    }\n    return kernelMatrix;\n  }\n}\n\nmodule.exports = Kernel;\n","import BaseRegression, {\n  checkArrayLength,\n  maybeToPrecision\n} from 'ml-regression-base';\nimport median from 'ml-array-median';\n\nexport default class TheilSenRegression extends BaseRegression {\n  /**\n   * Theil–Sen estimator\n   * https://en.wikipedia.org/wiki/Theil%E2%80%93Sen_estimator\n   * @param {Array<number>|boolean} x\n   * @param {Array<number>|object} y\n   * @constructor\n   */\n  constructor(x, y) {\n    super();\n    if (x === true) {\n      // loads the model\n      this.slope = y.slope;\n      this.intercept = y.intercept;\n      this.coefficients = y.coefficients;\n    } else {\n      // creates the model\n      checkArrayLength(x, y);\n      theilSen(this, x, y);\n    }\n  }\n\n  toJSON() {\n    return {\n      name: 'TheilSenRegression',\n      slope: this.slope,\n      intercept: this.intercept\n    };\n  }\n\n  _predict(input) {\n    return this.slope * input + this.intercept;\n  }\n\n  computeX(input) {\n    return (input - this.intercept) / this.slope;\n  }\n\n  toString(precision) {\n    var result = 'f(x) = ';\n    if (this.slope) {\n      var xFactor = maybeToPrecision(this.slope, precision);\n      result += `${Math.abs(xFactor - 1) < 1e-5 ? '' : `${xFactor} * `}x`;\n      if (this.intercept) {\n        var absIntercept = Math.abs(this.intercept);\n        var operator = absIntercept === this.intercept ? '+' : '-';\n        result +=\n          ` ${operator} ${maybeToPrecision(absIntercept, precision)}`;\n      }\n    } else {\n      result += maybeToPrecision(this.intercept, precision);\n    }\n    return result;\n  }\n\n  toLaTeX(precision) {\n    return this.toString(precision);\n  }\n\n  static load(json) {\n    if (json.name !== 'TheilSenRegression') {\n      throw new TypeError('not a Theil-Sen model');\n    }\n    return new TheilSenRegression(true, json);\n  }\n}\n\nfunction theilSen(regression, x, y) {\n  let len = x.length;\n  let slopes = new Array(len * len);\n  let count = 0;\n  for (let i = 0; i < len; ++i) {\n    for (let j = i + 1; j < len; ++j) {\n      if (x[i] !== x[j]) {\n        slopes[count++] = (y[j] - y[i]) / (x[j] - x[i]);\n      }\n    }\n  }\n  slopes.length = count;\n  let medianSlope = median(slopes);\n\n  let cuts = new Array(len);\n  for (let i = 0; i < len; ++i) {\n    cuts[i] = y[i] - medianSlope * x[i];\n  }\n\n  regression.slope = medianSlope;\n  regression.intercept = median(cuts);\n  regression.coefficients = [regression.intercept, regression.slope];\n}\n","import BaseRegression, {\n  checkArrayLength,\n  maybeToPrecision\n} from 'ml-regression-base';\nimport { solve } from 'ml-matrix';\n\n/**\n * @class RobustPolynomialRegression\n * @param {Array<number>} x\n * @param {Array<number>} y\n * @param {number} degree - polynomial degree\n */\nexport default class RobustPolynomialRegression extends BaseRegression {\n  constructor(x, y, degree) {\n    super();\n    if (x === true) {\n      this.degree = y.degree;\n      this.powers = y.powers;\n      this.coefficients = y.coefficients;\n    } else {\n      checkArrayLength(x, y);\n      robustPolynomial(this, x, y, degree);\n    }\n  }\n\n  toJSON() {\n    return {\n      name: 'robustPolynomialRegression',\n      degree: this.degree,\n      powers: this.powers,\n      coefficients: this.coefficients\n    };\n  }\n\n  _predict(x) {\n    return predict(x, this.powers, this.coefficients);\n  }\n\n  /**\n   * Display the formula\n   * @param {number} precision - precision for the numbers\n   * @return {string}\n   */\n  toString(precision) {\n    return this._toFormula(precision, false);\n  }\n\n  /**\n   * Display the formula in LaTeX format\n   * @param {number} precision - precision for the numbers\n   * @return {string}\n   */\n  toLaTeX(precision) {\n    return this._toFormula(precision, true);\n  }\n\n  _toFormula(precision, isLaTeX) {\n    let sup = '^';\n    let closeSup = '';\n    let times = ' * ';\n    if (isLaTeX) {\n      sup = '^{';\n      closeSup = '}';\n      times = '';\n    }\n\n    let fn = '';\n    let str = '';\n    for (let k = 0; k < this.coefficients.length; k++) {\n      str = '';\n      if (this.coefficients[k] !== 0) {\n        if (this.powers[k] === 0) {\n          str = maybeToPrecision(this.coefficients[k], precision);\n        } else {\n          if (this.powers[k] === 1) {\n            str = `${maybeToPrecision(this.coefficients[k], precision) +\n              times}x`;\n          } else {\n            str = `${maybeToPrecision(this.coefficients[k], precision) +\n              times}x${sup}${this.powers[k]}${closeSup}`;\n          }\n        }\n\n        if (this.coefficients[k] > 0 && k !== this.coefficients.length - 1) {\n          str = ` + ${str}`;\n        } else if (k !== this.coefficients.length - 1) {\n          str = ` ${str}`;\n        }\n      }\n      fn = str + fn;\n    }\n    if (fn.charAt(0) === '+') {\n      fn = fn.slice(1);\n    }\n\n    return `f(x) = ${fn}`;\n  }\n\n  static load(json) {\n    if (json.name !== 'robustPolynomialRegression') {\n      throw new TypeError('not a RobustPolynomialRegression model');\n    }\n    return new RobustPolynomialRegression(true, json);\n  }\n}\n\nfunction robustPolynomial(regression, x, y, degree) {\n  let powers = Array(degree)\n    .fill(0)\n    .map((_, index) => index);\n\n  const tuples = getRandomTuples(x, y, degree);\n\n  var min;\n  for (var i = 0; i < tuples.length; i++) {\n    var tuple = tuples[i];\n    var coefficients = calcCoefficients(tuple, powers);\n\n    var residuals = x.slice();\n    for (var j = 0; j < x.length; j++) {\n      residuals[j] = y[j] - predict(x[j], powers, coefficients);\n      residuals[j] = {\n        residual: residuals[j] * residuals[j],\n        coefficients\n      };\n    }\n\n    var median = residualsMedian(residuals);\n    if (!min || median.residual < min.residual) {\n      min = median;\n    }\n  }\n\n  regression.degree = degree;\n  regression.powers = powers;\n  regression.coefficients = min.coefficients;\n}\n\n/**\n * @ignore\n * @param {Array<number>} x\n * @param {Array<number>} y\n * @param {number} degree\n * @return {Array<{x:number,y:number}>}\n */\nfunction getRandomTuples(x, y, degree) {\n  var len = Math.floor(x.length / degree);\n  var tuples = new Array(len);\n\n  for (var i = 0; i < x.length; i++) {\n    var pos = Math.floor(Math.random() * len);\n\n    var counter = 0;\n    while (counter < x.length) {\n      if (!tuples[pos]) {\n        tuples[pos] = [\n          {\n            x: x[i],\n            y: y[i]\n          }\n        ];\n        break;\n      } else if (tuples[pos].length < degree) {\n        tuples[pos].push({\n          x: x[i],\n          y: y[i]\n        });\n        break;\n      } else {\n        counter++;\n        pos = (pos + 1) % len;\n      }\n    }\n\n    if (counter === x.length) {\n      return tuples;\n    }\n  }\n  return tuples;\n}\n\n/**\n * @ignore\n * @param {{x:number,y:number}} tuple\n * @param {Array<number>} powers\n * @return {Array<number>}\n */\nfunction calcCoefficients(tuple, powers) {\n  var X = tuple.slice();\n  var Y = tuple.slice();\n  for (var i = 0; i < X.length; i++) {\n    Y[i] = [tuple[i].y];\n    X[i] = new Array(powers.length);\n    for (var j = 0; j < powers.length; j++) {\n      X[i][j] = Math.pow(tuple[i].x, powers[j]);\n    }\n  }\n\n  return solve(X, Y).to1DArray();\n}\n\nfunction predict(x, powers, coefficients) {\n  let y = 0;\n  for (let k = 0; k < powers.length; k++) {\n    y += coefficients[k] * Math.pow(x, powers[k]);\n  }\n  return y;\n}\n\nfunction residualsMedian(residuals) {\n  residuals.sort((a, b) => a.residual - b.residual);\n\n  var l = residuals.length;\n  var half = Math.floor(l / 2);\n  return l % 2 === 0 ? residuals[half - 1] : residuals[half];\n}\n","const toString = Object.prototype.toString;\n\nexport default function isAnyArray(object) {\n  return toString.call(object).endsWith('Array]');\n}\n","/**\n * Calculate current error\n * @ignore\n * @param {{x:Array<number>, y:Array<number>}} data - Array of points to fit in the format [x1, x2, ... ], [y1, y2, ... ]\n * @param {Array<number>} parameters - Array of current parameter values\n * @param {function} parameterizedFunction - The parameters and returns a function with the independent variable as a parameter\n * @return {number}\n */\nexport default function errorCalculation(\n  data,\n  parameters,\n  parameterizedFunction,\n) {\n  let error = 0;\n  const func = parameterizedFunction(parameters);\n\n  for (let i = 0; i < data.x.length; i++) {\n    error += Math.abs(data.y[i] - func(data.x[i]));\n  }\n\n  return error;\n}\n","import { inverse, Matrix } from 'ml-matrix';\n\n/**\n * Difference of the matrix function over the parameters\n * @ignore\n * @param {{x:Array<number>, y:Array<number>}} data - Array of points to fit in the format [x1, x2, ... ], [y1, y2, ... ]\n * @param {Array<number>} evaluatedData - Array of previous evaluated function values\n * @param {Array<number>} params - Array of previous parameter values\n * @param {number} gradientDifference - Adjustment for decrease the damping parameter\n * @param {function} paramFunction - The parameters and returns a function with the independent variable as a parameter\n * @return {Matrix}\n */\nfunction gradientFunction(\n  data,\n  evaluatedData,\n  params,\n  gradientDifference,\n  paramFunction,\n) {\n  const n = params.length;\n  const m = data.x.length;\n\n  let ans = new Array(n);\n\n  for (let param = 0; param < n; param++) {\n    ans[param] = new Array(m);\n    let auxParams = params.slice();\n    auxParams[param] += gradientDifference;\n    let funcParam = paramFunction(auxParams);\n\n    for (let point = 0; point < m; point++) {\n      ans[param][point] = evaluatedData[point] - funcParam(data.x[point]);\n    }\n  }\n  return new Matrix(ans);\n}\n\n/**\n * Matrix function over the samples\n * @ignore\n * @param {{x:Array<number>, y:Array<number>}} data - Array of points to fit in the format [x1, x2, ... ], [y1, y2, ... ]\n * @param {Array<number>} evaluatedData - Array of previous evaluated function values\n * @return {Matrix}\n */\nfunction matrixFunction(data, evaluatedData) {\n  const m = data.x.length;\n\n  let ans = new Array(m);\n\n  for (let point = 0; point < m; point++) {\n    ans[point] = [data.y[point] - evaluatedData[point]];\n  }\n\n  return new Matrix(ans);\n}\n\n/**\n * Iteration for Levenberg-Marquardt\n * @ignore\n * @param {{x:Array<number>, y:Array<number>}} data - Array of points to fit in the format [x1, x2, ... ], [y1, y2, ... ]\n * @param {Array<number>} params - Array of previous parameter values\n * @param {number} damping - Levenberg-Marquardt parameter\n * @param {number} gradientDifference - Adjustment for decrease the damping parameter\n * @param {function} parameterizedFunction - The parameters and returns a function with the independent variable as a parameter\n * @return {Array<number>}\n */\nexport default function step(\n  data,\n  params,\n  damping,\n  gradientDifference,\n  parameterizedFunction,\n) {\n  let value = damping * gradientDifference * gradientDifference;\n  let identity = Matrix.eye(params.length, params.length, value);\n\n  const func = parameterizedFunction(params);\n\n  let evaluatedData = new Float64Array(data.x.length);\n  for (let i = 0; i < data.x.length; i++) {\n    evaluatedData[i] = func(data.x[i]);\n  }\n\n  let gradientFunc = gradientFunction(\n    data,\n    evaluatedData,\n    params,\n    gradientDifference,\n    parameterizedFunction,\n  );\n  let matrixFunc = matrixFunction(data, evaluatedData);\n  let inverseMatrix = inverse(\n    identity.add(gradientFunc.mmul(gradientFunc.transpose())),\n  );\n\n  params = new Matrix([params]);\n  params = params.sub(\n    inverseMatrix\n      .mmul(gradientFunc)\n      .mmul(matrixFunc)\n      .mul(gradientDifference)\n      .transpose(),\n  );\n\n  return params.to1DArray();\n}\n","import isArray from 'is-any-array';\n\nimport errorCalculation from './errorCalculation';\nimport step from './step';\n\n/**\n * Curve fitting algorithm\n * @param {{x:Array<number>, y:Array<number>}} data - Array of points to fit in the format [x1, x2, ... ], [y1, y2, ... ]\n * @param {function} parameterizedFunction - The parameters and returns a function with the independent variable as a parameter\n * @param {object} [options] - Options object\n * @param {number} [options.damping] - Levenberg-Marquardt parameter\n * @param {number} [options.gradientDifference = 10e-2] - Adjustment for decrease the damping parameter\n * @param {Array<number>} [options.minValues] - Minimum allowed values for parameters\n * @param {Array<number>} [options.maxValues] - Maximum allowed values for parameters\n * @param {Array<number>} [options.initialValues] - Array of initial parameter values\n * @param {number} [options.maxIterations = 100] - Maximum of allowed iterations\n * @param {number} [options.errorTolerance = 10e-3] - Minimum uncertainty allowed for each point\n * @return {{parameterValues: Array<number>, parameterError: number, iterations: number}}\n */\nexport default function levenbergMarquardt(\n  data,\n  parameterizedFunction,\n  options = {},\n) {\n  let {\n    maxIterations = 100,\n    gradientDifference = 10e-2,\n    damping = 0,\n    errorTolerance = 10e-3,\n    minValues,\n    maxValues,\n    initialValues,\n  } = options;\n\n  if (damping <= 0) {\n    throw new Error('The damping option must be a positive number');\n  } else if (!data.x || !data.y) {\n    throw new Error('The data parameter must have x and y elements');\n  } else if (\n    !isArray(data.x) ||\n    data.x.length < 2 ||\n    !isArray(data.y) ||\n    data.y.length < 2\n  ) {\n    throw new Error(\n      'The data parameter elements must be an array with more than 2 points',\n    );\n  } else if (data.x.length !== data.y.length) {\n    throw new Error('The data parameter elements must have the same size');\n  }\n\n  let parameters =\n    initialValues || new Array(parameterizedFunction.length).fill(1);\n  let parLen = parameters.length;\n  maxValues = maxValues || new Array(parLen).fill(Number.MAX_SAFE_INTEGER);\n  minValues = minValues || new Array(parLen).fill(Number.MIN_SAFE_INTEGER);\n\n  if (maxValues.length !== minValues.length) {\n    throw new Error('minValues and maxValues must be the same size');\n  }\n\n  if (!isArray(parameters)) {\n    throw new Error('initialValues must be an array');\n  }\n\n  let error = errorCalculation(data, parameters, parameterizedFunction);\n\n  let converged = error <= errorTolerance;\n\n  let iteration;\n  for (iteration = 0; iteration < maxIterations && !converged; iteration++) {\n    parameters = step(\n      data,\n      parameters,\n      damping,\n      gradientDifference,\n      parameterizedFunction,\n    );\n\n    for (let k = 0; k < parLen; k++) {\n      parameters[k] = Math.min(\n        Math.max(minValues[k], parameters[k]),\n        maxValues[k],\n      );\n    }\n\n    error = errorCalculation(data, parameters, parameterizedFunction);\n    if (isNaN(error)) break;\n    converged = error <= errorTolerance;\n  }\n\n  return {\n    parameterValues: parameters,\n    parameterError: error,\n    iterations: iteration,\n  };\n}\n","/**\n * Returns a new array based on extraction of specific indices of an array\n * @private\n * @param {Array} vector\n * @param {Array} indices\n */\nexport default function selection(vector, indices) {\n  let u = []; //new Float64Array(indices.length);\n  for (let i = 0; i < indices.length; i++) {\n    u[i] = vector[indices[i]];\n  }\n  return u;\n}\n","/**\n *\n * @private\n * @param {Array of arrays} collection\n */\nexport default function sortCollectionSet(collection) {\n  let objectCollection = collection\n    .map((value, index) => {\n      let key = BigInt(0);\n      value.forEach((item) => (key |= BigInt(1) << BigInt(item)));\n      return { value, index, key };\n    })\n    .sort((a, b) => {\n      if (a.key - b.key < 0) return -1;\n      return 1;\n    });\n\n  let sorted = [];\n  let indices = [];\n\n  let key;\n  for (let set of objectCollection) {\n    if (set.key !== key) {\n      key = set.key;\n      indices.push([]);\n      sorted.push(set.value);\n    }\n    indices[indices.length - 1].push(set.index);\n  }\n\n  let result = {\n    values: sorted,\n    indices: indices,\n  };\n  return result;\n}\n","import {\n  Matrix,\n  LuDecomposition,\n  solve,\n  CholeskyDecomposition,\n} from 'ml-matrix';\n\nimport sortCollectionSet from './util/sortCollectionSet';\n\n/**\n * (Combinatorial Subspace Least Squares) - subfunction for the FC-NNLS\n * @private\n * @param {Matrix} XtX\n * @param {Matrix} XtY\n * @param {Array} Pset\n * @param {Numbers} l\n * @param {Numbers} p\n */\nexport default function cssls(XtX, XtY, Pset, l, p) {\n  // Solves the set of equation XtX*K = XtY for the variables in Pset\n  // if XtX (or XtX(vars,vars)) is singular, performs the svd and find pseudoinverse, otherwise (even if ill-conditioned) finds inverse with LU decomposition and solves the set of equation\n  // it is consistent with matlab results for ill-conditioned matrices (at least consistent with test 'ill-conditionned square X rank 2, Y 3x1' in cssls.test)\n\n  let K = Matrix.zeros(l, p);\n  if (Pset === null) {\n    let choXtX = new CholeskyDecomposition(XtX);\n    if (choXtX.isPositiveDefinite() === true) {\n      K = choXtX.solve(XtY);\n    } else {\n      let luXtX = new LuDecomposition(XtX);\n      if (luXtX.isSingular() === false) {\n        K = luXtX.solve(Matrix.eye(l)).mmul(XtY);\n      } else {\n        K = solve(XtX, XtY, { useSVD: true });\n      }\n    }\n  } else {\n    let sortedPset = sortCollectionSet(Pset).values;\n    let sortedEset = sortCollectionSet(Pset).indices;\n    if (\n      sortedPset.length === 1 &&\n      sortedPset[0].length === 0 &&\n      sortedEset[0].length === p\n    ) {\n      return K;\n    } else if (\n      sortedPset.length === 1 &&\n      sortedPset[0].length === l &&\n      sortedEset[0].length === p\n    ) {\n      let choXtX = new CholeskyDecomposition(XtX);\n      if (choXtX.isPositiveDefinite() === true) {\n        K = choXtX.solve(XtY);\n      } else {\n        let luXtX = new LuDecomposition(XtX);\n        if (luXtX.isSingular() === false) {\n          K = luXtX.solve(Matrix.eye(l)).mmul(XtY);\n        } else {\n          K = solve(XtX, XtY, { useSVD: true });\n        }\n      }\n    } else {\n      for (let k = 0; k < sortedPset.length; k++) {\n        let cols2Solve = sortedEset[k];\n        let vars = sortedPset[k];\n        let L;\n        let choXtX = new CholeskyDecomposition(XtX.selection(vars, vars));\n        if (choXtX.isPositiveDefinite() === true) {\n          L = choXtX.solve(XtY.selection(vars, cols2Solve));\n        } else {\n          let luXtX = new LuDecomposition(XtX.selection(vars, vars));\n          if (luXtX.isSingular() === false) {\n            L = luXtX\n              .solve(Matrix.eye(vars.length))\n              .mmul(XtY.selection(vars, cols2Solve));\n          } else {\n            L = solve(\n              XtX.selection(vars, vars),\n              XtY.selection(vars, cols2Solve),\n              { useSVD: true },\n            );\n          }\n        }\n        for (let i = 0; i < L.rows; i++) {\n          for (let j = 0; j < L.columns; j++) {\n            K.set(vars[i], cols2Solve[j], L.get(i, j));\n          }\n        }\n      }\n    }\n  }\n  return K;\n}\n","import { Matrix } from 'ml-matrix';\n\nimport cssls from './cssls';\n\nexport default function initialisation(X, Y) {\n  let n = X.rows;\n  let l = X.columns;\n  let p = Y.columns;\n  let iter = 0;\n\n  if (Y.rows !== n) throw new Error('ERROR: matrix size not compatible');\n\n  let W = Matrix.zeros(l, p);\n\n  // precomputes part of pseudoinverse\n  let XtX = X.transpose().mmul(X);\n  let XtY = X.transpose().mmul(Y);\n\n  let K = cssls(XtX, XtY, null, l, p); // K is lxp\n  let Pset = [];\n  for (let j = 0; j < p; j++) {\n    Pset[j] = [];\n    for (let i = 0; i < l; i++) {\n      if (K.get(i, j) > 0) {\n        Pset[j].push(i);\n      } else {\n        K.set(i, j, 0);\n      } //This is our initial solution, it's the solution found by overwriting the unconstrained least square solution\n    }\n  }\n  let Fset = [];\n  for (let j = 0; j < p; j++) {\n    if (Pset[j].length !== l) {\n      Fset.push(j);\n    }\n  }\n\n  let D = K.clone();\n\n  return { n, l, p, iter, W, XtX, XtY, K, Pset, Fset, D };\n}\n","/**\n * Computes the set difference A\\B\n * @private\n * @param {A} set A as an array\n * @param {B} set B as an array\n */\nexport default function setDifference(A, B) {\n  let C = [];\n  for (let i of A) {\n    if (!B.includes(i)) C.push(i);\n  }\n  return C;\n}\n","import setDifference from './util/setDifference';\n\n// Makes sure the solution has converged\nexport default function optimality(\n  iter,\n  maxIter,\n  XtX,\n  XtY,\n  Fset,\n  Pset,\n  W,\n  K,\n  l,\n  p,\n  D,\n) {\n  if (iter === maxIter) {\n    throw new Error('Maximum number of iterations exceeded');\n  }\n\n  // Check solution for optimality\n  let V = XtY.subMatrixColumn(Fset).subtract(XtX.mmul(K.subMatrixColumn(Fset)));\n  for (let j = 0; j < Fset.length; j++) {\n    W.setColumn(Fset[j], V.subMatrixColumn([j]));\n  }\n  let Jset = [];\n  let fullSet = [];\n  for (let i = 0; i < l; i++) {\n    fullSet.push(i);\n  }\n  for (let j = 0; j < Fset.length; j++) {\n    let notPset = setDifference(fullSet, Pset[Fset[j]]);\n    if (notPset.length === 0) {\n      Jset.push(Fset[j]);\n    } else if (W.selection(notPset, [Fset[j]]).max() <= 0) {\n      Jset.push(Fset[j]);\n    }\n  }\n  Fset = setDifference(Fset, Jset);\n\n  // For non-optimal solutions, add the appropriate variables to Pset\n  if (Fset.length !== 0) {\n    for (let j = 0; j < Fset.length; j++) {\n      for (let i = 0; i < l; i++) {\n        if (Pset[Fset[j]].includes(i)) W.set(i, Fset[j], -Infinity);\n      }\n      Pset[Fset[j]].push(W.subMatrixColumn(Fset).maxColumnIndex(j)[0]);\n    }\n    for (let j = 0; j < Fset.length; j++) {\n      D.setColumn(Fset[j], K.getColumn(Fset[j]));\n    }\n  }\n  for (let j = 0; j < p; j++) {\n    Pset[j].sort((a, b) => a - b);\n  }\n  return { Pset, Fset, W };\n}\n","import { Matrix } from 'ml-matrix';\n\nimport selection from './util/selection';\nimport cssls from './cssls';\nimport initialisation from './initialisation';\nimport optimality from './optimality';\n\n/**\n * Fast Combinatorial Non-negative Least Squares with multiple Right Hand Side\n * @param {Matrix|number[][]} X\n * @param {Matrix|number[][]} Y\n * @param {object} [options={}]\n * @param {number} [options.maxIterations] if empty maxIterations is set at 3 times the number of columns of X\n * @returns {Matrix} K\n */\nexport default function fcnnls(X, Y, options = {}) {\n  X = Matrix.checkMatrix(X);\n  Y = Matrix.checkMatrix(Y);\n  let { l, p, iter, W, XtX, XtY, K, Pset, Fset, D } = initialisation(X, Y);\n  const { maxIterations = X.columns * 3 } = options;\n\n  // Active set algorithm for NNLS main loop\n  while (Fset.length > 0) {\n    // Solves for the passive variables (uses subroutine below)\n    let L = cssls(\n      XtX,\n      XtY.subMatrixColumn(Fset),\n      selection(Pset, Fset),\n      l,\n      Fset.length,\n    );\n    for (let i = 0; i < l; i++) {\n      for (let j = 0; j < Fset.length; j++) {\n        K.set(i, Fset[j], L.get(i, j));\n      }\n    }\n\n    // Finds any infeasible solutions\n    let infeasIndex = [];\n    for (let j = 0; j < Fset.length; j++) {\n      for (let i = 0; i < l; i++) {\n        if (L.get(i, j) < 0) {\n          infeasIndex.push(j);\n          break;\n        }\n      }\n    }\n    let Hset = selection(Fset, infeasIndex);\n\n    // Makes infeasible solutions feasible (standard NNLS inner loop)\n    if (Hset.length > 0) {\n      let m = Hset.length;\n      let alpha = Matrix.ones(l, m);\n\n      while (m > 0 && iter < maxIterations) {\n        iter++;\n\n        alpha.mul(Infinity);\n\n        // Finds indices of negative variables in passive set\n        let hRowColIdx = [[], []]; // Indexes work in pairs, each pair reprensents a single element, first array is row index, second array is column index\n        let negRowColIdx = [[], []]; // Same as before\n        for (let j = 0; j < m; j++) {\n          for (let i = 0; i < Pset[Hset[j]].length; i++) {\n            if (K.get(Pset[Hset[j]][i], Hset[j]) < 0) {\n              hRowColIdx[0].push(Pset[Hset[j]][i]); // i\n              hRowColIdx[1].push(j);\n              negRowColIdx[0].push(Pset[Hset[j]][i]); // i\n              negRowColIdx[1].push(Hset[j]);\n            } // Compared to matlab, here we keep the row/column indexing (we are not taking the linear indexing)\n          }\n        }\n\n        for (let k = 0; k < hRowColIdx[0].length; k++) {\n          // could be hRowColIdx[1].length as well\n          alpha.set(\n            hRowColIdx[0][k],\n            hRowColIdx[1][k],\n            D.get(negRowColIdx[0][k], negRowColIdx[1][k]) /\n              (D.get(negRowColIdx[0][k], negRowColIdx[1][k]) -\n                K.get(negRowColIdx[0][k], negRowColIdx[1][k])),\n          );\n        }\n\n        let alphaMin = [];\n        let minIdx = [];\n        for (let j = 0; j < m; j++) {\n          alphaMin[j] = alpha.minColumn(j);\n          minIdx[j] = alpha.minColumnIndex(j)[0];\n        }\n\n        alphaMin = Matrix.rowVector(alphaMin);\n        for (let i = 0; i < l; i++) {\n          alpha.setSubMatrix(alphaMin, i, 0);\n        }\n\n        let E = new Matrix(l, m);\n        E = D.subMatrixColumn(Hset).subtract(\n          alpha\n            .subMatrix(0, l - 1, 0, m - 1)\n            .mul(D.subMatrixColumn(Hset).subtract(K.subMatrixColumn(Hset))),\n        );\n        for (let j = 0; j < m; j++) {\n          D.setColumn(Hset[j], E.subMatrixColumn([j]));\n        }\n\n        let idx2zero = [minIdx, Hset];\n        for (let k = 0; k < m; k++) {\n          D.set(idx2zero[0][k], idx2zero[1][k], 0);\n        }\n\n        for (let j = 0; j < m; j++) {\n          Pset[Hset[j]].splice(\n            Pset[Hset[j]].findIndex((item) => item === minIdx[j]),\n            1,\n          );\n        }\n\n        L = cssls(XtX, XtY.subMatrixColumn(Hset), selection(Pset, Hset), l, m);\n        for (let j = 0; j < m; j++) {\n          K.setColumn(Hset[j], L.subMatrixColumn([j]));\n        }\n\n        Hset = [];\n        for (let j = 0; j < K.columns; j++) {\n          for (let i = 0; i < l; i++) {\n            if (K.get(i, j) < 0) {\n              Hset.push(j);\n\n              break;\n            }\n          }\n        }\n        m = Hset.length;\n      }\n    }\n\n    let newParam = optimality(\n      iter,\n      maxIterations,\n      XtX,\n      XtY,\n      Fset,\n      Pset,\n      W,\n      K,\n      l,\n      p,\n      D,\n    );\n    Pset = newParam.Pset;\n    Fset = newParam.Fset;\n    W = newParam.W;\n  }\n\n  return K;\n}\n","import { Matrix } from 'ml-matrix';\n\nimport fcnnls from './fcnnls';\n\n/**\n * Fast Combinatorial Non-negative Least Squares with single Right Hand Side\n * @param {Matrix|number[][]} X\n * @param {number[]} y\n * @param {object} [options={}]\n * @param {boolean} [maxIterations] if true or empty maxIterations is set at 3 times the number of columns of X\n * @returns {Array} k\n */\nexport default function fcnnlsVector(X, y, options = {}) {\n  if (Array.isArray(y) === false) {\n    throw new TypeError('y must be a 1D Array');\n  }\n  let Y = Matrix.columnVector(y);\n  let K = fcnnls(X, Y, options);\n  let k = K.to1DArray();\n  return k;\n}\n","module.exports = function(haystack, needle, comparator, low, high) {\n  var mid, cmp;\n\n  if(low === undefined)\n    low = 0;\n\n  else {\n    low = low|0;\n    if(low < 0 || low >= haystack.length)\n      throw new RangeError(\"invalid lower bound\");\n  }\n\n  if(high === undefined)\n    high = haystack.length - 1;\n\n  else {\n    high = high|0;\n    if(high < low || high >= haystack.length)\n      throw new RangeError(\"invalid upper bound\");\n  }\n\n  while(low <= high) {\n    // The naive `low + high >>> 1` could fail for array lengths > 2**31\n    // because `>>>` converts its operands to int32. `low + (high - low >>> 1)`\n    // works for array lengths <= 2**32-1 which is also Javascript's max array\n    // length.\n    mid = low + ((high - low) >>> 1);\n    cmp = +comparator(haystack[mid], needle, mid, haystack);\n\n    // Too low.\n    if(cmp < 0.0)\n      low  = mid + 1;\n\n    // Too high.\n    else if(cmp > 0.0)\n      high = mid - 1;\n\n    // Key found.\n    else\n      return mid;\n  }\n\n  // Key not found.\n  return ~low;\n}\n","'use strict';\n\nfunction assertNumber(number) {\n\tif (typeof number !== 'number') {\n\t\tthrow new TypeError('Expected a number');\n\t}\n}\n\nexports.ascending = (left, right) => {\n\tassertNumber(left);\n\tassertNumber(right);\n\n\tif (Number.isNaN(left)) {\n\t\treturn -1;\n\t}\n\n\tif (Number.isNaN(right)) {\n\t\treturn 1;\n\t}\n\n\treturn left - right;\n};\n\nexports.descending = (left, right) => {\n\tassertNumber(left);\n\tassertNumber(right);\n\n\tif (Number.isNaN(left)) {\n\t\treturn 1;\n\t}\n\n\tif (Number.isNaN(right)) {\n\t\treturn -1;\n\t}\n\n\treturn right - left;\n};\n","import binarySearch from 'binary-search';\nimport { ascending } from 'num-sort';\n\nexport const largestPrime = 0x7fffffff;\n\nconst primeNumbers = [\n  // chunk #0\n  largestPrime, // 2^31-1\n\n  // chunk #1\n  5,\n  11,\n  23,\n  47,\n  97,\n  197,\n  397,\n  797,\n  1597,\n  3203,\n  6421,\n  12853,\n  25717,\n  51437,\n  102877,\n  205759,\n  411527,\n  823117,\n  1646237,\n  3292489,\n  6584983,\n  13169977,\n  26339969,\n  52679969,\n  105359939,\n  210719881,\n  421439783,\n  842879579,\n  1685759167,\n\n  // chunk #2\n  433,\n  877,\n  1759,\n  3527,\n  7057,\n  14143,\n  28289,\n  56591,\n  113189,\n  226379,\n  452759,\n  905551,\n  1811107,\n  3622219,\n  7244441,\n  14488931,\n  28977863,\n  57955739,\n  115911563,\n  231823147,\n  463646329,\n  927292699,\n  1854585413,\n\n  // chunk #3\n  953,\n  1907,\n  3821,\n  7643,\n  15287,\n  30577,\n  61169,\n  122347,\n  244703,\n  489407,\n  978821,\n  1957651,\n  3915341,\n  7830701,\n  15661423,\n  31322867,\n  62645741,\n  125291483,\n  250582987,\n  501165979,\n  1002331963,\n  2004663929,\n\n  // chunk #4\n  1039,\n  2081,\n  4177,\n  8363,\n  16729,\n  33461,\n  66923,\n  133853,\n  267713,\n  535481,\n  1070981,\n  2141977,\n  4283963,\n  8567929,\n  17135863,\n  34271747,\n  68543509,\n  137087021,\n  274174111,\n  548348231,\n  1096696463,\n\n  // chunk #5\n  31,\n  67,\n  137,\n  277,\n  557,\n  1117,\n  2237,\n  4481,\n  8963,\n  17929,\n  35863,\n  71741,\n  143483,\n  286973,\n  573953,\n  1147921,\n  2295859,\n  4591721,\n  9183457,\n  18366923,\n  36733847,\n  73467739,\n  146935499,\n  293871013,\n  587742049,\n  1175484103,\n\n  // chunk #6\n  599,\n  1201,\n  2411,\n  4831,\n  9677,\n  19373,\n  38747,\n  77509,\n  155027,\n  310081,\n  620171,\n  1240361,\n  2480729,\n  4961459,\n  9922933,\n  19845871,\n  39691759,\n  79383533,\n  158767069,\n  317534141,\n  635068283,\n  1270136683,\n\n  // chunk #7\n  311,\n  631,\n  1277,\n  2557,\n  5119,\n  10243,\n  20507,\n  41017,\n  82037,\n  164089,\n  328213,\n  656429,\n  1312867,\n  2625761,\n  5251529,\n  10503061,\n  21006137,\n  42012281,\n  84024581,\n  168049163,\n  336098327,\n  672196673,\n  1344393353,\n\n  // chunk #8\n  3,\n  7,\n  17,\n  37,\n  79,\n  163,\n  331,\n  673,\n  1361,\n  2729,\n  5471,\n  10949,\n  21911,\n  43853,\n  87719,\n  175447,\n  350899,\n  701819,\n  1403641,\n  2807303,\n  5614657,\n  11229331,\n  22458671,\n  44917381,\n  89834777,\n  179669557,\n  359339171,\n  718678369,\n  1437356741,\n\n  // chunk #9\n  43,\n  89,\n  179,\n  359,\n  719,\n  1439,\n  2879,\n  5779,\n  11579,\n  23159,\n  46327,\n  92657,\n  185323,\n  370661,\n  741337,\n  1482707,\n  2965421,\n  5930887,\n  11861791,\n  23723597,\n  47447201,\n  94894427,\n  189788857,\n  379577741,\n  759155483,\n  1518310967,\n\n  // chunk #10\n  379,\n  761,\n  1523,\n  3049,\n  6101,\n  12203,\n  24407,\n  48817,\n  97649,\n  195311,\n  390647,\n  781301,\n  1562611,\n  3125257,\n  6250537,\n  12501169,\n  25002389,\n  50004791,\n  100009607,\n  200019221,\n  400038451,\n  800076929,\n  1600153859,\n\n  // chunk #11\n  13,\n  29,\n  59,\n  127,\n  257,\n  521,\n  1049,\n  2099,\n  4201,\n  8419,\n  16843,\n  33703,\n  67409,\n  134837,\n  269683,\n  539389,\n  1078787,\n  2157587,\n  4315183,\n  8630387,\n  17260781,\n  34521589,\n  69043189,\n  138086407,\n  276172823,\n  552345671,\n  1104691373,\n\n  // chunk #12\n  19,\n  41,\n  83,\n  167,\n  337,\n  677,\n  1361,\n  2729,\n  5471,\n  10949,\n  21911,\n  43853,\n  87719,\n  175447,\n  350899,\n  701819,\n  1403641,\n  2807303,\n  5614657,\n  11229331,\n  22458671,\n  44917381,\n  89834777,\n  179669557,\n  359339171,\n  718678369,\n  1437356741,\n\n  // chunk #13\n  53,\n  107,\n  223,\n  449,\n  907,\n  1823,\n  3659,\n  7321,\n  14653,\n  29311,\n  58631,\n  117269,\n  234539,\n  469099,\n  938207,\n  1876417,\n  3752839,\n  7505681,\n  15011389,\n  30022781,\n  60045577,\n  120091177,\n  240182359,\n  480364727,\n  960729461,\n  1921458943\n];\n\nprimeNumbers.sort(ascending);\n\nexport function nextPrime(value) {\n  let index = binarySearch(primeNumbers, value, ascending);\n  if (index < 0) {\n    index = ~index;\n  }\n  return primeNumbers[index];\n}\n","import { largestPrime, nextPrime } from './primeFinder';\n\nconst FREE = 0;\nconst FULL = 1;\nconst REMOVED = 2;\n\nconst defaultInitialCapacity = 150;\nconst defaultMinLoadFactor = 1 / 6;\nconst defaultMaxLoadFactor = 2 / 3;\n\nexport default class HashTable {\n  constructor(options = {}) {\n    if (options instanceof HashTable) {\n      this.table = options.table.slice();\n      this.values = options.values.slice();\n      this.state = options.state.slice();\n      this.minLoadFactor = options.minLoadFactor;\n      this.maxLoadFactor = options.maxLoadFactor;\n      this.distinct = options.distinct;\n      this.freeEntries = options.freeEntries;\n      this.lowWaterMark = options.lowWaterMark;\n      this.highWaterMark = options.maxLoadFactor;\n      return;\n    }\n\n    const initialCapacity =\n      options.initialCapacity === undefined\n        ? defaultInitialCapacity\n        : options.initialCapacity;\n    if (initialCapacity < 0) {\n      throw new RangeError(\n        `initial capacity must not be less than zero: ${initialCapacity}`\n      );\n    }\n\n    const minLoadFactor =\n      options.minLoadFactor === undefined\n        ? defaultMinLoadFactor\n        : options.minLoadFactor;\n    const maxLoadFactor =\n      options.maxLoadFactor === undefined\n        ? defaultMaxLoadFactor\n        : options.maxLoadFactor;\n    if (minLoadFactor < 0 || minLoadFactor >= 1) {\n      throw new RangeError(`invalid minLoadFactor: ${minLoadFactor}`);\n    }\n    if (maxLoadFactor <= 0 || maxLoadFactor >= 1) {\n      throw new RangeError(`invalid maxLoadFactor: ${maxLoadFactor}`);\n    }\n    if (minLoadFactor >= maxLoadFactor) {\n      throw new RangeError(\n        `minLoadFactor (${minLoadFactor}) must be smaller than maxLoadFactor (${maxLoadFactor})`\n      );\n    }\n\n    let capacity = initialCapacity;\n    // User wants to put at least capacity elements. We need to choose the size based on the maxLoadFactor to\n    // avoid the need to rehash before this capacity is reached.\n    // actualCapacity * maxLoadFactor >= capacity\n    capacity = (capacity / maxLoadFactor) | 0;\n    capacity = nextPrime(capacity);\n    if (capacity === 0) capacity = 1;\n\n    this.table = newArray(capacity);\n    this.values = newArray(capacity);\n    this.state = newArray(capacity);\n\n    this.minLoadFactor = minLoadFactor;\n    if (capacity === largestPrime) {\n      this.maxLoadFactor = 1;\n    } else {\n      this.maxLoadFactor = maxLoadFactor;\n    }\n\n    this.distinct = 0;\n    this.freeEntries = capacity;\n\n    this.lowWaterMark = 0;\n    this.highWaterMark = chooseHighWaterMark(capacity, this.maxLoadFactor);\n  }\n\n  clone() {\n    return new HashTable(this);\n  }\n\n  get size() {\n    return this.distinct;\n  }\n\n  get(key) {\n    const i = this.indexOfKey(key);\n    if (i < 0) return 0;\n    return this.values[i];\n  }\n\n  set(key, value) {\n    let i = this.indexOfInsertion(key);\n    if (i < 0) {\n      i = -i - 1;\n      this.values[i] = value;\n      return false;\n    }\n\n    if (this.distinct > this.highWaterMark) {\n      const newCapacity = chooseGrowCapacity(\n        this.distinct + 1,\n        this.minLoadFactor,\n        this.maxLoadFactor\n      );\n      this.rehash(newCapacity);\n      return this.set(key, value);\n    }\n\n    this.table[i] = key;\n    this.values[i] = value;\n    if (this.state[i] === FREE) this.freeEntries--;\n    this.state[i] = FULL;\n    this.distinct++;\n\n    if (this.freeEntries < 1) {\n      const newCapacity = chooseGrowCapacity(\n        this.distinct + 1,\n        this.minLoadFactor,\n        this.maxLoadFactor\n      );\n      this.rehash(newCapacity);\n    }\n\n    return true;\n  }\n\n  remove(key, noRehash) {\n    const i = this.indexOfKey(key);\n    if (i < 0) return false;\n\n    this.state[i] = REMOVED;\n    this.distinct--;\n\n    if (!noRehash) this.maybeShrinkCapacity();\n\n    return true;\n  }\n\n  delete(key, noRehash) {\n    const i = this.indexOfKey(key);\n    if (i < 0) return false;\n\n    this.state[i] = FREE;\n    this.distinct--;\n\n    if (!noRehash) this.maybeShrinkCapacity();\n\n    return true;\n  }\n\n  maybeShrinkCapacity() {\n    if (this.distinct < this.lowWaterMark) {\n      const newCapacity = chooseShrinkCapacity(\n        this.distinct,\n        this.minLoadFactor,\n        this.maxLoadFactor\n      );\n      this.rehash(newCapacity);\n    }\n  }\n\n  containsKey(key) {\n    return this.indexOfKey(key) >= 0;\n  }\n\n  indexOfKey(key) {\n    const table = this.table;\n    const state = this.state;\n    const length = this.table.length;\n\n    const hash = key & 0x7fffffff;\n    let i = hash % length;\n    let decrement = hash % (length - 2);\n    if (decrement === 0) decrement = 1;\n\n    while (state[i] !== FREE && (state[i] === REMOVED || table[i] !== key)) {\n      i -= decrement;\n      if (i < 0) i += length;\n    }\n\n    if (state[i] === FREE) return -1;\n    return i;\n  }\n\n  containsValue(value) {\n    return this.indexOfValue(value) >= 0;\n  }\n\n  indexOfValue(value) {\n    const values = this.values;\n    const state = this.state;\n\n    for (var i = 0; i < state.length; i++) {\n      if (state[i] === FULL && values[i] === value) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  indexOfInsertion(key) {\n    const table = this.table;\n    const state = this.state;\n    const length = table.length;\n\n    const hash = key & 0x7fffffff;\n    let i = hash % length;\n    let decrement = hash % (length - 2);\n    if (decrement === 0) decrement = 1;\n\n    while (state[i] === FULL && table[i] !== key) {\n      i -= decrement;\n      if (i < 0) i += length;\n    }\n\n    if (state[i] === REMOVED) {\n      const j = i;\n      while (state[i] !== FREE && (state[i] === REMOVED || table[i] !== key)) {\n        i -= decrement;\n        if (i < 0) i += length;\n      }\n      if (state[i] === FREE) i = j;\n    }\n\n    if (state[i] === FULL) {\n      return -i - 1;\n    }\n\n    return i;\n  }\n\n  ensureCapacity(minCapacity) {\n    if (this.table.length < minCapacity) {\n      const newCapacity = nextPrime(minCapacity);\n      this.rehash(newCapacity);\n    }\n  }\n\n  rehash(newCapacity) {\n    const oldCapacity = this.table.length;\n\n    if (newCapacity <= this.distinct) throw new Error('Unexpected');\n\n    const oldTable = this.table;\n    const oldValues = this.values;\n    const oldState = this.state;\n\n    const newTable = newArray(newCapacity);\n    const newValues = newArray(newCapacity);\n    const newState = newArray(newCapacity);\n\n    this.lowWaterMark = chooseLowWaterMark(newCapacity, this.minLoadFactor);\n    this.highWaterMark = chooseHighWaterMark(newCapacity, this.maxLoadFactor);\n\n    this.table = newTable;\n    this.values = newValues;\n    this.state = newState;\n    this.freeEntries = newCapacity - this.distinct;\n\n    for (var i = 0; i < oldCapacity; i++) {\n      if (oldState[i] === FULL) {\n        var element = oldTable[i];\n        var index = this.indexOfInsertion(element);\n        newTable[index] = element;\n        newValues[index] = oldValues[i];\n        newState[index] = FULL;\n      }\n    }\n  }\n\n  forEachKey(callback) {\n    for (var i = 0; i < this.state.length; i++) {\n      if (this.state[i] === FULL) {\n        if (!callback(this.table[i])) return false;\n      }\n    }\n    return true;\n  }\n\n  forEachValue(callback) {\n    for (var i = 0; i < this.state.length; i++) {\n      if (this.state[i] === FULL) {\n        if (!callback(this.values[i])) return false;\n      }\n    }\n    return true;\n  }\n\n  forEachPair(callback) {\n    for (var i = 0; i < this.state.length; i++) {\n      if (this.state[i] === FULL) {\n        if (!callback(this.table[i], this.values[i])) return false;\n      }\n    }\n    return true;\n  }\n}\n\nfunction chooseLowWaterMark(capacity, minLoad) {\n  return (capacity * minLoad) | 0;\n}\n\nfunction chooseHighWaterMark(capacity, maxLoad) {\n  return Math.min(capacity - 2, (capacity * maxLoad) | 0);\n}\n\nfunction chooseGrowCapacity(size, minLoad, maxLoad) {\n  return nextPrime(\n    Math.max(size + 1, ((4 * size) / (3 * minLoad + maxLoad)) | 0)\n  );\n}\n\nfunction chooseShrinkCapacity(size, minLoad, maxLoad) {\n  return nextPrime(\n    Math.max(size + 1, ((4 * size) / (minLoad + 3 * maxLoad)) | 0)\n  );\n}\n\nfunction newArray(size) {\n  return Array(size).fill(0);\n}\n","import HashTable from 'ml-hash-table';\n\nexport class SparseMatrix {\n  constructor(rows, columns, options = {}) {\n    if (rows instanceof SparseMatrix) {\n      // clone\n      const other = rows;\n      this._init(\n        other.rows,\n        other.columns,\n        other.elements.clone(),\n        other.threshold\n      );\n      return;\n    }\n\n    if (Array.isArray(rows)) {\n      const matrix = rows;\n      rows = matrix.length;\n      options = columns || {};\n      columns = matrix[0].length;\n      this._init(rows, columns, new HashTable(options), options.threshold);\n      for (var i = 0; i < rows; i++) {\n        for (var j = 0; j < columns; j++) {\n          var value = matrix[i][j];\n          if (this.threshold && Math.abs(value) < this.threshold) value = 0;\n          if (value !== 0) {\n            this.elements.set(i * columns + j, matrix[i][j]);\n          }\n        }\n      }\n    } else {\n      this._init(rows, columns, new HashTable(options), options.threshold);\n    }\n  }\n\n  _init(rows, columns, elements, threshold) {\n    this.rows = rows;\n    this.columns = columns;\n    this.elements = elements;\n    this.threshold = threshold || 0;\n  }\n\n  static eye(rows = 1, columns = rows) {\n    const min = Math.min(rows, columns);\n    const matrix = new SparseMatrix(rows, columns, { initialCapacity: min });\n    for (var i = 0; i < min; i++) {\n      matrix.set(i, i, 1);\n    }\n    return matrix;\n  }\n\n  clone() {\n    return new SparseMatrix(this);\n  }\n\n  to2DArray() {\n    const copy = new Array(this.rows);\n    for (var i = 0; i < this.rows; i++) {\n      copy[i] = new Array(this.columns);\n      for (var j = 0; j < this.columns; j++) {\n        copy[i][j] = this.get(i, j);\n      }\n    }\n    return copy;\n  }\n\n  isSquare() {\n    return this.rows === this.columns;\n  }\n\n  isSymmetric() {\n    if (!this.isSquare()) return false;\n\n    var symmetric = true;\n    this.forEachNonZero((i, j, v) => {\n      if (this.get(j, i) !== v) {\n        symmetric = false;\n        return false;\n      }\n      return v;\n    });\n    return symmetric;\n  }\n\n  /**\n   * Search for the wither band in the main diagonals\n   * @return {number}\n   */\n  bandWidth() {\n    let min = this.columns;\n    let max = -1;\n    this.forEachNonZero((i, j, v) => {\n      let diff = i - j;\n      min = Math.min(min, diff);\n      max = Math.max(max, diff);\n      return v;\n    });\n    return max - min;\n  }\n\n  /**\n   * Test if a matrix is consider banded using a threshold\n   * @param {number} width\n   * @return {boolean}\n   */\n  isBanded(width) {\n    let bandWidth = this.bandWidth();\n    return bandWidth <= width;\n  }\n\n  get cardinality() {\n    return this.elements.size;\n  }\n\n  get size() {\n    return this.rows * this.columns;\n  }\n\n  get(row, column) {\n    return this.elements.get(row * this.columns + column);\n  }\n\n  set(row, column, value) {\n    if (this.threshold && Math.abs(value) < this.threshold) value = 0;\n    if (value === 0) {\n      this.elements.remove(row * this.columns + column);\n    } else {\n      this.elements.set(row * this.columns + column, value);\n    }\n    return this;\n  }\n\n  mmul(other) {\n    if (this.columns !== other.rows) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        'Number of columns of left matrix are not equal to number of rows of right matrix.'\n      );\n    }\n\n    const m = this.rows;\n    const p = other.columns;\n\n    const result = new SparseMatrix(m, p);\n    this.forEachNonZero((i, j, v1) => {\n      other.forEachNonZero((k, l, v2) => {\n        if (j === k) {\n          result.set(i, l, result.get(i, l) + v1 * v2);\n        }\n        return v2;\n      });\n      return v1;\n    });\n    return result;\n  }\n\n  kroneckerProduct(other) {\n    const m = this.rows;\n    const n = this.columns;\n    const p = other.rows;\n    const q = other.columns;\n\n    const result = new SparseMatrix(m * p, n * q, {\n      initialCapacity: this.cardinality * other.cardinality\n    });\n    this.forEachNonZero((i, j, v1) => {\n      other.forEachNonZero((k, l, v2) => {\n        result.set(p * i + k, q * j + l, v1 * v2);\n        return v2;\n      });\n      return v1;\n    });\n    return result;\n  }\n\n  forEachNonZero(callback) {\n    this.elements.forEachPair((key, value) => {\n      const i = (key / this.columns) | 0;\n      const j = key % this.columns;\n      let r = callback(i, j, value);\n      if (r === false) return false; // stop iteration\n      if (this.threshold && Math.abs(r) < this.threshold) r = 0;\n      if (r !== value) {\n        if (r === 0) {\n          this.elements.remove(key, true);\n        } else {\n          this.elements.set(key, r);\n        }\n      }\n      return true;\n    });\n    this.elements.maybeShrinkCapacity();\n    return this;\n  }\n\n  getNonZeros() {\n    const cardinality = this.cardinality;\n    const rows = new Array(cardinality);\n    const columns = new Array(cardinality);\n    const values = new Array(cardinality);\n    var idx = 0;\n    this.forEachNonZero((i, j, value) => {\n      rows[idx] = i;\n      columns[idx] = j;\n      values[idx] = value;\n      idx++;\n      return value;\n    });\n    return { rows, columns, values };\n  }\n\n  setThreshold(newThreshold) {\n    if (newThreshold !== 0 && newThreshold !== this.threshold) {\n      this.threshold = newThreshold;\n      this.forEachNonZero((i, j, v) => v);\n    }\n    return this;\n  }\n\n  /**\n   * @return {SparseMatrix} - New transposed sparse matrix\n   */\n  transpose() {\n    let trans = new SparseMatrix(this.columns, this.rows, {\n      initialCapacity: this.cardinality\n    });\n    this.forEachNonZero((i, j, value) => {\n      trans.set(j, i, value);\n      return value;\n    });\n    return trans;\n  }\n}\n\nSparseMatrix.prototype.klass = 'Matrix';\n\nSparseMatrix.identity = SparseMatrix.eye;\nSparseMatrix.prototype.tensorProduct = SparseMatrix.prototype.kroneckerProduct;\n\n/*\n Add dynamically instance and static methods for mathematical operations\n */\n\nvar inplaceOperator = `\n(function %name%(value) {\n    if (typeof value === 'number') return this.%name%S(value);\n    return this.%name%M(value);\n})\n`;\n\nvar inplaceOperatorScalar = `\n(function %name%S(value) {\n    this.forEachNonZero((i, j, v) => v %op% value);\n    return this;\n})\n`;\n\nvar inplaceOperatorMatrix = `\n(function %name%M(matrix) {\n    matrix.forEachNonZero((i, j, v) => {\n        this.set(i, j, this.get(i, j) %op% v);\n        return v;\n    });\n    return this;\n})\n`;\n\nvar staticOperator = `\n(function %name%(matrix, value) {\n    var newMatrix = new SparseMatrix(matrix);\n    return newMatrix.%name%(value);\n})\n`;\n\nvar inplaceMethod = `\n(function %name%() {\n    this.forEachNonZero((i, j, v) => %method%(v));\n    return this;\n})\n`;\n\nvar staticMethod = `\n(function %name%(matrix) {\n    var newMatrix = new SparseMatrix(matrix);\n    return newMatrix.%name%();\n})\n`;\n\nconst operators = [\n  // Arithmetic operators\n  ['+', 'add'],\n  ['-', 'sub', 'subtract'],\n  ['*', 'mul', 'multiply'],\n  ['/', 'div', 'divide'],\n  ['%', 'mod', 'modulus'],\n  // Bitwise operators\n  ['&', 'and'],\n  ['|', 'or'],\n  ['^', 'xor'],\n  ['<<', 'leftShift'],\n  ['>>', 'signPropagatingRightShift'],\n  ['>>>', 'rightShift', 'zeroFillRightShift']\n];\n\nfor (const operator of operators) {\n  for (let i = 1; i < operator.length; i++) {\n    SparseMatrix.prototype[operator[i]] = eval(\n      fillTemplateFunction(inplaceOperator, {\n        name: operator[i],\n        op: operator[0]\n      })\n    );\n    SparseMatrix.prototype[`${operator[i]}S`] = eval(\n      fillTemplateFunction(inplaceOperatorScalar, {\n        name: `${operator[i]}S`,\n        op: operator[0]\n      })\n    );\n    SparseMatrix.prototype[`${operator[i]}M`] = eval(\n      fillTemplateFunction(inplaceOperatorMatrix, {\n        name: `${operator[i]}M`,\n        op: operator[0]\n      })\n    );\n\n    SparseMatrix[operator[i]] = eval(\n      fillTemplateFunction(staticOperator, { name: operator[i] })\n    );\n  }\n}\n\nvar methods = [['~', 'not']];\n\n[\n  'abs',\n  'acos',\n  'acosh',\n  'asin',\n  'asinh',\n  'atan',\n  'atanh',\n  'cbrt',\n  'ceil',\n  'clz32',\n  'cos',\n  'cosh',\n  'exp',\n  'expm1',\n  'floor',\n  'fround',\n  'log',\n  'log1p',\n  'log10',\n  'log2',\n  'round',\n  'sign',\n  'sin',\n  'sinh',\n  'sqrt',\n  'tan',\n  'tanh',\n  'trunc'\n].forEach(function (mathMethod) {\n  methods.push([`Math.${mathMethod}`, mathMethod]);\n});\n\nfor (const method of methods) {\n  for (let i = 1; i < method.length; i++) {\n    SparseMatrix.prototype[method[i]] = eval(\n      fillTemplateFunction(inplaceMethod, {\n        name: method[i],\n        method: method[0]\n      })\n    );\n    SparseMatrix[method[i]] = eval(\n      fillTemplateFunction(staticMethod, { name: method[i] })\n    );\n  }\n}\n\nfunction fillTemplateFunction(template, values) {\n  for (const i in values) {\n    template = template.replace(new RegExp(`%${i}%`, 'g'), values[i]);\n  }\n  return template;\n}\n","export default function additiveSymmetric(a, b) {\n  var i = 0;\n  var ii = a.length;\n  var d = 0;\n  for (; i < ii; i++) {\n    d += ((a[i] - b[i]) * (a[i] - b[i]) * (a[i] + b[i])) / (a[i] * b[i]);\n  }\n  return 2 * d;\n}\n","export default function avg(a, b) {\n  var ii = a.length;\n  var max = 0;\n  var ans = 0;\n  var aux = 0;\n  for (var i = 0; i < ii; i++) {\n    aux = Math.abs(a[i] - b[i]);\n    ans += aux;\n    if (max < aux) {\n      max = aux;\n    }\n  }\n  return (max + ans) / 2;\n}\n","export default function bhattacharyya(a, b) {\n  var ii = a.length;\n  var ans = 0;\n  for (var i = 0; i < ii; i++) {\n    ans += Math.sqrt(a[i] * b[i]);\n  }\n  return -Math.log(ans);\n}\n","export default function canberra(a, b) {\n  var ii = a.length;\n  var ans = 0;\n  for (var i = 0; i < ii; i++) {\n    ans += Math.abs(a[i] - b[i]) / (a[i] + b[i]);\n  }\n  return ans;\n}\n","export default function chebyshev(a, b) {\n  var ii = a.length;\n  var max = 0;\n  var aux = 0;\n  for (var i = 0; i < ii; i++) {\n    aux = Math.abs(a[i] - b[i]);\n    if (max < aux) {\n      max = aux;\n    }\n  }\n  return max;\n}\n","export default function clark(a, b) {\n  var i = 0;\n  var ii = a.length;\n  var d = 0;\n  for (; i < ii; i++) {\n    d += Math.sqrt(\n      ((a[i] - b[i]) * (a[i] - b[i])) / ((a[i] + b[i]) * (a[i] + b[i]))\n    );\n  }\n  return 2 * d;\n}\n","export default function czekanowskiSimilarity(a, b) {\n  var up = 0;\n  var down = 0;\n  for (var i = 0; i < a.length; i++) {\n    up += Math.min(a[i], b[i]);\n    down += a[i] + b[i];\n  }\n  return (2 * up) / down;\n}\n","import czekanowskiSimilarity from '../similarities/czekanowski';\n\nexport default function czekanowskiDistance(a, b) {\n  return 1 - czekanowskiSimilarity(a, b);\n}\n","export default function dice(a, b) {\n  var ii = a.length;\n  var p = 0;\n  var q1 = 0;\n  var q2 = 0;\n  for (var i = 0; i < ii; i++) {\n    p += a[i] * a[i];\n    q1 += b[i] * b[i];\n    q2 += (a[i] - b[i]) * (a[i] - b[i]);\n  }\n  return q2 / (p + q1);\n}\n","export default function divergence(a, b) {\n  var i = 0;\n  var ii = a.length;\n  var d = 0;\n  for (; i < ii; i++) {\n    d += ((a[i] - b[i]) * (a[i] - b[i])) / ((a[i] + b[i]) * (a[i] + b[i]));\n  }\n  return 2 * d;\n}\n","export default function fidelity(a, b) {\n  var ii = a.length;\n  var ans = 0;\n  for (var i = 0; i < ii; i++) {\n    ans += Math.sqrt(a[i] * b[i]);\n  }\n  return ans;\n}\n","export default function gower(a, b) {\n  var ii = a.length;\n  var ans = 0;\n  for (var i = 0; i < ii; i++) {\n    ans += Math.abs(a[i] - b[i]);\n  }\n  return ans / ii;\n}\n","export default function harmonicMean(a, b) {\n  var ii = a.length;\n  var ans = 0;\n  for (var i = 0; i < ii; i++) {\n    ans += (a[i] * b[i]) / (a[i] + b[i]);\n  }\n  return 2 * ans;\n}\n","export default function hellinger(a, b) {\n  var ii = a.length;\n  var ans = 0;\n  for (var i = 0; i < ii; i++) {\n    ans += Math.sqrt(a[i] * b[i]);\n  }\n  return 2 * Math.sqrt(1 - ans);\n}\n","export default function innerProduct(a, b) {\n  var ii = a.length;\n  var ans = 0;\n  for (var i = 0; i < ii; i++) {\n    ans += a[i] * b[i];\n  }\n  return ans;\n}\n","export default function intersection(a, b) {\n  var ii = a.length;\n  var ans = 0;\n  for (var i = 0; i < ii; i++) {\n    ans += Math.min(a[i], b[i]);\n  }\n  return 1 - ans;\n}\n","export default function jaccard(a, b) {\n  var ii = a.length;\n  var p1 = 0;\n  var p2 = 0;\n  var q1 = 0;\n  var q2 = 0;\n  for (var i = 0; i < ii; i++) {\n    p1 += a[i] * b[i];\n    p2 += a[i] * a[i];\n    q1 += b[i] * b[i];\n    q2 += (a[i] - b[i]) * (a[i] - b[i]);\n  }\n  return q2 / (p2 + q1 - p1);\n}\n","export default function jeffreys(a, b) {\n  var ii = a.length;\n  var ans = 0;\n  for (var i = 0; i < ii; i++) {\n    ans += (a[i] - b[i]) * Math.log(a[i] / b[i]);\n  }\n  return ans;\n}\n","export default function jensenDifference(a, b) {\n  var ii = a.length;\n  var ans = 0;\n  for (var i = 0; i < ii; i++) {\n    ans +=\n      (a[i] * Math.log(a[i]) + b[i] * Math.log(b[i])) / 2 -\n      ((a[i] + b[i]) / 2) * Math.log((a[i] + b[i]) / 2);\n  }\n  return ans;\n}\n","export default function jensenShannon(a, b) {\n  var ii = a.length;\n  var p = 0;\n  var q = 0;\n  for (var i = 0; i < ii; i++) {\n    p += a[i] * Math.log((2 * a[i]) / (a[i] + b[i]));\n    q += b[i] * Math.log((2 * b[i]) / (a[i] + b[i]));\n  }\n  return (p + q) / 2;\n}\n","export default function kdivergence(a, b) {\n  var ii = a.length;\n  var ans = 0;\n  for (var i = 0; i < ii; i++) {\n    ans += a[i] * Math.log((2 * a[i]) / (a[i] + b[i]));\n  }\n  return ans;\n}\n","export default function kulczynski(a, b) {\n  var ii = a.length;\n  var up = 0;\n  var down = 0;\n  for (var i = 0; i < ii; i++) {\n    up += Math.abs(a[i] - b[i]);\n    down += Math.min(a[i], b[i]);\n  }\n  return up / down;\n}\n","export default function kullbackLeibler(a, b) {\n  var ii = a.length;\n  var ans = 0;\n  for (var i = 0; i < ii; i++) {\n    ans += a[i] * Math.log(a[i] / b[i]);\n  }\n  return ans;\n}\n","export default function kumarHassebrook(a, b) {\n  var ii = a.length;\n  var p = 0;\n  var p2 = 0;\n  var q2 = 0;\n  for (var i = 0; i < ii; i++) {\n    p += a[i] * b[i];\n    p2 += a[i] * a[i];\n    q2 += b[i] * b[i];\n  }\n  return p / (p2 + q2 - p);\n}\n","export default function kumarJohnson(a, b) {\n  var ii = a.length;\n  var ans = 0;\n  for (var i = 0; i < ii; i++) {\n    ans +=\n      Math.pow(a[i] * a[i] - b[i] * b[i], 2) / (2 * Math.pow(a[i] * b[i], 1.5));\n  }\n  return ans;\n}\n","export default function lorentzian(a, b) {\n  var ii = a.length;\n  var ans = 0;\n  for (var i = 0; i < ii; i++) {\n    ans += Math.log(Math.abs(a[i] - b[i]) + 1);\n  }\n  return ans;\n}\n","export default function manhattan(a, b) {\n  var i = 0;\n  var ii = a.length;\n  var d = 0;\n  for (; i < ii; i++) {\n    d += Math.abs(a[i] - b[i]);\n  }\n  return d;\n}\n","export default function matusita(a, b) {\n  var ii = a.length;\n  var ans = 0;\n  for (var i = 0; i < ii; i++) {\n    ans += Math.sqrt(a[i] * b[i]);\n  }\n  return Math.sqrt(2 - 2 * ans);\n}\n","export default function minkowski(a, b, p) {\n  var i = 0;\n  var ii = a.length;\n  var d = 0;\n  for (; i < ii; i++) {\n    d += Math.pow(Math.abs(a[i] - b[i]), p);\n  }\n  return Math.pow(d, 1 / p);\n}\n","export default function motyka(a, b) {\n  var ii = a.length;\n  var up = 0;\n  var down = 0;\n  for (var i = 0; i < ii; i++) {\n    up += Math.min(a[i], b[i]);\n    down += a[i] + b[i];\n  }\n  return 1 - up / down;\n}\n","export default function neyman(a, b) {\n  var i = 0;\n  var ii = a.length;\n  var d = 0;\n  for (; i < ii; i++) {\n    d += ((a[i] - b[i]) * (a[i] - b[i])) / a[i];\n  }\n  return d;\n}\n","export default function pearson(a, b) {\n  var i = 0;\n  var ii = a.length;\n  var d = 0;\n  for (; i < ii; i++) {\n    d += ((a[i] - b[i]) * (a[i] - b[i])) / b[i];\n  }\n  return d;\n}\n","export default function probabilisticSymmetric(a, b) {\n  var i = 0;\n  var ii = a.length;\n  var d = 0;\n  for (; i < ii; i++) {\n    d += ((a[i] - b[i]) * (a[i] - b[i])) / (a[i] + b[i]);\n  }\n  return 2 * d;\n}\n","export default function ruzicka(a, b) {\n  var ii = a.length;\n  var up = 0;\n  var down = 0;\n  for (var i = 0; i < ii; i++) {\n    up += Math.min(a[i], b[i]);\n    down += Math.max(a[i], b[i]);\n  }\n  return up / down;\n}\n","export default function soergel(a, b) {\n  var ii = a.length;\n  var up = 0;\n  var down = 0;\n  for (var i = 0; i < ii; i++) {\n    up += Math.abs(a[i] - b[i]);\n    down += Math.max(a[i], b[i]);\n  }\n  return up / down;\n}\n","export default function sorensen(a, b) {\n  var ii = a.length;\n  var up = 0;\n  var down = 0;\n  for (var i = 0; i < ii; i++) {\n    up += Math.abs(a[i] - b[i]);\n    down += a[i] + b[i];\n  }\n  return up / down;\n}\n","export default function squared(a, b) {\n  var i = 0;\n  var ii = a.length;\n  var d = 0;\n  for (; i < ii; i++) {\n    d += ((a[i] - b[i]) * (a[i] - b[i])) / (a[i] + b[i]);\n  }\n  return d;\n}\n","export default function squaredChord(a, b) {\n  var ii = a.length;\n  var ans = 0;\n  for (var i = 0; i < ii; i++) {\n    ans +=\n      (Math.sqrt(a[i]) - Math.sqrt(b[i])) * (Math.sqrt(a[i]) - Math.sqrt(b[i]));\n  }\n  return ans;\n}\n","export default function taneja(a, b) {\n  var ii = a.length;\n  var ans = 0;\n  for (var i = 0; i < ii; i++) {\n    ans +=\n      ((a[i] + b[i]) / 2) *\n      Math.log((a[i] + b[i]) / (2 * Math.sqrt(a[i] * b[i])));\n  }\n  return ans;\n}\n","export default function tanimoto(a, b, bitvector) {\n  if (bitvector) {\n    var inter = 0;\n    var union = 0;\n    for (var j = 0; j < a.length; j++) {\n      inter += a[j] && b[j];\n      union += a[j] || b[j];\n    }\n    if (union === 0) {\n      return 1;\n    }\n    return inter / union;\n  } else {\n    var ii = a.length;\n    var p = 0;\n    var q = 0;\n    var m = 0;\n    for (var i = 0; i < ii; i++) {\n      p += a[i];\n      q += b[i];\n      m += Math.min(a[i], b[i]);\n    }\n    return 1 - (p + q - 2 * m) / (p + q - m);\n  }\n}\n","import tanimotoS from '../similarities/tanimoto';\n\nexport default function tanimoto(a, b, bitvector) {\n  if (bitvector) {\n    return 1 - tanimotoS(a, b, bitvector);\n  } else {\n    var ii = a.length;\n    var p = 0;\n    var q = 0;\n    var m = 0;\n    for (var i = 0; i < ii; i++) {\n      p += a[i];\n      q += b[i];\n      m += Math.min(a[i], b[i]);\n    }\n    return (p + q - 2 * m) / (p + q - m);\n  }\n}\n","export default function topsoe(a, b) {\n  var ii = a.length;\n  var ans = 0;\n  for (var i = 0; i < ii; i++) {\n    ans +=\n      a[i] * Math.log((2 * a[i]) / (a[i] + b[i])) +\n      b[i] * Math.log((2 * b[i]) / (a[i] + b[i]));\n  }\n  return ans;\n}\n","export default function waveHedges(a, b) {\n  var ii = a.length;\n  var ans = 0;\n  for (var i = 0; i < ii; i++) {\n    ans += 1 - Math.min(a[i], b[i]) / Math.max(a[i], b[i]);\n  }\n  return ans;\n}\n","import binarySearch from 'binary-search';\nimport { ascending } from 'num-sort';\n\n/**\n * Function that creates the tree\n * @param {Array<Array<number>>} spectrum\n * @param {object} [options]\n * @return {Tree|null}\n * left and right have the same structure than the parent,\n * or are null if they are leaves\n */\nexport function createTree(spectrum, options = {}) {\n  var X = spectrum[0];\n  const {\n    minWindow = 0.16,\n    threshold = 0.01,\n    from = X[0],\n    to = X[X.length - 1]\n  } = options;\n\n  return mainCreateTree(\n    spectrum[0],\n    spectrum[1],\n    from,\n    to,\n    minWindow,\n    threshold\n  );\n}\n\nfunction mainCreateTree(X, Y, from, to, minWindow, threshold) {\n  if (to - from < minWindow) {\n    return null;\n  }\n\n  // search first point\n  var start = binarySearch(X, from, ascending);\n  if (start < 0) {\n    start = ~start;\n  }\n\n  // stop at last point\n  var sum = 0;\n  var center = 0;\n  for (var i = start; i < X.length; i++) {\n    if (X[i] >= to) {\n      break;\n    }\n    sum += Y[i];\n    center += X[i] * Y[i];\n  }\n\n  if (sum < threshold) {\n    return null;\n  }\n\n  center /= sum;\n  if (center - from < 1e-6 || to - center < 1e-6) {\n    return null;\n  }\n  if (center - from < minWindow / 4) {\n    return mainCreateTree(X, Y, center, to, minWindow, threshold);\n  } else {\n    if (to - center < minWindow / 4) {\n      return mainCreateTree(X, Y, from, center, minWindow, threshold);\n    } else {\n      return new Tree(\n        sum,\n        center,\n        mainCreateTree(X, Y, from, center, minWindow, threshold),\n        mainCreateTree(X, Y, center, to, minWindow, threshold)\n      );\n    }\n  }\n}\n\nclass Tree {\n  constructor(sum, center, left, right) {\n    this.sum = sum;\n    this.center = center;\n    this.left = left;\n    this.right = right;\n  }\n}\n","import { createTree } from './createTree';\n\n/**\n * Similarity between two nodes\n * @param {Tree|Array<Array<number>>} a - tree A node\n * @param {Tree|Array<Array<number>>} b - tree B node\n * @param {object} [options]\n * @return {number} similarity measure between tree nodes\n */\nexport function getSimilarity(a, b, options = {}) {\n  const { alpha = 0.1, beta = 0.33, gamma = 0.001 } = options;\n\n  if (a === null || b === null) {\n    return 0;\n  }\n  if (Array.isArray(a)) {\n    a = createTree(a);\n  }\n  if (Array.isArray(b)) {\n    b = createTree(b);\n  }\n\n  var C =\n    (alpha * Math.min(a.sum, b.sum)) / Math.max(a.sum, b.sum) +\n    (1 - alpha) * Math.exp(-gamma * Math.abs(a.center - b.center));\n\n  return (\n    beta * C +\n    ((1 - beta) *\n      (getSimilarity(a.left, b.left, options) +\n        getSimilarity(a.right, b.right, options))) /\n      2\n  );\n}\n","import { getSimilarity } from './getSimilarity';\n\nexport { createTree } from './createTree';\n\nexport function treeSimilarity(A, B, options = {}) {\n  return getSimilarity(A, B, options);\n}\n\nexport function getFunction(options = {}) {\n  return (A, B) => getSimilarity(A, B, options);\n}\n","export default function cosine(a, b) {\n  var ii = a.length;\n  var p = 0;\n  var p2 = 0;\n  var q2 = 0;\n  for (var i = 0; i < ii; i++) {\n    p += a[i] * b[i];\n    p2 += a[i] * a[i];\n    q2 += b[i] * b[i];\n  }\n  return p / (Math.sqrt(p2) * Math.sqrt(q2));\n}\n","import diceD from '../distances/dice';\n\nexport default function dice(a, b) {\n  return 1 - diceD(a, b);\n}\n","import intersectionD from '../distances/intersection';\n\nexport default function intersection(a, b) {\n  return 1 - intersectionD(a, b);\n}\n","import jaccardD from '../distances/jaccard';\n\nexport default function jaccard(a, b) {\n  return 1 - jaccardD(a, b);\n}\n","import kulczynskiD from '../distances/kulczynski';\n\nexport default function kulczynski(a, b) {\n  return 1 / kulczynskiD(a, b);\n}\n","import motykaD from '../distances/motyka';\n\nexport default function motyka(a, b) {\n  return 1 - motykaD(a, b);\n}\n","import mean from 'ml-array-mean';\n\nimport cosine from './cosine';\n\nexport default function pearson(a, b) {\n  var avgA = mean(a);\n  var avgB = mean(b);\n\n  var newA = new Array(a.length);\n  var newB = new Array(b.length);\n  for (var i = 0; i < newA.length; i++) {\n    newA[i] = a[i] - avgA;\n    newB[i] = b[i] - avgB;\n  }\n\n  return cosine(newA, newB);\n}\n","import squaredChordD from '../distances/squaredChord';\n\nexport default function squaredChord(a, b) {\n  return 1 - squaredChordD(a, b);\n}\n","import { Matrix } from 'ml-matrix';\n\nexport function zeroInsteadOfNegative(X) {\n  let rows = X.rows;\n  let columns = X.columns;\n  let newMatrix = new Matrix(X);\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      if (newMatrix.get(r, c) < 0) {\n        newMatrix.set(r, c, 0);\n      }\n    }\n  }\n  return newMatrix;\n}\n","import { Matrix } from 'ml-matrix';\n\nimport { zeroInsteadOfNegative } from '../util/zeroInsteadOfNegative';\n\nexport function checkMatrixS(data, originalMatrix) {\n  let { A, S } = data;\n  //check if is there at least one element cero\n  let indices = [];\n  let sum = S.sum('row');\n\n  for (let i = 0; i < sum.length; i++) {\n    if (sum[i] === 0) {\n      indices.push(i);\n      continue;\n    } else {\n      for (let j = 0; j < S.columns; j++) {\n        if (isNaN(S.get(i, j))) {\n          indices.push(i);\n          break;\n        }\n      }\n    }\n  }\n  // if there than just one zero or NaN element\n  // run a NMF with the residual matrix Y - A*B\n  if (indices.length > 0) {\n    let temp = fastExtractNMF(\n      originalMatrix.clone().subM(A.mmul(S)),\n      indices.length,\n    );\n    for (let i = 0; i < indices.length; i++) {\n      for (let j = 0; j < S.columns; j++) {\n        S.set(indices[i], j, temp.S.get(i, j));\n      }\n      for (let j = 0; j < A.rows; j++) {\n        A.set(j, indices[i], temp.A.get(j, i));\n      }\n    }\n  }\n\n  return Object.assign({}, data, { A, S });\n}\n\nfunction fastExtractNMF(residual, r) {\n  if (r <= 0) return { A: [], S: [] };\n\n  const { columns, rows } = residual;\n\n  let A = Matrix.zeros(rows, r);\n  let S = Matrix.zeros(r, columns);\n  for (let i = 0; i < r; i++) {\n    residual = zeroInsteadOfNegative(residual);\n    if (residual.sum() === 0) continue;\n    let res2 = Matrix.pow(residual, 2).sum('column');\n    //find the max of the first column\n\n    let maxIndex = 0;\n    for (let j = 1; j < res2.length; j++) {\n      if (res2[maxIndex] < res2[j]) maxIndex = j;\n    }\n\n    if (res2[maxIndex] > 0) {\n      let sqrtMaxValue = Math.sqrt(res2[maxIndex]);\n      for (let j = 0; j < rows; j++) {\n        let value = residual.get(j, maxIndex) / sqrtMaxValue;\n        A.set(j, i, value);\n      }\n      let temp = A.getColumnVector(i).transpose().mmul(residual);\n      for (let j = 0; j < columns; j++) {\n        S.set(i, j, Math.max(temp.get(0, j), 0));\n      }\n      let subtracting = A.getColumnVector(i).mmul(S.getRowVector(i));\n      residual = residual.sub(subtracting);\n    }\n  }\n  return { A, S };\n}\n","import { Matrix } from 'ml-matrix';\n\nexport function normBy(x, by = 'column') {\n  let norms = Matrix.mul(x, x).sum(by);\n  let length = norms.length;\n  for (let i = 0; i < length; i++) {\n    norms[i] = Math.sqrt(norms[i]);\n  }\n  return by === 'row'\n    ? Matrix.from1DArray(length, 1, norms)\n    : Matrix.from1DArray(1, length, norms);\n}\n","import { normBy } from './normBy';\n\nexport function normProj(X, normLimits) {\n  let norms;\n  let r = X.rows;\n  let c = X.columns;\n  if (normLimits.rows === r) {\n    norms = normBy(X, 'row');\n    //select rows with norm > 0 then multiply twise by the min\n    for (let i = 0; i < r; i++) {\n      if (norms.get(i, 0) <= 0) continue;\n      for (let j = 0; j < c; j++) {\n        let value =\n          X.get(i, j) *\n          Math.min(norms.get(i, 0), normLimits.get(i, 0) / norms.get(i, 0));\n        X.set(i, j, value);\n      }\n    }\n  } else {\n    norms = normBy(X, 'column');\n    for (let i = 0; i < c; i++) {\n      if (norms.get(0, i) <= 0) continue;\n      for (let j = 0; j < r; j++) {\n        let value =\n          X.get(j, i) *\n          Math.min(norms.get(0, i), normLimits.get(0, i) / norms.get(0, i));\n        X.set(j, i, value);\n      }\n    }\n  }\n  return X;\n}\n","import { Matrix, EVD } from 'ml-matrix';\n\nimport { normBy } from '../util/normBy';\nimport { normProj } from '../util/normProj';\nimport { zeroInsteadOfNegative } from '../util/zeroInsteadOfNegative';\n\nexport function updateMatrixA(Ainit, S, originalMatrix, options) {\n  let {\n    maxFBIteration,\n    toleranceFB,\n    normConstrained = false,\n    lambda,\n  } = options;\n  let St = S.transpose();\n  let H = S.mmul(St);\n  let YSt = originalMatrix.mmul(St);\n  let evd = new EVD(H, { assumeSymmetric: true });\n  let L = Math.max(...evd.realEigenvalues);\n  let A = Ainit;\n  let prevA = A.clone();\n  let t = 1;\n\n  let gradient = (a) => a.mmul(H).sub(YSt);\n  let proximal;\n  if (normConstrained) {\n    let normLimits = normBy(Ainit, 'column');\n    proximal = (x, threshold) =>\n      normProj(zeroInsteadOfNegative(x.subS(threshold)), normLimits);\n  } else {\n    proximal = (x, threshold) => zeroInsteadOfNegative(x.subS(threshold));\n  }\n\n  for (let i = 0; i < maxFBIteration; i++) {\n    let tNext = (1 + Math.sqrt(1 + 4 * t * t)) / 2;\n    let w = (t - 1) / tNext;\n    t = tNext;\n    let B = Matrix.mul(A, w + 1).sub(Matrix.mul(prevA, w));\n    prevA = A.clone();\n    A = proximal(B.sub(gradient(B).divS(L)), lambda / L);\n    if (Matrix.sub(prevA, A).norm() / A.norm() < toleranceFB) {\n      break;\n    }\n  }\n  return A;\n}\n","export function getMax(array = []) {\n  let max = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < array.length; i++) {\n    if (max < array[i]) max = array[i];\n  }\n  return max;\n}\n","import { Matrix, EVD } from 'ml-matrix';\n\nimport { getMax } from '../util/getMax';\nimport { zeroInsteadOfNegative } from '../util/zeroInsteadOfNegative';\n\nexport function updateMatrixS(A, Sinit, originalMatrix, lambda, options) {\n  let { maxFBIteration, toleranceFB } = options;\n  let At = A.transpose();\n  let H = At.mmul(A);\n  let AtY = At.mmul(originalMatrix);\n  let evd = new EVD(H, { assumeSymmetric: true });\n  let L = getMax(evd.realEigenvalues);\n  let t = 1;\n  let S = Sinit.clone();\n  let prevS = S.clone();\n  let gradient = (s) => H.mmul(s).sub(AtY);\n  let proximal = (x, threshold) => zeroInsteadOfNegative(x.subS(threshold));\n\n  for (let i = 0; i < maxFBIteration; i++) {\n    let tNext = (1 + Math.sqrt(1 + 4 * t * t)) / 2;\n    let w = (t - 1) / tNext;\n    t = tNext;\n    // R = S_k + w [S_k - S_(k-1)] = (1 + w) .* S_k - w .* S_(k-1)\n    let R = Matrix.mul(S, 1 + w).sub(Matrix.mul(prevS, w));\n    prevS = S.clone();\n    S = proximal(R.sub(gradient(R).divS(L)), lambda / L);\n    if (Matrix.sub(prevS, S).norm() / S.norm() < toleranceFB) {\n      break;\n    }\n  }\n  return S;\n}\n","import { Matrix, solve } from 'ml-matrix';\n\nimport { zeroInsteadOfNegative } from '../util/zeroInsteadOfNegative';\n\nimport { checkMatrixS } from './checkMatrixS';\nimport { updateMatrixA } from './updateMatrixA';\nimport { updateMatrixS } from './updateMatrixS';\n\nexport function initialize(originalMatrix, options = {}) {\n  const {\n    rank,\n    randGenerator,\n    maxInitFBIteration,\n    toleranceFBInit,\n    maxFBIteration,\n    toleranceFB,\n    normConstrained,\n  } = options;\n\n  let result = {};\n  let rows = originalMatrix.rows;\n\n  result.A = Matrix.rand(rows, rank, { random: randGenerator });\n\n  for (let iter = 0; iter < maxInitFBIteration; iter++) {\n    //select columns with sum positive from A\n    let sumC = result.A.sum('column');\n    for (let i = 0; i < sumC.length; i++) {\n      while (sumC[i] === 0) {\n        sumC[i] = 0;\n        for (let j = 0; j < rows; j++) {\n          result.A.set(j, i, randGenerator());\n          sumC[i] += result.A.get(j, i);\n        }\n      }\n    }\n\n    //resolve the system of equation Lx = D for x, then select just non negative values;\n    result.S = zeroInsteadOfNegative(solve(result.A, originalMatrix));\n\n    //select rows with positive sum by row\n    let sumR = result.S.sum('row');\n    let positiveSumRowIndexS = [];\n    let positiveSumRowS = [];\n    for (let i = 0; i < sumR.length; i++) {\n      if (sumR[i] > 0) {\n        positiveSumRowIndexS.push(i);\n        positiveSumRowS.push(result.S.getRow(i));\n      }\n    }\n\n    positiveSumRowS = Matrix.checkMatrix(positiveSumRowS);\n\n    // solve the system of linear equation xL = D for x. knowing that D/L = (L'\\D')'.\n    let candidateA = zeroInsteadOfNegative(\n      solve(positiveSumRowS.transpose(), originalMatrix.transpose()),\n    );\n\n    //then, set the columns of A with an index equal to the row index with sum > 0 into S\n    //this step complete the last transpose of D/L = (L'\\D')'.\n    for (let i = 0; i < positiveSumRowIndexS.length; i++) {\n      let colCandidate = candidateA.getRow(i);\n      for (let j = 0; j < rows; j++) {\n        result.A.set(j, positiveSumRowIndexS[i], colCandidate[j]);\n      }\n    }\n\n    let prevS = result.S.clone();\n    result.S = updateMatrixS(result.A, result.S, originalMatrix, 0, {\n      maxFBIteration,\n      toleranceFB,\n    });\n\n    result = checkMatrixS(result, originalMatrix);\n\n    result.A = updateMatrixA(result.A, result.S, originalMatrix, 0, {\n      maxFBIteration,\n      toleranceFB,\n      normConstrained,\n    });\n\n    if (\n      Matrix.sub(prevS, result.S).norm() / result.S.norm() <\n      toleranceFBInit\n    ) {\n      break;\n    }\n  }\n  return result;\n}\n","import { Matrix } from 'ml-matrix';\n\nimport { normBy } from '../util/normBy';\n\nexport function normalize(data, options) {\n  const { normOnA } = options;\n  let DS = normBy(data.S.transpose(), 'column');\n  let DA = normBy(data.A, 'column');\n  let D = Matrix.mul(DS, DA);\n  let onS, onA;\n  if (normOnA) {\n    onS = (index, c) =>\n      (data.S.get(index, c) * D.get(0, index)) / DS.get(0, index);\n    onA = (index, r) => data.A.get(r, index) / DA.get(0, index);\n  } else {\n    onS = (index, c) => data.S.get(index, c) / DS.get(0, index);\n    onA = (index, r) =>\n      (data.A.get(r, index) * D.get(0, index)) / DA.get(0, index);\n  }\n  const sColumns = data.S.columns;\n  const aRows = data.A.rows;\n  for (let index = 0; index < D.columns; index++) {\n    let valueForS, valueForA;\n    if (D.get(0, index) > 0) {\n      valueForS = onS;\n      valueForA = onA;\n    } else {\n      valueForA = () => 0;\n      valueForS = () => 0;\n    }\n    for (let c = 0; c < sColumns; c++) {\n      data.S.set(index, c, valueForS(index, c));\n    }\n    for (let r = 0; r < aRows; r++) {\n      data.A.set(r, index, valueForA(index, r));\n    }\n  }\n  return data;\n}\n","import median from 'median-quickselect';\nimport { Matrix } from 'ml-matrix';\n\nexport function getMedians(X, by) {\n  let medians = [];\n  let rows = X.rows;\n  let columns = X.columns;\n  switch (by) {\n    case 'column':\n      for (let i = 0; i < columns; i++) {\n        medians.push(median(X.getColumn(i)));\n      }\n      medians = Matrix.from1DArray(1, columns, medians);\n      break;\n    default:\n      for (let i = 0; i < rows; i++) {\n        medians.push(median(X.getRow(i)));\n      }\n      medians = Matrix.from1DArray(rows, 1, medians);\n  }\n  return medians;\n}\n","import { Matrix } from 'ml-matrix';\n\nimport { getMedians } from './getMedians';\n\nexport function dimMADstd(X, by) {\n  let medians = getMedians(X, by);\n  let matrix = X.clone();\n  matrix =\n    by === 'column'\n      ? matrix.subRowVector(medians.to1DArray())\n      : matrix.subColumnVector(medians.to1DArray());\n  return Matrix.mul(getMedians(matrix.abs(), by), 1.4826);\n}\n","import { Matrix } from 'ml-matrix';\n\nimport { dimMADstd } from '../util/dimMADstd';\n\nexport function updateLambda(data, originalMatrix, options = {}) {\n  let { refinementBeginning, tauMAD } = options;\n  let { iteration, lambda, A, S } = data;\n\n  if (refinementBeginning <= iteration) return lambda;\n\n  let sigmaResidue;\n  if (options.lambdaInf !== undefined) {\n    sigmaResidue = options.lambdaInf / options.tauMAD;\n  } else if (options.addStd !== undefined) {\n    sigmaResidue = options.addStd;\n  } else {\n    let alY = Matrix.sub(originalMatrix, A.mmul(S)).to1DArray();\n    let result = dimMADstd(Matrix.from1DArray(1, alY.length, alY), 'row');\n    sigmaResidue = result.get(0, 0);\n  }\n  let nextLambda = Math.max(\n    tauMAD * sigmaResidue,\n    lambda - 1 / (refinementBeginning - iteration),\n  );\n  return nextLambda;\n}\n","import { Matrix } from 'ml-matrix';\n\nimport { checkMatrixS } from './stages/checkMatrixS';\nimport { initialize } from './stages/initialize';\nimport { normalize } from './stages/normalize';\nimport { updateLambda } from './stages/updateLambda';\nimport { updateMatrixA } from './stages/updateMatrixA';\nimport { updateMatrixS } from './stages/updateMatrixS';\n\n/**\n * Performing non-negative matrix factorization solving argmin_(A >= 0, S >= 0) 1 / 2 * ||Y - AS||_2^2 + lambda * ||S||_1\n * @param {Matrix||Array<Array>} originalMatrix - Matrix to be separated.\n * @param {Number} rank - The maximum number of linearly independent column/row vectors in the matrix.\n * @param {Object} [options = {}] - Options of ngmca factorization method.\n * @param {Number} [options.maximumIteration = 500] - Maximum number of iterations.\n * @param {Number} [options.maxFBIteration = 80] - Maximum number of iterations of the Forward-Backward subroutine.\n * @param {Object} [options.randGenerator = Math.random] - Random number generator for the subroutine of initialization.\n * @param {Number} [options.maxInitFBIteration = 50] - Maximum number of iterations of the Forward-Backward subroutine at the initialization.\n * @param {Number} [options.toleranceFB = 1e-5] - relative difference tolerance for convergence of the Forward-Backward sub-iterations.\n * @param {Number} [options.toleranceFBInit = 0] - relative difference tolerance for convergence of the Forward-Backward sub-iterations at the initialization.\n * @param {Number} [options.phaseRatio = 0.8] - transition between decreasing thresholding phase and refinement phase in percent of the iterations.\n * @param {Number} [options.tauMAD = 1] - constant coefficient for the final threshold computation.\n * @param {Boolean} [options.useTranspose = false] - if true the originalMatrix is transposed.\n */\n\nexport function nGMCA(originalMatrix, rank, options = {}) {\n  const {\n    maximumIteration = 500,\n    maxFBIteration = 80,\n    maxInitFBIteration = 50,\n    toleranceFBInit = 0,\n    toleranceFB = 0.00001,\n    phaseRatio = 0.8,\n    randGenerator = Math.random,\n    tauMAD = 1,\n    useTranspose = false,\n  } = options;\n\n  let { normConstrained = false } = options;\n  originalMatrix = Matrix.checkMatrix(originalMatrix);\n  if (useTranspose) originalMatrix = originalMatrix.transpose();\n  let refinementBeginning = Math.floor(phaseRatio * maximumIteration);\n\n  let data = initialize(originalMatrix, {\n    rank,\n    randGenerator,\n    maxInitFBIteration,\n    toleranceFBInit,\n    maxFBIteration,\n    toleranceFB,\n  });\n\n  data = normalize(data, { normOnA: true });\n  data.lambda = data.A.transpose()\n    .mmul(data.A.mmul(data.S).sub(originalMatrix))\n    .abs()\n    .max();\n\n  for (let iter = 0; iter < maximumIteration; iter++) {\n    data.iteration = iter;\n    data.S = updateMatrixS(\n      data.A,\n      data.S,\n      originalMatrix,\n      data.lambda,\n      options,\n    );\n    data = checkMatrixS(data, originalMatrix);\n    data = normalize(data, { normOnA: false });\n\n    if (iter > refinementBeginning) normConstrained = true;\n\n    data.A = updateMatrixA(data.A, data.S, originalMatrix, {\n      maxFBIteration,\n      toleranceFB,\n      normConstrained,\n      lambda: 0,\n    });\n\n    data = normalize(data, { normOnA: true });\n\n    data.lambda = updateLambda(data, originalMatrix, {\n      refinementBeginning,\n      tauMAD,\n    });\n  }\n\n  if (useTranspose) {\n    let temp = data.A.transpose();\n    data.A = data.S.transpose();\n    data.S = temp;\n  }\n  return data;\n}\n","'use strict';\n\n// Accuracy\nexports.acc = pred => {\n    const l = pred.cutoffs.length;\n    const result = new Array(l);\n    for (var i = 0; i < l; i++) {\n        result[i] = (pred.tn[i] + pred.tp[i]) / (l - 1);\n    }\n    return result;\n};\n\n// Error rate\nexports.err = pred => {\n    const l = pred.cutoffs.length;\n    const result = new Array(l);\n    for (var i = 0; i < l; i++) {\n        result[i] = (pred.fn[i] + pred.fp[i] / (l - 1));\n    }\n    return result;\n};\n\n// False positive rate\nexports.fpr = pred => {\n    const l = pred.cutoffs.length;\n    const result = new Array(l);\n    for (var i = 0; i < l; i++) {\n        result[i] = pred.fp[i] / pred.nNeg;\n    }\n    return result;\n};\n\n// True positive rate\nexports.tpr = pred => {\n    const l = pred.cutoffs.length;\n    const result = new Array(l);\n    for (var i = 0; i < l; i++) {\n        result[i] = pred.tp[i] / pred.nPos;\n    }\n    return result;\n};\n\n// False negative rate\nexports.fnr = pred => {\n    const l = pred.cutoffs.length;\n    const result = new Array(l);\n    for (var i = 0; i < l; i++) {\n        result[i] = pred.fn[i] / pred.nPos;\n    }\n    return result;\n};\n\n// True negative rate\nexports.tnr = pred => {\n    const l = pred.cutoffs.length;\n    const result = new Array(l);\n    for (var i = 0; i < l; i++) {\n        result[i] = pred.tn[i] / pred.nNeg;\n    }\n    return result;\n};\n\n// Positive predictive value\nexports.ppv = pred => {\n    const l = pred.cutoffs.length;\n    const result = new Array(l);\n    for (var i = 0; i < l; i++) {\n        result[i] = (pred.fp[i] + pred.tp[i] !== 0) ? (pred.tp[i] / (pred.fp[i] + pred.tp[i])) : 0;\n    }\n    return result;\n};\n\n// Negative predictive value\nexports.npv = pred => {\n    const l = pred.cutoffs.length;\n    const result = new Array(l);\n    for (var i = 0; i < l; i++) {\n        result[i] = (pred.fn[i] + pred.tn[i] !== 0) ? (pred.tn[i] / (pred.fn[i] + pred.tn[i])) : 0;\n    }\n    return result;\n};\n\n// Prediction conditioned fallout\nexports.pcfall = pred => {\n    const l = pred.cutoffs.length;\n    const result = new Array(l);\n    for (var i = 0; i < l; i++) {\n        result[i] = (pred.fp[i] + pred.tp[i] !== 0) ? 1 - (pred.tp[i] / (pred.fp[i] + pred.tp[i])) : 1;\n    }\n    return result;\n};\n\n// Prediction conditioned miss\nexports.pcmiss = pred => {\n    const l = pred.cutoffs.length;\n    const result = new Array(l);\n    for (var i = 0; i < l; i++) {\n        result[i] = (pred.fn[i] + pred.tn[i] !== 0) ? 1 - (pred.tn[i] / (pred.fn[i] + pred.tn[i])) : 1;\n    }\n    return result;\n};\n\n// Lift value\nexports.lift = pred => {\n    const l = pred.cutoffs.length;\n    const result = new Array(l);\n    for (var i = 0; i < l; i++) {\n        result[i] = (pred.nPosPred[i] !== 0) ? ((pred.tp[i] / pred.nPos) / (pred.nPosPred[i] / pred.nSamples)) : 0;\n    }\n    return result;\n};\n\n// Rate of positive predictions\nexports.rpp = pred => {\n    const l = pred.cutoffs.length;\n    const result = new Array(l);\n    for (var i = 0; i < l; i++) {\n        result[i] = pred.nPosPred[i] / pred.nSamples;\n    }\n    return result;\n};\n\n// Rate of negative predictions\nexports.rnp = pred => {\n    const l = pred.cutoffs.length;\n    const result = new Array(l);\n    for (var i = 0; i < l; i++) {\n        result[i] = pred.nNegPred[i] / pred.nSamples;\n    }\n    return result;\n};\n\n// Threshold\nexports.threshold = pred => {\n    const clone = pred.cutoffs.slice();\n    clone[0] = clone[1]; // Remove the infinite value\n    return clone;\n};\n","'use strict';\n\nconst measures = require('./measures');\n\nclass Performance {\n    /**\n     *\n     * @param prediction - The prediction matrix\n     * @param target - The target matrix (values: truthy for same class, falsy for different class)\n     * @param options\n     *\n     * @option    all    True if the entire matrix must be used. False to ignore the diagonal and lower part (default is false, for similarity/distance matrices)\n     * @option    max    True if the max value corresponds to a perfect match (like in similarity matrices), false if it is the min value (default is false, like in distance matrices. All values will be multiplied by -1)\n     */\n    constructor(prediction, target, options) {\n        options = options || {};\n        if (prediction.length !== target.length || prediction[0].length !== target[0].length) {\n            throw new Error('dimensions of prediction and target do not match');\n        }\n        const rows = prediction.length;\n        const columns = prediction[0].length;\n        const isDistance = !options.max;\n\n        const predP = [];\n\n        if (options.all) {\n            for (var i = 0; i < rows; i++) {\n                for (var j = 0; j < columns; j++) {\n                    predP.push({\n                        pred: prediction[i][j],\n                        targ: target[i][j]\n                    });\n                }\n            }\n        } else {\n            if (rows < 3 || rows !== columns) {\n                throw new Error('When \"all\" option is false, the prediction matrix must be square and have at least 3 columns');\n            }\n            for (var i = 0; i < rows - 1; i++) {\n                for (var j = i + 1; j < columns; j++) {\n                    predP.push({\n                        pred: prediction[i][j],\n                        targ: target[i][j]\n                    });\n                }\n            }\n        }\n\n        if (isDistance) {\n            predP.sort((a, b) => a.pred - b.pred);\n        } else {\n            predP.sort((a, b) => b.pred - a.pred);\n        }\n        \n        const cutoffs = this.cutoffs = [isDistance ? Number.MIN_VALUE : Number.MAX_VALUE];\n        const fp = this.fp = [0];\n        const tp = this.tp = [0];\n\n        var nPos = 0;\n        var nNeg = 0;\n\n        var currentPred = predP[0].pred;\n        var nTp = 0;\n        var nFp = 0;\n        for (var i = 0; i < predP.length; i++) {\n            if (predP[i].pred !== currentPred) {\n                cutoffs.push(currentPred);\n                fp.push(nFp);\n                tp.push(nTp);\n                currentPred = predP[i].pred;\n            }\n            if (predP[i].targ) {\n                nPos++;\n                nTp++;\n            } else {\n                nNeg++;\n                nFp++;\n            }\n        }\n        cutoffs.push(currentPred);\n        fp.push(nFp);\n        tp.push(nTp);\n\n        const l = cutoffs.length;\n        const fn = this.fn = new Array(l);\n        const tn = this.tn = new Array(l);\n        const nPosPred = this.nPosPred = new Array(l);\n        const nNegPred = this.nNegPred = new Array(l);\n\n        for (var i = 0; i < l; i++) {\n            fn[i] = nPos - tp[i];\n            tn[i] = nNeg - fp[i];\n\n            nPosPred[i] = tp[i] + fp[i];\n            nNegPred[i] = tn[i] + fn[i];\n        }\n\n        this.nPos = nPos;\n        this.nNeg = nNeg;\n        this.nSamples = nPos + nNeg;\n    }\n\n    /**\n     * Computes a measure from the prediction object.\n     *\n     * Many measures are available and can be combined :\n     * To create a ROC curve, you need fpr and tpr\n     * To create a DET curve, you need fnr and fpr\n     * To create a Lift chart, you need rpp and lift\n     *\n     * Possible measures are : threshold (Threshold), acc (Accuracy), err (Error rate),\n     * fpr (False positive rate), tpr (True positive rate), fnr (False negative rate), tnr (True negative rate), ppv (Positive predictive value),\n     * npv (Negative predictive value), pcfall (Prediction-conditioned fallout), pcmiss (Prediction-conditioned miss), lift (Lift value), rpp (Rate of positive predictions), rnp (Rate of negative predictions)\n     *\n     * @param measure - The short name of the measure\n     *\n     * @return [number]\n     */\n    getMeasure(measure) {\n        if (typeof measure !== 'string') {\n            throw new Error('No measure specified');\n        }\n        if (!measures[measure]) {\n            throw new Error(`The specified measure (${measure}) does not exist`);\n        }\n        return measures[measure](this);\n    }\n\n    /**\n     * Returns the area under the ROC curve\n     */\n    getAURC() {\n        const l = this.cutoffs.length;\n        const x = new Array(l);\n        const y = new Array(l);\n        for (var i = 0; i < l; i++) {\n            x[i] = this.fp[i] / this.nNeg;\n            y[i] = this.tp[i] / this.nPos;\n        }\n        var auc = 0;\n        for (i = 1; i < l; i++) {\n            auc += 0.5 * (x[i] - x[i - 1]) * (y[i] + y[i - 1]);\n        }\n        return auc;\n    }\n\n    /**\n     * Returns the area under the DET curve\n     */\n    getAUDC() {\n        const l = this.cutoffs.length;\n        const x = new Array(l);\n        const y = new Array(l);\n        for (var i = 0; i < l; i++) {\n            x[i] = this.fn[i] / this.nPos;\n            y[i] = this.fp[i] / this.nNeg;\n        }\n        var auc = 0;\n        for (i = 1; i < l; i++) {\n            auc += 0.5 * (x[i] + x[i - 1]) * (y[i] - y[i - 1]);\n        }\n        return auc;\n    }\n\n    getDistribution(options) {\n        options = options || {};\n        var cutLength = this.cutoffs.length;\n        var cutLow = options.xMin || Math.floor(this.cutoffs[cutLength - 1] * 100) / 100;\n        var cutHigh = options.xMax || Math.ceil(this.cutoffs[1] * 100) / 100;\n        var interval = options.interval || Math.floor(((cutHigh - cutLow) / 20 * 10000000) - 1) / 10000000; // Trick to avoid the precision problem of float numbers\n\n        var xLabels = [];\n        var interValues = [];\n        var intraValues = [];\n        var interCumPercent = [];\n        var intraCumPercent = [];\n\n        var nTP = this.tp[cutLength - 1], currentTP = 0;\n        var nFP = this.fp[cutLength - 1], currentFP = 0;\n\n        for (var i = cutLow, j = (cutLength - 1); i <= cutHigh; i += interval) {\n            while (this.cutoffs[j] < i)\n                j--;\n\n            xLabels.push(i);\n\n            var thisTP = nTP - currentTP - this.tp[j];\n            var thisFP = nFP - currentFP - this.fp[j];\n\n            currentTP += thisTP;\n            currentFP += thisFP;\n\n            interValues.push(thisFP);\n            intraValues.push(thisTP);\n\n            interCumPercent.push(100 - (nFP - this.fp[j]) / nFP * 100);\n            intraCumPercent.push(100 - (nTP - this.tp[j]) / nTP * 100);\n        }\n\n        return {\n            xLabels: xLabels,\n            interValues: interValues,\n            intraValues: intraValues,\n            interCumPercent: interCumPercent,\n            intraCumPercent: intraCumPercent\n        };\n    }\n}\n\nPerformance.names = {\n    acc: 'Accuracy',\n    err: 'Error rate',\n    fpr: 'False positive rate',\n    tpr: 'True positive rate',\n    fnr: 'False negative rate',\n    tnr: 'True negative rate',\n    ppv: 'Positive predictive value',\n    npv: 'Negative predictive value',\n    pcfall: 'Prediction-conditioned fallout',\n    pcmiss: 'Prediction-conditioned miss',\n    lift: 'Lift value',\n    rpp: 'Rate of positive predictions',\n    rnp: 'Rate of negative predictions',\n    threshold: 'Threshold'\n};\n\nmodule.exports = Performance;\n","'use strict';\n\nvar defaultOptions = {\n  size: 1,\n  value: 0\n};\n\n/**\n * Case when the entry is an array\n * @param data\n * @param options\n * @returns {Array}\n */\nfunction arrayCase(data, options) {\n  var len = data.length;\n  if (typeof options.size === 'number') {\n    options.size = [options.size, options.size];\n  }\n\n  var cond = len + options.size[0] + options.size[1];\n\n  var output;\n  if (options.output) {\n    if (options.output.length !== cond) {\n      throw new RangeError('Wrong output size');\n    }\n    output = options.output;\n  } else {\n    output = new Array(cond);\n  }\n\n  var i;\n  if (options.value === 'circular') {\n    for (i = 0; i < cond; i++) {\n      if (i < options.size[0]) {\n        output[i] = data[(len - (options.size[0] % len) + i) % len];\n      } else if (i < options.size[0] + len) {\n        output[i] = data[i - options.size[0]];\n      } else {\n        output[i] = data[(i - options.size[0]) % len];\n      }\n    }\n  } else if (options.value === 'replicate') {\n    for (i = 0; i < cond; i++) {\n      if (i < options.size[0]) output[i] = data[0];\n      else if (i < options.size[0] + len) output[i] = data[i - options.size[0]];\n      else output[i] = data[len - 1];\n    }\n  } else if (options.value === 'symmetric') {\n    if (options.size[0] > len || options.size[1] > len) {\n      throw new RangeError(\n        'expanded value should not be bigger than the data length'\n      );\n    }\n    for (i = 0; i < cond; i++) {\n      if (i < options.size[0]) output[i] = data[options.size[0] - 1 - i];\n      else if (i < options.size[0] + len) output[i] = data[i - options.size[0]];\n      else output[i] = data[2 * len + options.size[0] - i - 1];\n    }\n  } else {\n    for (i = 0; i < cond; i++) {\n      if (i < options.size[0]) output[i] = options.value;\n      else if (i < options.size[0] + len) output[i] = data[i - options.size[0]];\n      else output[i] = options.value;\n    }\n  }\n\n  return output;\n}\n\n/**\n * Case when the entry is a matrix\n * @param data\n * @param options\n * @returns {Array}\n */\nfunction matrixCase(data, options) {\n  // var row = data.length;\n  // var col = data[0].length;\n  if (options.size[0] === undefined) {\n    options.size = [options.size, options.size, options.size, options.size];\n  }\n  throw new Error('matrix not supported yet, sorry');\n}\n\n/**\n * Pads and array\n * @param {Array <number>} data\n * @param {object} options\n */\nfunction padArray(data, options) {\n  options = Object.assign({}, defaultOptions, options);\n  if (Array.isArray(data)) {\n    if (Array.isArray(data[0])) return matrixCase(data, options);\n    else return arrayCase(data, options);\n  } else {\n    throw new TypeError('data should be an array');\n  }\n}\n\nmodule.exports = padArray;\n","import { Matrix, MatrixTransposeView, inverse } from 'ml-matrix';\nimport padArray from 'ml-pad-array';\n\n/**\n * Factorial of a number\n * @ignore\n * @param n\n * @return {number}\n */\nfunction factorial(n) {\n  let r = 1;\n  while (n > 0) r *= n--;\n  return r;\n}\n\nconst defaultOptions = {\n  windowSize: 5,\n  derivative: 1,\n  polynomial: 2,\n  pad: 'none',\n  padValue: 'replicate',\n};\n\n/**\n * Savitzky-Golay filter\n * @param {Array <number>} data\n * @param {number} h\n * @param {Object} options\n * @returns {Array}\n */\nexport default function savitzkyGolay(data, h, options) {\n  options = Object.assign({}, defaultOptions, options);\n  if (\n    options.windowSize % 2 === 0 ||\n    options.windowSize < 5 ||\n    !Number.isInteger(options.windowSize)\n  ) {\n    throw new RangeError(\n      'Invalid window size (should be odd and at least 5 integer number)',\n    );\n  }\n  if (options.derivative < 0 || !Number.isInteger(options.derivative)) {\n    throw new RangeError('Derivative should be a positive integer');\n  }\n  if (options.polynomial < 1 || !Number.isInteger(options.polynomial)) {\n    throw new RangeError('Polynomial should be a positive integer');\n  }\n\n  let C, norm;\n  let step = Math.floor(options.windowSize / 2);\n\n  if (options.pad === 'pre') {\n    data = padArray(data, { size: step, value: options.padValue });\n  }\n\n  let ans = new Array(data.length - 2 * step);\n\n  if (\n    options.windowSize === 5 &&\n    options.polynomial === 2 &&\n    (options.derivative === 1 || options.derivative === 2)\n  ) {\n    if (options.derivative === 1) {\n      C = [-2, -1, 0, 1, 2];\n      norm = 10;\n    } else {\n      C = [2, -1, -2, -1, 2];\n      norm = 7;\n    }\n  } else {\n    let J = Matrix.ones(options.windowSize, options.polynomial + 1);\n    let inic = -(options.windowSize - 1) / 2;\n    for (let i = 0; i < J.rows; i++) {\n      for (let j = 0; j < J.columns; j++) {\n        if (inic + 1 !== 0 || j !== 0) J.set(i, j, Math.pow(inic + i, j));\n      }\n    }\n    let Jtranspose = new MatrixTransposeView(J);\n    let Jinv = inverse(Jtranspose.mmul(J));\n    C = Jinv.mmul(Jtranspose);\n    C = C.getRow(options.derivative);\n    norm = 1 / factorial(options.derivative);\n  }\n  let det = norm * Math.pow(h, options.derivative);\n  for (let k = step; k < data.length - step; k++) {\n    let d = 0;\n    for (let l = 0; l < C.length; l++) d += (C[l] * data[l + k - step]) / det;\n    ans[k - step] = d;\n  }\n\n  if (options.pad === 'post') {\n    ans = padArray(ans, { size: step, value: options.padValue });\n  }\n\n  return ans;\n}\n","// auxiliary file to create the 256 look at table elements\n\nvar ans = new Array(256);\nfor (var i = 0; i < 256; i++) {\n    var num = i;\n    var c = 0;\n    while (num) {\n        num = num & (num - 1);\n        c++;\n    }\n    ans[i] = c;\n}\n\nmodule.exports = ans;","'use strict';\n\nvar eightBits = require('./creator');\n\n/**\n * Count the number of true values in an array\n * @param {Array} arr\n * @return {number}\n */\nfunction count(arr) {\n    var c = 0;\n    for (var i = 0; i < arr.length; i++) {\n        c += eightBits[arr[i] & 0xff] + eightBits[(arr[i] >> 8) & 0xff] + eightBits[(arr[i] >> 16) & 0xff] + eightBits[(arr[i] >> 24) & 0xff];\n    }\n    return c;\n}\n\n/**\n * Logical AND operation\n * @param {Array} arr1\n * @param {Array} arr2\n * @return {Array}\n */\nfunction and(arr1, arr2) {\n    var ans = new Array(arr1.length);\n    for (var i = 0; i < arr1.length; i++)\n        ans[i] = arr1[i] & arr2[i];\n    return ans;\n}\n\n/**\n * Logical OR operation\n * @param {Array} arr1\n * @param {Array} arr2\n * @return {Array}\n */\nfunction or(arr1, arr2) {\n    var ans = new Array(arr1.length);\n    for (var i = 0; i < arr1.length; i++)\n        ans[i] = arr1[i] | arr2[i];\n    return ans;\n}\n\n/**\n * Logical XOR operation\n * @param {Array} arr1\n * @param {Array} arr2\n * @return {Array}\n */\nfunction xor(arr1, arr2) {\n    var ans = new Array(arr1.length);\n    for (var i = 0; i < arr1.length; i++)\n        ans[i] = arr1[i] ^ arr2[i];\n    return ans;\n}\n\n/**\n * Logical NOT operation\n * @param {Array} arr\n * @return {Array}\n */\nfunction not(arr) {\n    var ans = new Array(arr.length);\n    for (var i = 0; i < ans.length; i++)\n        ans[i] = ~arr[i];\n    return ans;\n}\n\n/**\n * Gets the n value of array arr\n * @param {Array} arr\n * @param {number} n\n * @return {boolean}\n */\nfunction getBit(arr, n) {\n    var index = n >> 5; // Same as Math.floor(n/32)\n    var mask = 1 << (31 - n % 32);\n    return Boolean(arr[index] & mask);\n}\n\n/**\n * Sets the n value of array arr to the value val\n * @param {Array} arr\n * @param {number} n\n * @param {boolean} val\n * @return {Array}\n */\nfunction setBit(arr, n, val) {\n    var index = n >> 5; // Same as Math.floor(n/32)\n    var mask = 1 << (31 - n % 32);\n    if (val)\n        arr[index] = mask | arr[index];\n    else\n        arr[index] = ~mask & arr[index];\n    return arr;\n}\n\n/**\n * Translates an array of numbers to a string of bits\n * @param {Array} arr\n * @returns {string}\n */\nfunction toBinaryString(arr) {\n    var str = '';\n    for (var i = 0; i < arr.length; i++) {\n        var obj = (arr[i] >>> 0).toString(2);\n        str += '00000000000000000000000000000000'.substr(obj.length) + obj;\n    }\n    return str;\n}\n\n/**\n * Creates an array of numbers based on a string of bits\n * @param {string} str\n * @returns {Array}\n */\nfunction parseBinaryString(str) {\n    var len = str.length / 32;\n    var ans = new Array(len);\n    for (var i = 0; i < len; i++) {\n        ans[i] = parseInt(str.substr(i*32, 32), 2) | 0;\n    }\n    return ans;\n}\n\n/**\n * Translates an array of numbers to a hex string\n * @param {Array} arr\n * @returns {string}\n */\nfunction toHexString(arr) {\n    var str = '';\n    for (var i = 0; i < arr.length; i++) {\n        var obj = (arr[i] >>> 0).toString(16);\n        str += '00000000'.substr(obj.length) + obj;\n    }\n    return str;\n}\n\n/**\n * Creates an array of numbers based on a hex string\n * @param {string} str\n * @returns {Array}\n */\nfunction parseHexString(str) {\n    var len = str.length / 8;\n    var ans = new Array(len);\n    for (var i = 0; i < len; i++) {\n        ans[i] = parseInt(str.substr(i*8, 8), 16) | 0;\n    }\n    return ans;\n}\n\n/**\n * Creates a human readable string of the array\n * @param {Array} arr\n * @returns {string}\n */\nfunction toDebug(arr) {\n    var binary = toBinaryString(arr);\n    var str = '';\n    for (var i = 0; i < arr.length; i++) {\n        str += '0000'.substr((i * 32).toString(16).length) + (i * 32).toString(16) + ':';\n        for (var j = 0; j < 32; j += 4) {\n            str += ' ' + binary.substr(i * 32 + j, 4);\n        }\n        if (i < arr.length - 1) str += '\\n';\n    }\n    return str\n}\n\nmodule.exports = {\n    count: count,\n    and: and,\n    or: or,\n    xor: xor,\n    not: not,\n    getBit: getBit,\n    setBit: setBit,\n    toBinaryString: toBinaryString,\n    parseBinaryString: parseBinaryString,\n    toHexString: toHexString,\n    parseHexString: parseHexString,\n    toDebug: toDebug\n};\n","export default function SavitzkyGolay(data, h, options = {}) {\n  let { windowSize = 9, derivative = 0, polynomial = 3 } = options;\n\n  if (windowSize % 2 === 0 || windowSize < 5 || !Number.isInteger(windowSize)) {\n    throw new RangeError(\n      'Invalid window size (should be odd and at least 5 integer number)',\n    );\n  }\n  if (windowSize > data.length) {\n    throw new RangeError(\n      `Window size is higher than the data length ${windowSize}>${data.length}`,\n    );\n  }\n  if (derivative < 0 || !Number.isInteger(derivative)) {\n    throw new RangeError('Derivative should be a positive integer');\n  }\n  if (polynomial < 1 || !Number.isInteger(polynomial)) {\n    throw new RangeError('Polynomial should be a positive integer');\n  }\n  if (polynomial >= 6) {\n    // eslint-disable-next-line no-console\n    console.warn(\n      'You should not use polynomial grade higher than 5 if you are' +\n        ' not sure that your data arises from such a model. Possible polynomial oscillation problems',\n    );\n  }\n\n  let half = Math.floor(windowSize / 2);\n  let np = data.length;\n  let ans = new Array(np);\n  let weights = fullWeights(windowSize, polynomial, derivative);\n  let hs = 0;\n  let constantH = true;\n  if (Array.isArray(h)) {\n    constantH = false;\n  } else {\n    hs = Math.pow(h, derivative);\n  }\n\n  //For the borders\n  for (let i = 0; i < half; i++) {\n    let wg1 = weights[half - i - 1];\n    let wg2 = weights[half + i + 1];\n    let d1 = 0;\n    let d2 = 0;\n    for (let l = 0; l < windowSize; l++) {\n      d1 += wg1[l] * data[l];\n      d2 += wg2[l] * data[np - windowSize + l];\n    }\n    if (constantH) {\n      ans[half - i - 1] = d1 / hs;\n      ans[np - half + i] = d2 / hs;\n    } else {\n      hs = getHs(h, half - i - 1, half, derivative);\n      ans[half - i - 1] = d1 / hs;\n      hs = getHs(h, np - half + i, half, derivative);\n      ans[np - half + i] = d2 / hs;\n    }\n  }\n\n  //For the internal points\n  let wg = weights[half];\n  for (let i = windowSize; i <= np; i++) {\n    let d = 0;\n    for (let l = 0; l < windowSize; l++) d += wg[l] * data[l + i - windowSize];\n    if (!constantH) hs = getHs(h, i - half - 1, half, derivative);\n    ans[i - half - 1] = d / hs;\n  }\n  return ans;\n}\n\nfunction getHs(h, center, half, derivative) {\n  let hs = 0;\n  let count = 0;\n  for (let i = center - half; i < center + half; i++) {\n    if (i >= 0 && i < h.length - 1) {\n      hs += h[i + 1] - h[i];\n      count++;\n    }\n  }\n  return Math.pow(hs / count, derivative);\n}\n\nfunction GramPoly(i, m, k, s) {\n  let Grampoly = 0;\n  if (k > 0) {\n    Grampoly =\n      ((4 * k - 2) / (k * (2 * m - k + 1))) *\n        (i * GramPoly(i, m, k - 1, s) + s * GramPoly(i, m, k - 1, s - 1)) -\n      (((k - 1) * (2 * m + k)) / (k * (2 * m - k + 1))) *\n        GramPoly(i, m, k - 2, s);\n  } else {\n    if (k === 0 && s === 0) {\n      Grampoly = 1;\n    } else {\n      Grampoly = 0;\n    }\n  }\n  return Grampoly;\n}\n\nfunction GenFact(a, b) {\n  let gf = 1;\n  if (a >= b) {\n    for (let j = a - b + 1; j <= a; j++) {\n      gf *= j;\n    }\n  }\n  return gf;\n}\n\nfunction Weight(i, t, m, n, s) {\n  let sum = 0;\n  for (let k = 0; k <= n; k++) {\n    //console.log(k);\n    sum +=\n      (2 * k + 1) *\n      (GenFact(2 * m, k) / GenFact(2 * m + k + 1, k + 1)) *\n      GramPoly(i, m, k, 0) *\n      GramPoly(t, m, k, s);\n  }\n  return sum;\n}\n\n/**\n *\n * @param m  Number of points\n * @param n  Polynomial grade\n * @param s  Derivative\n */\nfunction fullWeights(m, n, s) {\n  let weights = new Array(m);\n  let np = Math.floor(m / 2);\n  for (let t = -np; t <= np; t++) {\n    weights[t + np] = new Array(m);\n    for (let j = -np; j <= np; j++) {\n      weights[t + np][j + np] = Weight(j, t, np, n, s);\n    }\n  }\n  return weights;\n}\n\n/*function entropy(data,h,options){\n    var trend = SavitzkyGolay(data,h,trendOptions);\n    var copy = new Array(data.length);\n    var sum = 0;\n    var max = 0;\n    for(var i=0;i<data.length;i++){\n        copy[i] = data[i]-trend[i];\n    }\n\n    sum/=data.length;\n    console.log(sum+\" \"+max);\n    console.log(stat.array.standardDeviation(copy));\n    console.log(Math.abs(stat.array.mean(copy))/stat.array.standardDeviation(copy));\n    return sum;\n\n}\n\n\n\nfunction guessWindowSize(data, h){\n    console.log(\"entropy \"+entropy(data,h,trendOptions));\n    return 5;\n}\n*/\n","import SG from 'ml-savitzky-golay-generalized';\n\n/**\n * Global spectra deconvolution\n * @param {Array<number>} x - Independent variable\n * @param {Array<number>} yIn - Dependent variable\n * @param {object} [options] - Options object\n * @param {object} [options.sgOptions] - Options object for Savitzky-Golay filter. See https://github.com/mljs/savitzky-golay-generalized#options\n * @param {number} [options.sgOptions.windowSize = 9] - points to use in the approximations\n * @param {number} [options.sgOptions.polynomial = 3] - degree of the polynomial to use in the approximations\n * @param {number} [options.minMaxRatio = 0.00025] - Threshold to determine if a given peak should be considered as a noise\n * @param {number} [options.broadRatio = 0.00] - If `broadRatio` is higher than 0, then all the peaks which second derivative\n * smaller than `broadRatio * maxAbsSecondDerivative` will be marked with the soft mask equal to true.\n * @param {number} [options.noiseLevel = 0] - Noise threshold in spectrum units\n * @param {boolean} [options.maxCriteria = true] - Peaks are local maximum(true) or minimum(false)\n * @param {boolean} [options.smoothY = true] - Select the peak intensities from a smoothed version of the independent variables\n * @param {boolean} [options.realTopDetection = false] - Use a quadratic optimizations with the peak and its 3 closest neighbors\n * to determine the true x,y values of the peak?\n * @param {number} [options.heightFactor = 0] - Factor to multiply the calculated height (usually 2)\n * @param {number} [options.derivativeThreshold = -1] - Filters based on the amplitude of the first derivative\n * @return {Array<object>}\n */\nexport function gsd(x, yIn, options = {}) {\n  let {\n    noiseLevel,\n    sgOptions = {\n      windowSize: 9,\n      polynomial: 3,\n    },\n    smoothY = true,\n    heightFactor = 0,\n    broadRatio = 0.0,\n    maxCriteria = true,\n    minMaxRatio = 0.00025,\n    derivativeThreshold = -1,\n    realTopDetection = false,\n  } = options;\n\n  const y = yIn.slice();\n  let equalSpaced = isEqualSpaced(x);\n\n  if (noiseLevel === undefined) {\n    noiseLevel = equalSpaced ? getNoiseLevel(y) : 0;\n  }\n\n  const yCorrection = { m: 1, b: noiseLevel };\n\n  if (!maxCriteria) {\n    yCorrection.m = -1;\n    yCorrection.b *= -1;\n  }\n\n  for (let i = 0; i < y.length; i++) {\n    y[i] = yCorrection.m * y[i] - yCorrection.b;\n  }\n\n  for (let i = 0; i < y.length; i++) {\n    if (y[i] < 0) {\n      y[i] = 0;\n    }\n  }\n  // If the max difference between delta x is less than 5%, then,\n  // we can assume it to be equally spaced variable\n  let yData = y;\n  let dY, ddY;\n  const { windowSize, polynomial } = sgOptions;\n\n  if (equalSpaced) {\n    if (smoothY) {\n      yData = SG(y, x[1] - x[0], {\n        windowSize,\n        polynomial,\n        derivative: 0,\n      });\n    }\n    dY = SG(y, x[1] - x[0], {\n      windowSize,\n      polynomial,\n      derivative: 1,\n    });\n    ddY = SG(y, x[1] - x[0], {\n      windowSize,\n      polynomial,\n      derivative: 2,\n    });\n  } else {\n    if (smoothY) {\n      yData = SG(y, x, {\n        windowSize,\n        polynomial,\n        derivative: 0,\n      });\n    }\n    dY = SG(y, x, {\n      windowSize,\n      polynomial,\n      derivative: 1,\n    });\n    ddY = SG(y, x, {\n      windowSize,\n      polynomial,\n      derivative: 2,\n    });\n  }\n\n  const xData = x;\n  const dX = x[1] - x[0];\n  let maxDdy = 0;\n  let maxY = 0;\n  for (let i = 0; i < yData.length; i++) {\n    if (Math.abs(ddY[i]) > maxDdy) {\n      maxDdy = Math.abs(ddY[i]);\n    }\n    if (Math.abs(yData[i]) > maxY) {\n      maxY = Math.abs(yData[i]);\n    }\n  }\n\n  let lastMax = null;\n  let lastMin = null;\n  let minddY = new Array(yData.length - 2);\n  let intervalL = new Array(yData.length);\n  let intervalR = new Array(yData.length);\n  let broadMask = new Array(yData.length - 2);\n  let minddYLen = 0;\n  let intervalLLen = 0;\n  let intervalRLen = 0;\n  let broadMaskLen = 0;\n  // By the intermediate value theorem We cannot find 2 consecutive maximum or minimum\n  for (let i = 1; i < yData.length - 1; ++i) {\n    // filter based on derivativeThreshold\n    // console.log('pasa', y[i], dY[i], ddY[i]);\n    if (Math.abs(dY[i]) > derivativeThreshold) {\n      // Minimum in first derivative\n      if (\n        (dY[i] < dY[i - 1] && dY[i] <= dY[i + 1]) ||\n        (dY[i] <= dY[i - 1] && dY[i] < dY[i + 1])\n      ) {\n        lastMin = {\n          x: xData[i],\n          index: i,\n        };\n        if (dX > 0 && lastMax !== null) {\n          intervalL[intervalLLen++] = lastMax;\n          intervalR[intervalRLen++] = lastMin;\n        }\n      }\n\n      // Maximum in first derivative\n      if (\n        (dY[i] >= dY[i - 1] && dY[i] > dY[i + 1]) ||\n        (dY[i] > dY[i - 1] && dY[i] >= dY[i + 1])\n      ) {\n        lastMax = {\n          x: xData[i],\n          index: i,\n        };\n        if (dX < 0 && lastMin !== null) {\n          intervalL[intervalLLen++] = lastMax;\n          intervalR[intervalRLen++] = lastMin;\n        }\n      }\n    }\n\n    // Minimum in second derivative\n    if (ddY[i] < ddY[i - 1] && ddY[i] < ddY[i + 1]) {\n      // TODO should we change this to have 3 arrays ? Huge overhead creating arrays\n      minddY[minddYLen++] = i; // ( [xData[i], yData[i], i] );\n      broadMask[broadMaskLen++] = Math.abs(ddY[i]) <= broadRatio * maxDdy;\n    }\n  }\n  minddY.length = minddYLen;\n  intervalL.length = intervalLLen;\n  intervalR.length = intervalRLen;\n  broadMask.length = broadMaskLen;\n\n  let signals = new Array(minddY.length);\n  let signalsLen = 0;\n  let lastK = -1;\n  let possible, frequency, distanceJ, minDistance, gettingCloser;\n  for (let j = 0; j < minddY.length; ++j) {\n    frequency = xData[minddY[j]];\n    possible = -1;\n    let k = lastK + 1;\n    minDistance = Number.MAX_VALUE;\n    distanceJ = 0;\n    gettingCloser = true;\n    while (possible === -1 && k < intervalL.length && gettingCloser) {\n      distanceJ = Math.abs(frequency - (intervalL[k].x + intervalR[k].x) / 2);\n\n      // Still getting closer?\n      if (distanceJ < minDistance) {\n        minDistance = distanceJ;\n      } else {\n        gettingCloser = false;\n      }\n      if (distanceJ < Math.abs(intervalL[k].x - intervalR[k].x) / 2) {\n        possible = k;\n        lastK = k;\n      }\n      ++k;\n    }\n\n    if (possible !== -1) {\n      if (Math.abs(yData[minddY[j]]) > minMaxRatio * maxY) {\n        signals[signalsLen++] = {\n          index: minddY[j],\n          x: frequency,\n          y: (yData[minddY[j]] + yCorrection.b) / yCorrection.m,\n          width: Math.abs(intervalR[possible].x - intervalL[possible].x), // widthCorrection\n          soft: broadMask[j],\n        };\n\n        signals[signalsLen - 1].left = intervalL[possible];\n        signals[signalsLen - 1].right = intervalR[possible];\n\n        if (heightFactor) {\n          let yLeft = yData[intervalL[possible].index];\n          let yRight = yData[intervalR[possible].index];\n          signals[signalsLen - 1].height =\n            heightFactor * (signals[signalsLen - 1].y - (yLeft + yRight) / 2);\n        }\n      }\n    }\n  }\n  signals.length = signalsLen;\n\n  if (realTopDetection) {\n    determineRealTop(signals, xData, yData);\n  }\n\n  // Correct the values to fit the original spectra data\n  for (let j = 0; j < signals.length; j++) {\n    signals[j].base = noiseLevel;\n  }\n\n  signals.sort(function (a, b) {\n    return a.x - b.x;\n  });\n\n  return signals;\n}\n\nconst isEqualSpaced = (x) => {\n  let tmp;\n  let maxDx = 0;\n  let minDx = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < x.length - 1; ++i) {\n    tmp = Math.abs(x[i + 1] - x[i]);\n    if (tmp < minDx) {\n      minDx = tmp;\n    }\n    if (tmp > maxDx) {\n      maxDx = tmp;\n    }\n  }\n  return (maxDx - minDx) / maxDx < 0.05;\n};\n\nconst getNoiseLevel = (y) => {\n  let mean = 0;\n\n  let stddev = 0;\n  let length = y.length;\n  for (let i = 0; i < length; ++i) {\n    mean += y[i];\n  }\n  mean /= length;\n  let averageDeviations = new Array(length);\n  for (let i = 0; i < length; ++i) {\n    averageDeviations[i] = Math.abs(y[i] - mean);\n  }\n  averageDeviations.sort((a, b) => a - b);\n  if (length % 2 === 1) {\n    stddev = averageDeviations[(length - 1) / 2] / 0.6745;\n  } else {\n    stddev =\n      (0.5 *\n        (averageDeviations[length / 2] + averageDeviations[length / 2 - 1])) /\n      0.6745;\n  }\n\n  return stddev;\n};\n\nconst determineRealTop = (peakList, x, y) => {\n  let alpha, beta, gamma, p, currentPoint;\n  for (let j = 0; j < peakList.length; j++) {\n    currentPoint = peakList[j].index; // peakList[j][2];\n    // The detected peak could be moved 1 or 2 units to left or right.\n    if (\n      y[currentPoint - 1] >= y[currentPoint - 2] &&\n      y[currentPoint - 1] >= y[currentPoint]\n    ) {\n      currentPoint--;\n    } else {\n      if (\n        y[currentPoint + 1] >= y[currentPoint] &&\n        y[currentPoint + 1] >= y[currentPoint + 2]\n      ) {\n        currentPoint++;\n      } else {\n        if (\n          y[currentPoint - 2] >= y[currentPoint - 3] &&\n          y[currentPoint - 2] >= y[currentPoint - 1]\n        ) {\n          currentPoint -= 2;\n        } else {\n          if (\n            y[currentPoint + 2] >= y[currentPoint + 1] &&\n            y[currentPoint + 2] >= y[currentPoint + 3]\n          ) {\n            currentPoint += 2;\n          }\n        }\n      }\n    }\n    // interpolation to a sin() function\n    if (\n      y[currentPoint - 1] > 0 &&\n      y[currentPoint + 1] > 0 &&\n      y[currentPoint] >= y[currentPoint - 1] &&\n      y[currentPoint] >= y[currentPoint + 1] &&\n      (y[currentPoint] !== y[currentPoint - 1] ||\n        y[currentPoint] !== y[currentPoint + 1])\n    ) {\n      alpha = 20 * Math.log10(y[currentPoint - 1]);\n      beta = 20 * Math.log10(y[currentPoint]);\n      gamma = 20 * Math.log10(y[currentPoint + 1]);\n      p = (0.5 * (alpha - gamma)) / (alpha - 2 * beta + gamma);\n      // console.log(alpha, beta, gamma, `p: ${p}`);\n      // console.log(x[currentPoint]+\" \"+tmp+\" \"+currentPoint);\n      peakList[j].x =\n        x[currentPoint] + (x[currentPoint] - x[currentPoint - 1]) * p;\n      peakList[j].y =\n        y[currentPoint] -\n        0.25 * (y[currentPoint - 1] - y[currentPoint + 1]) * p;\n    }\n  }\n};\n","/**\n * This function calculates the spectrum as a sum of gaussian functions. The Gaussian\n * parameters are divided in 3 batches. 1st: centers; 2nd: height; 3th: std's;\n * @param t Ordinate values\n * @param p Gaussian parameters\n * @param c Constant parameters(Not used)\n * @returns {*}\n */\nexport function sumOfGaussians(p) {\n  return function (t) {\n    let nL = p.length / 3;\n    let factor;\n    let rows = t.length;\n    let result = rows === undefined ? 0 : new Float64Array(rows).fill(0);\n    for (let i = 0; i < nL; i++) {\n      factor = Math.pow(p[i + nL * 2], 2) * 2;\n      if (rows === undefined) {\n        result += p[i + nL] * Math.exp(-Math.pow(t - p[i], 2) / factor);\n      } else {\n        for (let j = 0; j < rows; j++) {\n          result[j] += p[i + nL] * Math.exp(-Math.pow(t[j] - p[i], 2) / factor);\n        }\n      }\n    }\n    return result;\n  };\n}\n","import LM from 'ml-levenberg-marquardt';\n\nimport { sumOfGaussians } from './sumOfGaussians';\n\n/**\n *\n * @param xy A two column matrix containing the x and y data to be fitted\n * @param group A set of initial lorentzian parameters to be optimized [center, heigth, half_width_at_half_height]\n * @returns {Array} A set of final lorentzian parameters [center, heigth, hwhh*2]\n */\nexport function optimizeGaussianSum(xy, group, opts = {}) {\n  let t = xy[0];\n  let yData = xy[1];\n  let maxY = Math.max(...yData);\n  yData.forEach((x, i, arr) => (arr[i] /= maxY));\n  let nL = group.length;\n  let pInit = new Float64Array(nL * 3);\n  let pMin = new Float64Array(nL * 3);\n  let pMax = new Float64Array(nL * 3);\n  let dt = Math.abs(t[0] - t[1]);\n\n  for (let i = 0; i < nL; i++) {\n    pInit[i] = group[i].x;\n    pInit[i + nL] = group[i].y / maxY;\n    pInit[i + 2 * nL] = group[i].width;\n\n    pMin[i] = group[i].x - dt;\n    pMin[i + nL] = 0;\n    pMin[i + 2 * nL] = group[i].width / 4;\n\n    pMax[i] = group[i].x + dt;\n    pMax[i + nL] = (group[i].y * 1.2) / maxY;\n    pMax[i + 2 * nL] = group[i].width * 4;\n  }\n\n  let data = {\n    x: t,\n    y: yData,\n  };\n  let result = new Array(nL);\n\n  let lmOptions = {\n    damping: 1.5,\n    initialValues: pInit,\n    minValues: pMin,\n    maxValues: pMax,\n    gradientDifference: dt / 10000,\n    maxIterations: 100,\n    errorTolerance: 10e-5,\n  };\n\n  opts = Object.assign({}, lmOptions, opts);\n\n  let pFit = LM(data, sumOfGaussians, opts);\n  for (let i = 0; i < nL; i++) {\n    result[i] = {\n      parameters: [\n        pFit.parameterValues[i],\n        pFit.parameterValues[i + nL] * maxY,\n        pFit.parameterValues[i + nL * 2],\n      ],\n      error: pFit.parameterError,\n    };\n  }\n  return result;\n}\n","/**\n * Single 3 parameter gaussian function\n * @param t Ordinate values\n * @param p Gaussian parameters [mean, height, std]\n * @param c Constant parameters(Not used)\n * @returns {*}\n */\n\nexport function singleGaussian(p) {\n  return function (t) {\n    let factor2 = (p[2] * p[2]) / 2;\n    let rows = t.length;\n    if (!rows) return p[1] * Math.exp((-(t - p[0]) * (t - p[0])) / factor2);\n    let result = new Float64Array(t.length);\n    for (let i = 0; i < t.length; i++) {\n      result[i] = p[1] * Math.exp((-(t[i] - p[0]) * (t[i] - p[0])) / factor2);\n    }\n    return result;\n  };\n}\n","import LM from 'ml-levenberg-marquardt';\n\nimport { singleGaussian } from './singleGaussian';\n\n/**\n * Fits a set of points to a gaussian bell. Returns the mean of the peak, the std and the height of the signal.\n * @param data,[y]\n * @returns {*[]}\n */\nexport function optimizeSingleGaussian(xy, peak, opts = {}) {\n  let t = xy[0];\n  let yData = xy[1];\n  let maxY = Math.max(...yData);\n  yData.forEach((x, i, arr) => (arr[i] /= maxY));\n  let dt = Math.abs(t[0] - t[1]);\n  let pInit = new Float64Array([peak.x, 1, peak.width]);\n  let pMin = new Float64Array([peak.x - dt, 0, peak.width / 4]);\n  let pMax = new Float64Array([peak.x + dt, 1.25, peak.width * 4]);\n\n  let data = {\n    x: t,\n    y: yData,\n  };\n\n  let lmOptions = {\n    damping: 1.5,\n    initialValues: pInit,\n    minValues: pMin,\n    maxValues: pMax,\n    gradientDifference: dt / 10000,\n    maxIterations: 100,\n    errorTolerance: 10e-5,\n  };\n\n  opts = Object.assign({}, lmOptions, opts);\n  let pFit = LM(data, singleGaussian, opts);\n  return {\n    parameters: [\n      pFit.parameterValues[0],\n      pFit.parameterValues[1] * maxY,\n      pFit.parameterValues[2],\n    ],\n    error: pFit.parameterError,\n  };\n}\n","/**\n * This function calculates the spectrum as a sum of lorentzian functions. The Lorentzian\n * parameters are divided in 3 batches. 1st: centers; 2nd: heights; 3th: widths;\n * @param t Ordinate values\n * @param p Lorentzian parameters\n * @returns {*}\n */\n\nexport function sumOfLorentzians(p) {\n  return function (t) {\n    let nL = p.length / 3;\n    let factor;\n    let p2;\n    let rows = t.length;\n    let result = rows === undefined ? 0 : new Float64Array(rows).fill(0);\n    for (let i = 0; i < nL; i++) {\n      p2 = Math.pow(p[i + nL * 2] / 2, 2);\n      factor = p[i + nL] * p2;\n      if (rows === undefined) {\n        result += factor / (Math.pow(t - p[i], 2) + p2);\n      } else {\n        for (let j = 0; j < rows; j++) {\n          result[j] += factor / (Math.pow(t[j] - p[i], 2) + p2);\n        }\n      }\n    }\n    return result;\n  };\n}\n","import LM from 'ml-levenberg-marquardt';\n\nimport { sumOfLorentzians } from './sumOfLorentzians';\n\n/**\n *\n * @param xy A two column matrix containing the x and y data to be fitted\n * @param group A set of initial lorentzian parameters to be optimized [center, heigth, half_width_at_half_height]\n * @returns {Array} A set of final lorentzian parameters [center, heigth, hwhh*2]\n */\nexport function optimizeLorentzianSum(xy, group, opts = {}) {\n  let t = xy[0];\n  let yData = xy[1];\n  let maxY = Math.max(...yData);\n  yData.forEach((x, i, arr) => (arr[i] /= maxY));\n\n  let nL = group.length;\n  let pInit = new Float64Array(nL * 3);\n  let pMin = new Float64Array(nL * 3);\n  let pMax = new Float64Array(nL * 3);\n  let dt = Math.abs(t[0] - t[1]);\n\n  for (let i = 0; i < nL; i++) {\n    pInit[i] = group[i].x;\n    pInit[i + nL] = 1;\n    pInit[i + 2 * nL] = group[i].width;\n\n    pMin[i] = group[i].x - dt;\n    pMin[i + nL] = 0;\n    pMin[i + 2 * nL] = group[i].width / 4;\n\n    pMax[i] = group[i].x + dt;\n    pMax[i + nL] = 1.5;\n    pMax[i + 2 * nL] = group[i].width * 4;\n  }\n\n  let data = {\n    x: t,\n    y: yData,\n  };\n\n  let result = new Array(nL);\n\n  let lmOptions = {\n    damping: 1.5,\n    initialValues: pInit,\n    minValues: pMin,\n    maxValues: pMax,\n    gradientDifference: dt / 10000,\n    maxIterations: 100,\n    errorTolerance: 10e-5,\n  };\n\n  opts = Object.assign({}, lmOptions, opts);\n\n  let pFit = LM(data, sumOfLorentzians, opts);\n  for (let i = 0; i < nL; i++) {\n    result[i] = {\n      parameters: [\n        pFit.parameterValues[i],\n        pFit.parameterValues[i + nL] * maxY,\n        pFit.parameterValues[i + nL * 2],\n      ],\n      error: pFit.parameterError,\n    };\n  }\n  return result;\n}\n","/**\n * Single 4 parameter lorentzian function\n * @param t Ordinate values\n * @param p Lorentzian parameters\n * @param c Constant parameters(Not used)\n * @returns {*}\n */\n\nexport function singleLorentzian(p) {\n  return function (t) {\n    let factor = p[1] * Math.pow(p[2] / 2, 2);\n    let rows = t.length;\n    if (!rows) return factor / (Math.pow(t - p[0], 2) + Math.pow(p[2] / 2, 2));\n    let result = new Float64Array(rows);\n    for (let i = 0; i < rows; i++) {\n      result[i] = factor / (Math.pow(t[i] - p[0], 2) + Math.pow(p[2] / 2, 2));\n    }\n    return result;\n  };\n}\n","import LM from 'ml-levenberg-marquardt';\n\nimport { singleLorentzian } from './singleLorentzian';\n\n/**\n * * Fits a set of points to a Lorentzian function. Returns the center of the peak, the width at half height, and the height of the signal.\n * @param data,[y]\n * @returns {*[]}\n */\nexport function optimizeSingleLorentzian(xy, peak, opts = {}) {\n  let t = xy[0];\n  let yData = xy[1];\n  let maxY = Math.max(...yData);\n  yData.forEach((x, i, arr) => (arr[i] /= maxY));\n  let dt = Math.abs(t[0] - t[1]);\n  let pInit = new Float64Array([peak.x, 1, peak.width]);\n  let pMin = new Float64Array([peak.x - dt, 0.75, peak.width / 4]);\n  let pMax = new Float64Array([peak.x + dt, 1.25, peak.width * 4]);\n\n  let data = {\n    x: t,\n    y: yData,\n  };\n\n  let lmOptions = {\n    damping: 1.5,\n    initialValues: pInit,\n    minValues: pMin,\n    maxValues: pMax,\n    gradientDifference: dt / 10000,\n    maxIterations: 100,\n    errorTolerance: 10e-5,\n  };\n  opts = Object.assign({}, lmOptions, opts);\n  let pFit = LM(data, singleLorentzian, opts);\n  return {\n    parameters: [\n      pFit.parameterValues[0],\n      pFit.parameterValues[1] * maxY,\n      pFit.parameterValues[2],\n    ],\n    error: pFit.parameterError,\n  };\n}\n","import {\n  optimizeGaussianSum,\n  optimizeLorentzianSum,\n  optimizeSingleGaussian,\n  optimizeSingleLorentzian,\n} from 'ml-optimize-lorentzian';\n\nexport function optimizePeaks(peakList, x, y, options = {}) {\n  const {\n    functionName = 'gaussian',\n    factorWidth = 4,\n    optimizationOptions = {\n      damping: 1.5,\n      maxIterations: 100,\n      errorTolerance: 10e-5,\n    },\n  } = options;\n\n  let lastIndex = [0];\n  let groups = groupPeaks(peakList, factorWidth);\n  let result = [];\n  let factor = 1;\n  if (functionName === 'gaussian') {\n    factor = 1.17741;\n  } // From https://en.wikipedia.org/wiki/Gaussian_function#Properties\n  let sampling;\n  for (let i = 0; i < groups.length; i++) {\n    let peaks = groups[i].group;\n    if (peaks.length > 1) {\n      // Multiple peaks\n      sampling = sampleFunction(\n        groups[i].limits[0] - groups[i].limits[1],\n        groups[i].limits[0] + groups[i].limits[1],\n        x,\n        y,\n        lastIndex,\n      );\n      if (sampling[0].length > 5) {\n        let optPeaks = [];\n        if (functionName === 'gaussian') {\n          optPeaks = optimizeGaussianSum(sampling, peaks, optimizationOptions);\n        } else {\n          if (functionName === 'lorentzian') {\n            optPeaks = optimizeLorentzianSum(\n              sampling,\n              peaks,\n              optimizationOptions,\n            );\n          }\n        }\n\n        for (let j = 0; j < optPeaks.length; j++) {\n          let { parameters } = optPeaks[j];\n          result.push({\n            x: parameters[0],\n            y: parameters[1],\n            width: parameters[2] * factor,\n            index: peaks[j].index,\n          });\n        }\n      }\n    } else {\n      // Single peak\n      peaks = peaks[0];\n      sampling = sampleFunction(\n        peaks.x - factorWidth * peaks.width,\n        peaks.x + factorWidth * peaks.width,\n        x,\n        y,\n        lastIndex,\n      );\n\n      if (sampling[0].length > 5) {\n        let fitResult = [];\n        if (functionName === 'gaussian') {\n          fitResult = optimizeSingleGaussian(\n            [sampling[0], sampling[1]],\n            peaks,\n            optimizationOptions,\n          );\n        } else {\n          if (functionName === 'lorentzian') {\n            fitResult = optimizeSingleLorentzian(\n              [sampling[0], sampling[1]],\n              peaks,\n              optimizationOptions,\n            );\n          }\n        }\n\n        let { parameters } = fitResult;\n        result.push({\n          x: parameters[0],\n          y: parameters[1],\n          width: parameters[2] * factor,\n          index: peaks.index,\n        }); // From https://en.wikipedia.org/wiki/Gaussian_function#Properties}\n      }\n    }\n  }\n  return result;\n}\n\nfunction sampleFunction(from, to, x, y, lastIndex) {\n  let nbPoints = x.length;\n  let sampleX = [];\n  let sampleY = [];\n  let direction = Math.sign(x[1] - x[0]); // Direction of the derivative\n  if (direction === -1) {\n    lastIndex[0] = x.length - 1;\n  }\n\n  let delta = Math.abs(to - from) / 2;\n  let mid = (from + to) / 2;\n  let stop = false;\n  let index = lastIndex[0];\n  while (!stop && index < nbPoints && index >= 0) {\n    if (Math.abs(x[index] - mid) <= delta) {\n      sampleX.push(x[index]);\n      sampleY.push(y[index]);\n      index += direction;\n    } else {\n      // It is outside the range.\n      if (Math.sign(mid - x[index]) === 1) {\n        // We'll reach the mid going in the current direction\n        index += direction;\n      } else {\n        // There is not more peaks in the current range\n        stop = true;\n      }\n    }\n  }\n  lastIndex[0] = index;\n  return [sampleX, sampleY];\n}\n\nfunction groupPeaks(peakList, nL) {\n  let group = [];\n  let groups = [];\n  let limits = [peakList[0].x, nL * peakList[0].width];\n  let upperLimit, lowerLimit;\n  // Merge forward\n  for (let i = 0; i < peakList.length; i++) {\n    // If the 2 things overlaps\n    if (\n      Math.abs(peakList[i].x - limits[0]) <\n      nL * peakList[i].width + limits[1]\n    ) {\n      // Add the peak to the group\n      group.push(peakList[i]);\n      // Update the group limits\n      upperLimit = limits[0] + limits[1];\n      if (peakList[i].x + nL * peakList[i].width > upperLimit) {\n        upperLimit = peakList[i].x + nL * peakList[i].width;\n      }\n      lowerLimit = limits[0] - limits[1];\n      if (peakList[i].x - nL * peakList[i].width < lowerLimit) {\n        lowerLimit = peakList[i].x - nL * peakList[i].width;\n      }\n      limits = [\n        (upperLimit + lowerLimit) / 2,\n        Math.abs(upperLimit - lowerLimit) / 2,\n      ];\n    } else {\n      groups.push({ limits: limits, group: group });\n      // var optmimalPeak = fitSpectrum(group,limits,spectrum);\n      group = [peakList[i]];\n      limits = [peakList[i].x, nL * peakList[i].width];\n    }\n  }\n  groups.push({ limits: limits, group: group });\n  // Merge backward\n  for (let i = groups.length - 2; i >= 0; i--) {\n    // The groups overlaps\n    if (\n      Math.abs(groups[i].limits[0] - groups[i + 1].limits[0]) <\n      (groups[i].limits[1] + groups[i + 1].limits[1]) / 2\n    ) {\n      for (let j = 0; j < groups[i + 1].group.length; j++) {\n        groups[i].group.push(groups[i + 1].group[j]);\n      }\n      upperLimit = groups[i].limits[0] + groups[i].limits[1];\n      if (groups[i + 1].limits[0] + groups[i + 1].limits[1] > upperLimit) {\n        upperLimit = groups[i + 1].limits[0] + groups[i + 1].limits[1];\n      }\n      lowerLimit = groups[i].limits[0] - groups[i].limits[1];\n      if (groups[i + 1].limits[0] - groups[i + 1].limits[1] < lowerLimit) {\n        lowerLimit = groups[i + 1].limits[0] - groups[i + 1].limits[1];\n      }\n\n      groups[i].limits = [\n        (upperLimit + lowerLimit) / 2,\n        Math.abs(upperLimit - lowerLimit) / 2,\n      ];\n\n      groups.splice(i + 1, 1);\n    }\n  }\n  return groups;\n}\n","import { optimizeSingleLorentzian } from 'ml-optimize-lorentzian';\n\n/**\n * This function try to join the peaks that seems to belong to a broad signal in a single broad peak.\n * @param peakList\n * @param options\n */\nexport function joinBroadPeaks(peakList, options = {}) {\n  let width = options.width;\n  let broadLines = [];\n  // Optimize the possible broad lines\n  let max = 0;\n\n  let maxI = 0;\n\n  let count = 1;\n  for (let i = peakList.length - 1; i >= 0; i--) {\n    if (peakList[i].soft) {\n      broadLines.push(peakList.splice(i, 1)[0]);\n    }\n  }\n  // Push a feke peak\n  broadLines.push({ x: Number.MAX_VALUE });\n\n  let candidates = [[broadLines[0].x, broadLines[0].y]];\n  let indexes = [broadLines[0].index];\n\n  for (let i = 1; i < broadLines.length; i++) {\n    // console.log(broadLines[i-1].x+\" \"+broadLines[i].x);\n    if (Math.abs(broadLines[i - 1].x - broadLines[i].x) < width) {\n      candidates.push([broadLines[i].x, broadLines[i].y]);\n      if (broadLines[i].y > max) {\n        max = broadLines[i].y;\n        maxI = i;\n      }\n      indexes.push(broadLines[i].index);\n      count++;\n    } else {\n      if (count > 2) {\n        let fitted = optimizeSingleLorentzian(candidates, {\n          x: broadLines[maxI].x,\n          y: max,\n          width: Math.abs(\n            candidates[0][0] - candidates[candidates.length - 1][0],\n          ),\n        });\n        let { parameters } = fitted;\n        peakList.push({\n          x: parameters[0],\n          y: parameters[1],\n          width: parameters[2],\n          index: Math.floor(\n            indexes.reduce((a, b) => a + b, 0) / indexes.length,\n          ),\n          soft: false,\n        });\n      } else {\n        // Put back the candidates to the signals list\n        indexes.forEach((index) => {\n          peakList.push(broadLines[index]);\n        });\n      }\n      candidates = [[broadLines[i].x, broadLines[i].y]];\n      indexes = [i];\n      max = broadLines[i].y;\n      maxI = i;\n      count = 1;\n    }\n  }\n\n  peakList.sort(function (a, b) {\n    return a.x - b.x;\n  });\n\n  return peakList;\n}\n","/**\n * This method will allow to enlarge peaks and prevent overlap between peaks\n * Because peaks may not be symmetric after we add 2 properties, from and to.\n * @param {Array} peakList\n * @param {object} [options={}]\n * @param {number} [factor=2]\n * @param {boolean} [overlap=false] by default we don't allow overlap\n * @return {Array} peakList\n */\nexport function broadenPeaks(peakList, options = {}) {\n  const { factor = 2, overlap = false } = options;\n\n  for (let peak of peakList) {\n    if (!peak.right || !peak.left) {\n      peak.from = peak.x - (peak.width / 2) * factor;\n      peak.to = peak.x + (peak.width / 2) * factor;\n    } else {\n      peak.from = peak.x - (peak.x - peak.left.x) * factor;\n      peak.to = peak.x + (peak.right.x - peak.x) * factor;\n    }\n  }\n\n  if (!overlap) {\n    for (let i = 0; i < peakList.length - 1; i++) {\n      let peak = peakList[i];\n      let nextPeak = peakList[i + 1];\n      if (peak.to > nextPeak.from) {\n        peak.to = nextPeak.from = (peak.to + nextPeak.from) / 2;\n      }\n    }\n  }\n\n  for (let peak of peakList) {\n    peak.width = peak.to - peak.from;\n  }\n\n  return peakList;\n}\n","const toString = Object.prototype.toString;\n\nexport default function isAnyArray(object) {\n  return toString.call(object).endsWith('Array]');\n}\n","import isArray from 'is-any-array';\n\nfunction min(input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!isArray(input)) {\n    throw new TypeError('input must be an array');\n  }\n\n  if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  var _options$fromIndex = options.fromIndex,\n      fromIndex = _options$fromIndex === void 0 ? 0 : _options$fromIndex,\n      _options$toIndex = options.toIndex,\n      toIndex = _options$toIndex === void 0 ? input.length : _options$toIndex;\n\n  if (fromIndex < 0 || fromIndex >= input.length || !Number.isInteger(fromIndex)) {\n    throw new Error('fromIndex must be a positive integer smaller than length');\n  }\n\n  if (toIndex <= fromIndex || toIndex > input.length || !Number.isInteger(toIndex)) {\n    throw new Error('toIndex must be an integer greater than fromIndex and at most equal to length');\n  }\n\n  var minValue = input[fromIndex];\n\n  for (var i = fromIndex + 1; i < toIndex; i++) {\n    if (input[i] < minValue) minValue = input[i];\n  }\n\n  return minValue;\n}\n\nexport default min;\n","import isArray from 'is-any-array';\n\nfunction max(input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!isArray(input)) {\n    throw new TypeError('input must be an array');\n  }\n\n  if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  var _options$fromIndex = options.fromIndex,\n      fromIndex = _options$fromIndex === void 0 ? 0 : _options$fromIndex,\n      _options$toIndex = options.toIndex,\n      toIndex = _options$toIndex === void 0 ? input.length : _options$toIndex;\n\n  if (fromIndex < 0 || fromIndex >= input.length || !Number.isInteger(fromIndex)) {\n    throw new Error('fromIndex must be a positive integer smaller than length');\n  }\n\n  if (toIndex <= fromIndex || toIndex > input.length || !Number.isInteger(toIndex)) {\n    throw new Error('toIndex must be an integer greater than fromIndex and at most equal to length');\n  }\n\n  var maxValue = input[fromIndex];\n\n  for (var i = fromIndex + 1; i < toIndex; i++) {\n    if (input[i] > maxValue) maxValue = input[i];\n  }\n\n  return maxValue;\n}\n\nexport default max;\n","import isArray from 'is-any-array';\n\nfunction mode(input) {\n  if (!isArray(input)) {\n    throw new TypeError('input must be an array');\n  }\n\n  if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  var maxValue = 0;\n  var maxCount = 0;\n  var count = 0;\n  var counts = {};\n\n  for (var i = 0; i < input.length; ++i) {\n    var element = input[i];\n    count = counts[element];\n\n    if (count) {\n      counts[element]++;\n      count++;\n    } else {\n      counts[element] = count = 1;\n    }\n\n    if (count > maxCount) {\n      maxCount = count;\n      maxValue = input[i];\n    }\n  }\n\n  return maxValue;\n}\n\nexport default mode;\n","const toString = Object.prototype.toString;\n\nexport default function isAnyArray(object) {\n  return toString.call(object).endsWith('Array]');\n}\n","import isArray from 'is-any-array';\n\nfunction max(input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!isArray(input)) {\n    throw new TypeError('input must be an array');\n  }\n\n  if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  var _options$fromIndex = options.fromIndex,\n      fromIndex = _options$fromIndex === void 0 ? 0 : _options$fromIndex,\n      _options$toIndex = options.toIndex,\n      toIndex = _options$toIndex === void 0 ? input.length : _options$toIndex;\n\n  if (fromIndex < 0 || fromIndex >= input.length || !Number.isInteger(fromIndex)) {\n    throw new Error('fromIndex must be a positive integer smaller than length');\n  }\n\n  if (toIndex <= fromIndex || toIndex > input.length || !Number.isInteger(toIndex)) {\n    throw new Error('toIndex must be an integer greater than fromIndex and at most equal to length');\n  }\n\n  var maxValue = input[fromIndex];\n\n  for (var i = fromIndex + 1; i < toIndex; i++) {\n    if (input[i] > maxValue) maxValue = input[i];\n  }\n\n  return maxValue;\n}\n\nexport default max;\n","import isArray from 'is-any-array';\nimport max from 'ml-array-max';\nimport sum from 'ml-array-sum';\n\nfunction norm(input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _options$algorithm = options.algorithm,\n      algorithm = _options$algorithm === void 0 ? 'absolute' : _options$algorithm,\n      _options$sumValue = options.sumValue,\n      sumValue = _options$sumValue === void 0 ? 1 : _options$sumValue,\n      _options$maxValue = options.maxValue,\n      maxValue = _options$maxValue === void 0 ? 1 : _options$maxValue;\n\n  if (!isArray(input)) {\n    throw new Error('input must be an array');\n  }\n\n  var output;\n\n  if (options.output !== undefined) {\n    if (!isArray(options.output)) {\n      throw new TypeError('output option must be an array if specified');\n    }\n\n    output = options.output;\n  } else {\n    output = new Array(input.length);\n  }\n\n  if (input.length === 0) {\n    throw new Error('input must not be empty');\n  }\n\n  switch (algorithm.toLowerCase()) {\n    case 'absolute':\n      {\n        var absoluteSumValue = absoluteSum(input) / sumValue;\n        if (absoluteSumValue === 0) return input.slice(0);\n\n        for (var i = 0; i < input.length; i++) {\n          output[i] = input[i] / absoluteSumValue;\n        }\n\n        return output;\n      }\n\n    case 'max':\n      {\n        var currentMaxValue = max(input);\n        if (currentMaxValue === 0) return input.slice(0);\n        var factor = maxValue / currentMaxValue;\n\n        for (var _i = 0; _i < input.length; _i++) {\n          output[_i] = input[_i] * factor;\n        }\n\n        return output;\n      }\n\n    case 'sum':\n      {\n        var sumFactor = sum(input) / sumValue;\n        if (sumFactor === 0) return input.slice(0);\n\n        for (var _i2 = 0; _i2 < input.length; _i2++) {\n          output[_i2] = input[_i2] / sumFactor;\n        }\n\n        return output;\n      }\n\n    default:\n      throw new Error(\"norm: unknown algorithm: \".concat(algorithm));\n  }\n}\n\nfunction absoluteSum(input) {\n  var sumValue = 0;\n\n  for (var i = 0; i < input.length; i++) {\n    sumValue += Math.abs(input[i]);\n  }\n\n  return sumValue;\n}\n\nexport default norm;\n","import isArray from 'is-any-array';\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\n/**\r\n * Fill an array with sequential numbers\r\n * @param {Array<number>} [input] - optional destination array (if not provided a new array will be created)\r\n * @param {object} [options={}]\r\n * @param {number} [options.from=0] - first value in the array\r\n * @param {number} [options.to=10] - last value in the array\r\n * @param {number} [options.size=input.length] - size of the array (if not provided calculated from step)\r\n * @param {number} [options.step] - if not provided calculated from size\r\n * @return {Array<number>}\r\n */\n\nfunction sequentialFill() {\n  var input = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (_typeof(input) === 'object' && !isArray(input)) {\n    options = input;\n    input = [];\n  }\n\n  if (!isArray(input)) {\n    throw new TypeError('input must be an array');\n  }\n\n  var _options = options,\n      _options$from = _options.from,\n      from = _options$from === void 0 ? 0 : _options$from,\n      _options$to = _options.to,\n      to = _options$to === void 0 ? 10 : _options$to,\n      _options$size = _options.size,\n      size = _options$size === void 0 ? input.length : _options$size,\n      step = _options.step;\n\n  if (size !== 0 && step) {\n    throw new Error('step is defined by the array size');\n  }\n\n  if (!size) {\n    if (step) {\n      size = Math.floor((to - from) / step) + 1;\n    } else {\n      size = to - from + 1;\n    }\n  }\n\n  if (!step && size) {\n    step = (to - from) / (size - 1);\n  }\n\n  if (Array.isArray(input)) {\n    // only works with normal array\n    input.length = 0;\n\n    for (var i = 0; i < size; i++) {\n      input.push(from);\n      from += step;\n    }\n  } else {\n    if (input.length !== size) {\n      throw new Error('sequentialFill typed array must have the correct length');\n    }\n\n    for (var _i = 0; _i < size; _i++) {\n      input[_i] = from;\n      from += step;\n    }\n  }\n\n  return input;\n}\n\nexport default sequentialFill;\n","const toString = Object.prototype.toString;\n\nexport default function isAnyArray(object) {\n  return toString.call(object).endsWith('Array]');\n}\n","import isArray from 'is-any-array';\nimport arrayMean from 'ml-array-mean';\n\nfunction variance(values) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!isArray(values)) {\n    throw new TypeError('input must be an array');\n  }\n\n  var _options$unbiased = options.unbiased,\n      unbiased = _options$unbiased === void 0 ? true : _options$unbiased,\n      _options$mean = options.mean,\n      mean = _options$mean === void 0 ? arrayMean(values) : _options$mean;\n  var sqrError = 0;\n\n  for (var i = 0; i < values.length; i++) {\n    var x = values[i] - mean;\n    sqrError += x * x;\n  }\n\n  if (unbiased) {\n    return sqrError / (values.length - 1);\n  } else {\n    return sqrError / values.length;\n  }\n}\n\nexport default variance;\n","import variance from 'ml-array-variance';\n\nfunction standardDeviation(values) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return Math.sqrt(variance(values, options));\n}\n\nexport default standardDeviation;\n","/**\n * Merge abscissa values if the ordinate value is in a list of centroids\n * @param {object} originalPoints\n * @param {Array<number>} originalPoints.x\n * @param {Array<number>} originalPoints.y\n * @param {Array<number>} centroids\n * @param {object} [options]\n * @param {number} [options.window = 0.01] - has to be a positive number\n * @return {{x: Array<number>, y: Array<number>}}\n */\nexport default function mergeByCentroids(\n  originalPoints,\n  centroids,\n  options = {}\n) {\n  const { window = 0.01 } = options;\n\n  var mergedPoints = {\n    x: centroids.slice(),\n    y: new Array(centroids.length).fill(0)\n  };\n\n  var originalIndex = 0;\n  var mergedIndex = 0;\n  while (\n    originalIndex < originalPoints.x.length &&\n    mergedIndex < centroids.length\n  ) {\n    var diff = originalPoints.x[originalIndex] - centroids[mergedIndex];\n    if (Math.abs(diff) < window) {\n      mergedPoints.y[mergedIndex] += originalPoints.y[originalIndex++];\n    } else if (diff < 0) {\n      originalIndex++;\n    } else {\n      mergedIndex++;\n    }\n  }\n\n  return mergedPoints;\n}\n","import binarySearch from 'binary-search';\nimport { ascending, descending } from 'num-sort';\n\n/**\n *\n * @param {object} points\n * @param {Array<number>} originalPoints.x\n * @param {Array<number>} originalPoints.y\n * @param {*} options\n * @return {{x: Array<number>, y: Array<number>}}\n */\nexport default function closestX(points, options) {\n  const { x, y } = points;\n  const { target = x[0], reverse = false } = options;\n\n  let index;\n  if (reverse) {\n    index = binarySearch(x, target, descending);\n  } else {\n    index = binarySearch(x, target, ascending);\n  }\n\n  if (index >= 0) {\n    return {\n      x: x[index],\n      y: y[index]\n    };\n  } else {\n    index = ~index;\n    if (\n      (index !== 0 && Math.abs(x[index] - target) > 0.5) ||\n      index === x.length\n    ) {\n      return {\n        x: x[index - 1],\n        y: y[index - 1]\n      };\n    } else {\n      return {\n        x: x[index],\n        y: y[index]\n      };\n    }\n  }\n}\n","import mean from 'ml-array-mean';\n\n/**\n *\n * @param {object} points\n * @param {Array<number>} points.x\n * @param {Array<number>} points.y\n * @param {object} [options]\n * @param {boolean} [options.unbiased = true] - if true, divide by (n-1); if false, divide by n.\n * @return {number}\n */\nexport default function covariance(points, options = {}) {\n  const { x, y } = points;\n  const { unbiased = true } = options;\n\n  const meanX = mean(x);\n  const meanY = mean(y);\n\n  var error = 0;\n\n  for (let i = 0; i < x.length; i++) {\n    error += (x[i] - meanX) * (y[i] - meanY);\n  }\n\n  if (unbiased) {\n    return error / (x.length - 1);\n  } else {\n    return error / x.length;\n  }\n}\n","/**\n * Merge abscissas values on similar ordinates and weight the group of abscissas\n * @param {object} points\n * @param {Array<number>} points.x - sorted abscissas values\n * @param {Array<number>} points.y - ordinates values\n * @param {object} [options]\n * @param {number} [options.groupWidth = 0.001] - window for abscissas to merge\n * @return {{x: Array<number>, y: Array<number>}}\n */\nexport default function maxMerge(points, options = {}) {\n  const { x, y } = points;\n  const { groupWidth = 0.001 } = options;\n\n  var merged = { x: [], y: [] };\n  var maxAbscissa = { x: [], y: [] };\n  var size = 0;\n  var index = 0;\n\n  while (index < x.length) {\n    if (size === 0 || x[index] - merged.x[size - 1] > groupWidth) {\n      maxAbscissa.x.push(x[index]);\n      maxAbscissa.y.push(y[index]);\n      merged.x.push(x[index]);\n      merged.y.push(y[index]);\n      index++;\n      size++;\n    } else {\n      if (y[index] > maxAbscissa.y[size - 1]) {\n        maxAbscissa.x[size - 1] = x[index];\n        maxAbscissa.y[size - 1] = y[index];\n      }\n      merged.x[size - 1] = x[index];\n      merged.y[size - 1] += y[index];\n      index++;\n    }\n  }\n\n  merged.x = maxAbscissa.x.slice();\n\n  return merged;\n}\n","import binarySearch from 'binary-search';\nimport { ascending, descending } from 'num-sort';\n\n/**\n * @param {object} points\n * @param {Array<number>} points.x - sorted abscissas values\n * @param {Array<number>} points.y - ordinates values\n * @param {object} [options]\n * @param {object} [options.from = {index: 0}]\n * @param {object} [options.to = {index: x.length-1}]\n * @param {boolean} [options.reverse = false]\n * @return {{index: number, value: number}}\n */\nexport default function maxY(points, options = {}) {\n  const { x, y } = points;\n  let {\n    from = { index: 0 },\n    to = { index: x.length },\n    reverse = false\n  } = options;\n\n  if (from.value !== undefined && from.index === undefined) {\n    from.index = calculateIndex(from.value, x, reverse);\n  }\n\n  if (to.value !== undefined && to.index === undefined) {\n    to.index = calculateIndex(to.value, x, reverse);\n  }\n\n  var currentMax = Number.MIN_VALUE;\n  var currentIndex;\n  for (var i = from.index; i < to.index; i++) {\n    if (currentMax < y[i]) {\n      currentMax = y[i];\n      currentIndex = i;\n    }\n  }\n\n  return {\n    index: currentIndex,\n    value: currentMax\n  };\n}\n\n/**\n * @param {number} value\n * @param {Array<number>} x\n * @param {boolean} reverse\n * @return {number} index of the value in the array\n */\nfunction calculateIndex(value, x, reverse) {\n  let index;\n  if (reverse) {\n    index = binarySearch(x, value, descending);\n  } else {\n    index = binarySearch(x, value, ascending);\n  }\n\n  if (index < 0) {\n    throw new Error(`the value ${value} doesn't belongs to the abscissa value`);\n  }\n\n  return index;\n}\n","export default function sortX(points, options = {}) {\n  const { x, y } = points;\n  const { reverse = false } = options;\n\n  var sortFunc;\n  if (!reverse) {\n    sortFunc = (a, b) => a.x - b.x;\n  } else {\n    sortFunc = (a, b) => b.x - a.x;\n  }\n\n  var grouped = x\n    .map((val, index) => ({\n      x: val,\n      y: y[index]\n    }))\n    .sort(sortFunc);\n\n  var response = { x: x.slice(), y: y.slice() };\n  for (var i = 0; i < x.length; i++) {\n    response.x[i] = grouped[i].x;\n    response.y[i] = grouped[i].y;\n  }\n\n  return response;\n}\n","\n/**\n * In place modification of the 2 arrays to make X unique and sum the Y if X has the same value\n * @param {object} [points={}] : Object of points contains property x (an array) and y (an array)\n * @return points\n */\n\nexport default function uniqueX(points = {}) {\n  const { x, y } = points;\n  if (x.length < 2) return;\n  if (x.length !== y.length) {\n    throw new Error('The X and Y arrays mush have the same length');\n  }\n\n  let current = x[0];\n  let counter = 0;\n\n  for (let i = 1; i < x.length; i++) {\n    if (current !== x[i]) {\n      counter++;\n      current = x[i];\n      x[counter] = x[i];\n      if (i !== counter) {\n        y[counter] = 0;\n      }\n    }\n    if (i !== counter) {\n      y[counter] += y[i];\n    }\n  }\n\n  x.length = counter + 1;\n  y.length = counter + 1;\n}\n","/**\n * Merge abscissas values on similar ordinates and weight the group of abscissas\n * @param {object} points\n * @param {Array<number>} points.x - sorted abscissas values\n * @param {Array<number>} points.y - ordinates values\n * @param {object} [options]\n * @param {number} [options.groupWidth = 0.001] - window for abscissas to merge\n * @return {{x: Array<number>, y: Array<number>}}\n */\nexport default function weightedMerge(points, options = {}) {\n  const { x, y } = points;\n  const { groupWidth = 0.001 } = options;\n\n  var merged = { x: [], y: [] };\n  var weightedAbscissa = { x: [], y: [] };\n  var size = 0;\n  var index = 0;\n\n  while (index < x.length) {\n    if (size === 0 || x[index] - merged.x[size - 1] > groupWidth) {\n      weightedAbscissa.x.push(x[index] * y[index]);\n      weightedAbscissa.y.push(y[index]);\n      merged.x.push(x[index]);\n      merged.y.push(y[index]);\n      index++;\n      size++;\n    } else {\n      weightedAbscissa.x[size - 1] += x[index] * y[index];\n      weightedAbscissa.y[size - 1] += y[index];\n      merged.x[size - 1] = x[index];\n      merged.y[size - 1] += y[index];\n      index++;\n    }\n  }\n\n  for (var i = 0; i < merged.x.length; i++) {\n    merged.x[i] = weightedAbscissa.x[i] / weightedAbscissa.y[i];\n  }\n\n  return merged;\n}\n","/**\n * Normalize an array of zones:\n * - ensure than from < to\n * - merge overlapping zones\n *\n * The method will always check if from if lower than to and will swap if required.\n * @param {Array} [zones=[]]\n * @param {object} [options={}]\n * @param {number} [options.from=Number.NEGATIVE_INFINITY] Specify min value of a zone\n * @param {number} [options.to=Number.POSITIVE_INFINITY] Specify max value of a zone\n */\n\nexport function normalize(zones = [], options = {}) {\n  if (zones.length === 0) return [];\n  let {\n    from = Number.NEGATIVE_INFINITY,\n    to = Number.POSITIVE_INFINITY,\n  } = options;\n  if (from > to) [from, to] = [to, from];\n\n  zones = JSON.parse(JSON.stringify(zones)).map((zone) =>\n    zone.from > zone.to ? { from: zone.to, to: zone.from } : zone,\n  );\n  zones = zones.sort((a, b) => {\n    if (a.from !== b.from) return a.from - b.from;\n    return a.to - b.to;\n  });\n\n  zones.forEach((zone) => {\n    if (from > zone.from) zone.from = from;\n    if (to < zone.to) zone.to = to;\n  });\n\n  zones = zones.filter((zone) => zone.from <= zone.to);\n  if (zones.length === 0) return [];\n\n  let currentZone = zones[0];\n  let result = [currentZone];\n  for (let i = 1; i < zones.length; i++) {\n    let zone = zones[i];\n    if (zone.from <= currentZone.to) {\n      currentZone.to = zone.to;\n    } else {\n      currentZone = zone;\n      result.push(currentZone);\n    }\n  }\n  return result;\n}\n","import { normalize } from './normalize';\n\n/**\n * Convert an array of exclusions and keep only from / to\n *\n * The method will always check if from if lower than to and will swap if required.\n * @param {Array} [exclusions=[]]\n * @param {object} [options={}]\n * @param {number} [options.from=Number.NEGATIVE_INFINITY] Specify min value of zones (after inversion)\n * @param {number} [options.to=Number.POSITIVE_INFINITY] Specify max value of zones (after inversion)\n */\n\nexport function invert(exclusions = [], options = {}) {\n  let {\n    from = Number.NEGATIVE_INFINITY,\n    to = Number.POSITIVE_INFINITY,\n  } = options;\n  if (from > to) [from, to] = [to, from];\n\n  exclusions = normalize(exclusions, { from, to });\n  if (exclusions.length === 0) return [{ from, to }];\n\n  let zones = [];\n  for (let i = 0; i < exclusions.length; i++) {\n    let exclusion = exclusions[i];\n    let nextExclusion = exclusions[i + 1];\n    if (i === 0) {\n      if (exclusion.from > from) {\n        zones.push({ from, to: exclusion.from });\n      }\n    }\n    if (i === exclusions.length - 1) {\n      if (exclusion.to < to) {\n        zones.push({ from: exclusion.to, to });\n      }\n    } else {\n      zones.push({ from: exclusion.to, to: nextExclusion.from });\n    }\n  }\n\n  return zones;\n}\n","import { normalize } from './normalize';\n\n/**\n * Add the number of points per zone to reach a specified total\n * @param {Array} [zones=[]]\n * @param {number} [numberOfPoints] Total number of points to distribute between zones\n * @param {object} [options={}]\n * @param {number} [options.from=Number.NEGATIVE_INFINITY] Specify min value of a zone\n * @param {number} [options.to=Number.POSITIVE_INFINITY] Specify max value of a zone\n */\n\nexport function zonesWithPoints(zones, numberOfPoints, options = {}) {\n  if (zones.length === 0) return zones;\n  zones = normalize(zones, options);\n\n  const totalSize = zones.reduce((previous, current) => {\n    return previous + (current.to - current.from);\n  }, 0);\n\n  let unitsPerPoint = totalSize / numberOfPoints;\n  let currentTotal = 0;\n  for (let i = 0; i < zones.length - 1; i++) {\n    let zone = zones[i];\n    zone.numberOfPoints = Math.min(\n      Math.round((zone.to - zone.from) / unitsPerPoint),\n      numberOfPoints - currentTotal,\n    );\n    currentTotal += zone.numberOfPoints;\n  }\n\n  zones[zones.length - 1].numberOfPoints = numberOfPoints - currentTotal;\n\n  return zones;\n}\n","/**\n * Function that calculates the integral of the line between two\n * x-coordinates, given the slope and intercept of the line.\n * @param {number} x0\n * @param {number} x1\n * @param {number} slope\n * @param {number} intercept\n * @return {number} integral value.\n */\nexport default function integral(x0, x1, slope, intercept) {\n  return (\n    0.5 * slope * x1 * x1 +\n    intercept * x1 -\n    (0.5 * slope * x0 * x0 + intercept * x0)\n  );\n}\n","import integral from './integral';\n\n/**\n * function that retrieves the getEquallySpacedData with the variant \"smooth\"\n *\n * @param {Array<number>} x\n * @param {Array<number>} y\n * @param {number} from - Initial point\n * @param {number} to - Final point\n * @param {number} numberOfPoints\n * @return {Array} - Array of y's equally spaced with the variant \"smooth\"\n */\nexport default function equallySpacedSmooth(x, y, from, to, numberOfPoints) {\n  let xLength = x.length;\n\n  let step = (to - from) / (numberOfPoints - 1);\n  let halfStep = step / 2;\n\n  let output = new Array(numberOfPoints);\n\n  let initialOriginalStep = x[1] - x[0];\n  let lastOriginalStep = x[xLength - 1] - x[xLength - 2];\n\n  // Init main variables\n  let min = from - halfStep;\n  let max = from + halfStep;\n\n  let previousX = Number.MIN_VALUE;\n  let previousY = 0;\n  let nextX = x[0] - initialOriginalStep;\n  let nextY = 0;\n\n  let currentValue = 0;\n  let slope = 0;\n  let intercept = 0;\n  let sumAtMin = 0;\n  let sumAtMax = 0;\n\n  let i = 0; // index of input\n  let j = 0; // index of output\n\n  function getSlope(x0, y0, x1, y1) {\n    return (y1 - y0) / (x1 - x0);\n  }\n\n  let add = 0;\n  main: while (true) {\n    if (previousX <= min && min <= nextX) {\n      add = integral(0, min - previousX, slope, previousY);\n      sumAtMin = currentValue + add;\n    }\n\n    while (nextX - max >= 0) {\n      // no overlap with original point, just consume current value\n      add = integral(0, max - previousX, slope, previousY);\n      sumAtMax = currentValue + add;\n\n      output[j++] = (sumAtMax - sumAtMin) / step;\n\n      if (j === numberOfPoints) {\n        break main;\n      }\n\n      min = max;\n      max += step;\n      sumAtMin = sumAtMax;\n    }\n\n    currentValue += integral(previousX, nextX, slope, intercept);\n\n    previousX = nextX;\n    previousY = nextY;\n\n    if (i < xLength) {\n      nextX = x[i];\n      nextY = y[i];\n      i++;\n    } else if (i === xLength) {\n      nextX += lastOriginalStep;\n      nextY = 0;\n    }\n\n    slope = getSlope(previousX, previousY, nextX, nextY);\n    intercept = -slope * previousX + previousY;\n  }\n\n  return output;\n}\n","/**\n * function that retrieves the getEquallySpacedData with the variant \"slot\"\n *\n * @param {Array<number>} x\n * @param {Array<number>} y\n * @param {number} from - Initial point\n * @param {number} to - Final point\n * @param {number} numberOfPoints\n * @return {Array} - Array of y's equally spaced with the variant \"slot\"\n */\nexport default function equallySpacedSlot(x, y, from, to, numberOfPoints) {\n  let xLength = x.length;\n\n  let step = (to - from) / (numberOfPoints - 1);\n  let halfStep = step / 2;\n  let lastStep = x[x.length - 1] - x[x.length - 2];\n\n  let start = from - halfStep;\n  let output = new Array(numberOfPoints);\n\n  // Init main variables\n  let min = start;\n  let max = start + step;\n\n  let previousX = -Number.MAX_VALUE;\n  let previousY = 0;\n  let nextX = x[0];\n  let nextY = y[0];\n  let frontOutsideSpectra = 0;\n  let backOutsideSpectra = true;\n\n  let currentValue = 0;\n\n  // for slot algorithm\n  let currentPoints = 0;\n\n  let i = 1; // index of input\n  let j = 0; // index of output\n\n  main: while (true) {\n    if (previousX >= nextX) throw new Error('x must be an increasing serie');\n    while (previousX - max > 0) {\n      // no overlap with original point, just consume current value\n      if (backOutsideSpectra) {\n        currentPoints++;\n        backOutsideSpectra = false;\n      }\n\n      output[j] = currentPoints <= 0 ? 0 : currentValue / currentPoints;\n      j++;\n\n      if (j === numberOfPoints) {\n        break main;\n      }\n\n      min = max;\n      max += step;\n      currentValue = 0;\n      currentPoints = 0;\n    }\n\n    if (previousX > min) {\n      currentValue += previousY;\n      currentPoints++;\n    }\n\n    if (previousX === -Number.MAX_VALUE || frontOutsideSpectra > 1) {\n      currentPoints--;\n    }\n\n    previousX = nextX;\n    previousY = nextY;\n\n    if (i < xLength) {\n      nextX = x[i];\n      nextY = y[i];\n      i++;\n    } else {\n      nextX += lastStep;\n      nextY = 0;\n      frontOutsideSpectra++;\n    }\n  }\n\n  return output;\n}\n","import sequentialFill from 'ml-array-sequential-fill';\nimport { zonesWithPoints, invert } from 'ml-zones';\n\nimport equallySpacedSmooth from './equallySpacedSmooth';\nimport equallySpacedSlot from './equallySpacedSlot';\n\n/**\n * Function that returns a Number array of equally spaced numberOfPoints\n * containing a representation of intensities of the spectra arguments x\n * and y.\n *\n * The options parameter contains an object in the following form:\n * from: starting point\n * to: last point\n * numberOfPoints: number of points between from and to\n * variant: \"slot\" or \"smooth\" - smooth is the default option\n *\n * The slot variant consist that each point in the new array is calculated\n * averaging the existing points between the slot that belongs to the current\n * value. The smooth variant is the same but takes the integral of the range\n * of the slot and divide by the step size between two points in the new array.\n *\n * If exclusions zone are present, zones are ignored !\n * @param {object} [arrayXY={}] - object containing 2 properties x and y (both an array)\n * @param {object} [options={}]\n * @param {number} [options.from=x[0]]\n * @param {number} [options.to=x[x.length-1]]\n * @param {string} [options.variant='smooth']\n * @param {number} [options.numberOfPoints=100]\n * @param {Array} [options.exclusions=[]] array of from / to that should be skipped for the generation of the points\n * @param {Array} [options.zones=[]] array of from / to that should be kept\n * @return {object<x: Array, y:Array>} new object with x / y array with the equally spaced data.\n */\n\nexport default function equallySpaced(arrayXY = {}, options = {}) {\n  let { x, y } = arrayXY;\n  let xLength = x.length;\n  let reverse = false;\n  if (x.length > 1 && x[0] > x[1]) {\n    x = x.slice().reverse();\n    y = y.slice().reverse();\n    reverse = true;\n  }\n\n  let {\n    from = x[0],\n    to = x[xLength - 1],\n    variant = 'smooth',\n    numberOfPoints = 100,\n    exclusions = [],\n    zones = [],\n  } = options;\n\n  if (xLength !== y.length) {\n    throw new RangeError(\"the x and y vector doesn't have the same size.\");\n  }\n\n  if (typeof from !== 'number' || isNaN(from)) {\n    throw new RangeError(\"'from' option must be a number\");\n  }\n\n  if (typeof to !== 'number' || isNaN(to)) {\n    throw new RangeError(\"'to' option must be a number\");\n  }\n\n  if (typeof numberOfPoints !== 'number' || isNaN(numberOfPoints)) {\n    throw new RangeError(\"'numberOfPoints' option must be a number\");\n  }\n\n  if (numberOfPoints < 2) {\n    throw new RangeError(\"'numberOfPoints' option must be greater than 1\");\n  }\n\n  if (zones.length === 0) {\n    zones = invert(exclusions, { from, to });\n  }\n\n  zones = zonesWithPoints(zones, numberOfPoints, { from, to });\n\n  let xResult = [];\n  let yResult = [];\n  for (let zone of zones) {\n    let zoneResult = processZone(\n      x,\n      y,\n      zone.from,\n      zone.to,\n      zone.numberOfPoints,\n      variant,\n      reverse,\n    );\n\n    xResult = xResult.concat(zoneResult.x);\n    yResult = yResult.concat(zoneResult.y);\n  }\n  if (reverse) {\n    if (from < to) {\n      return { x: xResult.reverse(), y: yResult.reverse() };\n    } else {\n      return { x: xResult, y: yResult };\n    }\n  } else {\n    if (from < to) {\n      return { x: xResult, y: yResult };\n    } else {\n      return { x: xResult.reverse(), y: yResult.reverse() };\n    }\n  }\n}\n\nfunction processZone(x, y, from, to, numberOfPoints, variant) {\n  if (numberOfPoints < 1) {\n    throw new RangeError('the number of points must be at least 1');\n  }\n\n  let output =\n    variant === 'slot'\n      ? equallySpacedSlot(x, y, from, to, numberOfPoints)\n      : equallySpacedSmooth(x, y, from, to, numberOfPoints);\n\n  return {\n    x: sequentialFill({\n      from,\n      to,\n      size: numberOfPoints,\n    }),\n    y: output,\n  };\n}\n","export default function getZones(from, to, exclusions = []) {\n  if (from > to) {\n    [from, to] = [to, from];\n  }\n\n  // in exclusions from and to have to be defined\n  exclusions = exclusions.filter(\n    (exclusion) => exclusion.from !== undefined && exclusion.to !== undefined\n  );\n\n  exclusions = JSON.parse(JSON.stringify(exclusions));\n  // we ensure that from before to\n  exclusions.forEach((exclusion) => {\n    if (exclusion.from > exclusion.to) {\n      [exclusion.to, exclusion.from] = [exclusion.from, exclusion.to];\n    }\n  });\n\n  exclusions.sort((a, b) => a.from - b.from);\n\n  // we will rework the exclusions in order to remove overlap and outside range (from / to)\n  exclusions.forEach((exclusion) => {\n    if (exclusion.from < from) exclusion.from = from;\n    if (exclusion.to > to) exclusion.to = to;\n  });\n  for (let i = 0; i < exclusions.length - 1; i++) {\n    if (exclusions[i].to > exclusions[i + 1].from) {\n      exclusions[i].to = exclusions[i + 1].from;\n    }\n  }\n  exclusions = exclusions.filter((exclusion) => exclusion.from < exclusion.to);\n\n  if (!exclusions || exclusions.length === 0) {\n    return [{ from, to }];\n  }\n\n  let zones = [];\n  let currentFrom = from;\n  for (let exclusion of exclusions) {\n    if (currentFrom < exclusion.from) {\n      zones.push({\n        from: currentFrom,\n        to: exclusion.from\n      });\n    }\n\n    currentFrom = exclusion.to;\n  }\n  if (currentFrom < to) {\n    zones.push({\n      from: currentFrom,\n      to: to\n    });\n  }\n\n  return zones;\n}\n","import getZones from './getZones';\n\n/**\n * Filter an array x/y based on various criteria\n * x points are expected to be sorted\n *\n * @param {object} points\n * @param {object} [options={}]\n * @param {array} [options.from]\n * @param {array} [options.to]\n * @param {array} [options.exclusions=[]]\n * @return {{x: Array<number>, y: Array<number>}}\n */\n\nexport default function filterX(points, options = {}) {\n  const { x, y } = points;\n  const { from = x[0], to = x[x.length - 1], exclusions = [] } = options;\n\n  let zones = getZones(from, to, exclusions);\n\n\n  let currentZoneIndex = 0;\n  let newX = [];\n  let newY = [];\n  let position = 0;\n  while (position < x.length) {\n    if (\n      x[position] <= zones[currentZoneIndex].to &&\n      x[position] >= zones[currentZoneIndex].from\n    ) {\n      newX.push(x[position]);\n      newY.push(y[position]);\n    } else {\n      if (x[position] > zones[currentZoneIndex].to) {\n        currentZoneIndex++;\n        if (!zones[currentZoneIndex]) break;\n      }\n    }\n    position++;\n  }\n\n  return {\n    x: newX,\n    y: newY\n  };\n}\n","import { DecisionTreeClassifier, DecisionTreeRegression } from \"ml-cart\";\nimport {\n  RandomForestClassifier,\n  RandomForestRegression,\n} from \"ml-random-forest\";\n\n// Try to keep this list in the same structure as the README.\n\n// Unsupervised learning\nexport { PCA } from \"ml-pca\";\nimport * as HClust from \"ml-hclust\";\nexport { HClust };\nexport { default as KMeans } from \"ml-kmeans\";\n\n// Supervised learning\nimport * as NaiveBayes from \"ml-naivebayes\";\nexport { NaiveBayes };\nexport { default as KNN } from \"ml-knn\";\nexport { PLS, KOPLS, OPLS, OPLSNipals } from \"ml-pls\";\nimport * as CrossValidation from \"ml-cross-validation\";\nexport { CrossValidation };\nexport { default as ConfusionMatrix } from \"ml-confusion-matrix\";\nexport { DecisionTreeClassifier };\nexport { RandomForestClassifier };\n\n// Artificial neural networks\nexport { default as FNN } from \"ml-fnn\";\nexport { default as SOM } from \"ml-som\";\n\n// Regression\nexport {\n  SimpleLinearRegression,\n  PolynomialRegression,\n  MultivariateLinearRegression,\n  PowerRegression,\n  ExponentialRegression,\n  TheilSenRegression,\n  RobustPolynomialRegression,\n} from \"ml-regression\";\nexport { DecisionTreeRegression };\nexport { RandomForestRegression };\n\n// Optimization\nexport { default as levenbergMarquardt } from \"ml-levenberg-marquardt\";\nimport * as FCNNLS from \"ml-fcnnls\";\nexport { FCNNLS };\n\n// Math\nimport * as MatrixLib from \"ml-matrix\";\nconst {\n  Matrix,\n  SVD,\n  EVD,\n  CholeskyDecomposition,\n  LuDecomposition,\n  QrDecomposition,\n} = MatrixLib;\nexport {\n  MatrixLib,\n  Matrix,\n  SVD,\n  EVD,\n  CholeskyDecomposition,\n  LuDecomposition,\n  QrDecomposition,\n};\n\nexport { SparseMatrix } from \"ml-sparse-matrix\";\nexport { default as Kernel } from \"ml-kernel\";\nimport { distance, similarity } from \"ml-distance\";\nexport { distance as Distance, similarity as Similarity };\nexport { default as distanceMatrix } from \"ml-distance-matrix\";\nexport { default as XSadd } from \"ml-xsadd\";\nexport { nGMCA } from \"ml-ngmca\";\n\n// Statistics\nexport { default as Performance } from \"ml-performance\";\n\n// Data preprocessing\nexport { default as savitzkyGolay } from \"ml-savitzky-golay\";\n\n// Utility\nexport { default as BitArray } from \"ml-bit-array\";\nexport { default as HashTable } from \"ml-hash-table\";\nexport { default as padArray } from \"ml-pad-array\";\nexport { default as binarySearch } from \"binary-search\";\nimport * as numSort from \"num-sort\";\nexport { numSort };\nexport { default as Random } from \"ml-random\";\nimport * as GSD from 'ml-gsd';\nexport { GSD };\n\nimport min from \"ml-array-min\";\nimport max from \"ml-array-max\";\nimport median from \"ml-array-median\";\nimport mean from \"ml-array-mean\";\nimport mode from \"ml-array-mode\";\nimport normed from \"ml-array-normed\";\nimport rescale from \"ml-array-rescale\";\nimport sequentialFill from \"ml-array-sequential-fill\";\nimport sum from \"ml-array-sum\";\nimport standardDeviation from \"ml-array-standard-deviation\";\nimport variance from \"ml-array-variance\";\nexport const Array = {\n  min,\n  max,\n  median,\n  mean,\n  mode,\n  normed,\n  rescale,\n  sequentialFill,\n  standardDeviation,\n  sum,\n  variance,\n};\n\nimport centroidsMerge from \"ml-array-xy-centroids-merge\";\nimport closestX from \"ml-arrayxy-closestx\";\nimport covariance from \"ml-array-xy-covariance\";\nimport maxMerge from \"ml-array-xy-max-merge\";\nimport maxY from \"ml-array-xy-max-y\";\nimport sortX from \"ml-array-xy-sort-x\";\nimport uniqueX from \"ml-arrayxy-uniquex\";\nimport weightedMerge from \"ml-array-xy-weighted-merge\";\nimport equallySpaced from \"ml-array-xy-equally-spaced\";\nimport filterX from \"ml-array-xy-filter-x\";\nexport const ArrayXY = {\n  centroidsMerge,\n  closestX,\n  covariance,\n  maxMerge,\n  maxY,\n  sortX,\n  uniqueX,\n  weightedMerge,\n  equallySpaced,\n  filterX,\n};\n"],"names":["toString","Object","prototype","isAnyArray","object","call","endsWith","max","input","options","arguments","length","undefined","isArray","TypeError","_options$fromIndex","fromIndex","_options$toIndex","toIndex","Number","isInteger","Error","maxValue","i","min","minValue","rescale","output","Array","currentMin","currentMax","RangeError","_options$min","autoMinMax","_options$max","factor","indent","repeat","indentData","inspectMatrix","inspectMatrixWithOptions","this","matrix","maxRows","maxColumns","maxNumSize","constructor","name","inspectData","rows","columns","maxI","Math","maxJ","result","line","j","push","formatNumber","get","join","num","numStr","String","padEnd","precise","toPrecision","exponential","toExponential","eIndex","indexOf","e","slice","installMathOperations","AbstractMatrix","Matrix","add","value","addS","addM","set","checkMatrix","sub","subS","subM","subtract","subtractS","subtractM","mul","mulS","mulM","multiply","multiplyS","multiplyM","div","divS","divM","divide","divideS","divideM","mod","modS","modM","modulus","modulusS","modulusM","and","andS","andM","or","orS","orM","xor","xorS","xorM","leftShift","leftShiftS","leftShiftM","signPropagatingRightShift","signPropagatingRightShiftS","signPropagatingRightShiftM","rightShift","rightShiftS","rightShiftM","zeroFillRightShift","zeroFillRightShiftS","zeroFillRightShiftM","not","abs","acos","acosh","asin","asinh","atan","atanh","cbrt","ceil","clz32","cos","cosh","exp","expm1","floor","fround","log","log1p","log10","log2","round","sign","sin","sinh","sqrt","tan","tanh","trunc","pow","arg0","powS","powM","checkRowIndex","index","outer","checkColumnIndex","checkRowVector","vector","to1DArray","checkColumnVector","checkIndices","rowIndices","columnIndices","row","checkRowIndices","column","checkColumnIndices","some","r","from","c","checkRange","startRow","endRow","startColumn","endColumn","checkNumber","newArray","array","sumByRow","sum","sumByColumn","sumAll","v","productByRow","productByColumn","productAll","varianceByRow","unbiased","mean","cols","variance","sum1","sum2","x","varianceByColumn","varianceAll","size","centerByRow","centerByColumn","centerAll","getScaleByRow","scale","scaleByRow","getScaleByColumn","scaleByColumn","getScaleAll","divider","scaleAll","newRows","newColumns","newData","newMatrix","fill","random","interval","zeros","data","l","matrix1","matrix2","isMatrix","klass","apply","callback","to2DArray","copy","toJSON","isRowVector","isColumnVector","isVector","isSquare","isSymmetric","isEchelonForm","previousColumn","checked","isReducedEchelonForm","k","echelonForm","clone","h","iMax","swapRows","tmp","reducedEchelonForm","m","n","maxRow","p","pivot","setSubMatrix","neg","getRow","getRowVector","rowVector","setRow","row1","row2","temp","getColumn","getColumnVector","columnVector","setColumn","swapColumns","column1","column2","addRowVector","subRowVector","mulRowVector","divRowVector","addColumnVector","subColumnVector","mulColumnVector","divColumnVector","mulRow","mulColumn","maxIndex","idx","minIndex","maxRowIndex","minRow","minRowIndex","maxColumn","maxColumnIndex","minColumn","minColumnIndex","diag","norm","type","cumulativeSum","dot","vector2","vector1","mmul","other","Bcolj","Float64Array","s","strassen2x2","a11","b11","a12","b12","a21","b21","a22","b22","m1","m2","m3","m4","m5","c00","c01","c10","c11","strassen3x3","a00","a01","a02","a10","a20","b00","b01","b02","b10","b20","m6","m7","m8","m9","m12","m13","m14","m15","m16","m17","m18","c02","c12","c20","c21","c22","mmulStrassen","y","r1","c1","r2","c2","embed","mat","resultat","console","warn","blockMult","a","b","halfRows","parseInt","halfCols","subMatrix","scaleRows","isFinite","scaleColumns","flipRows","middle","first","last","flipColumns","kroneckerProduct","q","transpose","sortRows","compareFunction","compareNumbers","sort","sortColumns","subMatrixRow","indices","subMatrixColumn","selection","rowIndex","columnIndex","trace","by","product","standardDeviation","center","Symbol","for","rand","randomInt","randInt","diagonal","identity","eye","negate","tensorProduct","nRows","nColumns","arrayData","removeRow","splice","addRow","removeColumn","newRow","addColumn","BaseView","MatrixColumnView","MatrixColumnSelectionView","MatrixFlipColumnView","MatrixFlipRowView","MatrixRowView","MatrixRowSelectionView","MatrixSelectionView","MatrixSubView","MatrixTransposeView","WrapperMatrix1D","_calculateIndex","WrapperMatrix2D","wrap","LuDecomposition","t","LUcolj","kmax","lu","pivotVector","pivotSign","LU","isSingular","col","solve","count","X","determinant","hypotenuse","QrDecomposition","qr","rdiag","nrm","QR","Rdiag","isFullRank","SingularValueDecomposition","computeLeftSingularVectors","computeRightSingularVectors","autoTranspose","wantu","Boolean","wantv","swapped","aux","nu","ni","U","V","work","si","nct","nrt","mrc","pp","eps","EPSILON","kase","alpha","MIN_VALUE","isNaN","ks","f","cs","sn","sp","spm1","epm1","sk","ek","shift","g","Y","threshold","scols","Ls","rightSingularVectors","VL","vrows","urows","VLU","solveForDiagonal","inverse","vcols","ucols","tol","ii","useSVD","leftHandSide","rightHandSide","d","subMatrix0","subMatrix1","subMatrix2","xrange","exception","range","dependenciesOneRow","error","thresholdValue","thresholdError","returnArray","linearDependencies","results","Abis","pseudoInverse","svdSolution","SVD","leftSingularVectors","covariance","xMatrix","yMatrix","yIsSame","cov","correlation","sdx","sdy","corr","EigenvalueDecomposition","assumeSymmetric","tred2","tql2","H","ort","orthes","hqr2","hh","dl1","c3","el1","s2","tst1","high","low","nn","w","ra","sa","vr","vi","notlast","cdivres","exshift","z","iter","cdiv","xr","xi","yr","yi","CholeskyDecomposition","dimension","positiveDefinite","L","isPositiveDefinite","B","nipals","scaleScores","maxIterations","terminationCriteria","u","tOld","diff","counter","xResidual","residual","yResidual","betas","sumValue","toDiscreteDistribution","numberOfClasses","counts","giniImpurity","probabilities","getNumberOfClasses","filter","val","arr","map","reduce","giniGain","splitted","splitsImpurity","splits","currentSplit","squaredError","meanArray","currentElement","regressionError","matrixSplitter","lesserX","greaterX","lesserY","greaterY","zip","ret","gainFunctions","gini","Utils","regression","splitFunctions","TreeNode","kind","gainFunction","splitFunction","minNumSamples","maxDepth","bestSplit","XTranspose","bestGain","Infinity","check","currentFeature","splitValues","featureSplit","currentSplitVal","split","gain","maxGain","splitValue","lesser","greater","calculatePrediction","distribution","train","currentDepth","parentGain","splitColumn","splittedMatrix","left","right","classify","setNodeParameters","node","defaultOptions","DecisionTreeClassifier","model","root","Tree","assign","trainingSet","trainingLabels","predict","toPredict","predictions","DecisionTreeRegression","trainingValues","SMALLEST_UNSAFE_INTEGER","LARGEST_SAFE_INTEGER","UINT32_MAX","UINT32_SIZE","INT32_SIZE","INT32_MAX","UINT21_SIZE","UINT21_MAX","checkFloat","examplesBaggingWithReplacement","trainingValue","seed","engine","Random","autoSeed","Xr","featureBagging","replacement","usedIndex","toRet","Set","has","RandomForestBase","maxFeatures","nEstimators","treeOptions","isClassifier","indexes","useSampleBagging","Estimator","DTClassifier","DTRegression","estimators","est","load","res","values","predictionValues","RandomForestClassifier","baseModel","mode","super","pop","_ref","module","exports","window","median","quickSelectMedian","selectionMethods","arrayMean","arrayMedian","selectionMethod","RandomForestRegression","PCA","dataset","means","stdevs","S","R","excludedFeatures","isCovarianceMatrix","method","nCompNIPALS","ignoreZeroVariance","_computeFromCovarianceMatrix","_adjust","covarianceMatrix","_computeWithNIPALS","svd","singularValues","eigenvalues","singularValue","nComponents","invert","getExplainedVariance","getCumulativeVariance","explained","getEigenvectors","getEigenvalues","getStandardDeviations","getLoadings","evd","EVD","eigenvectorMatrix","realEigenvalues","reverse","dc","NIPALS","squaredEuclidean","euclidean","distanceMatrix","distanceFn","getMatrix","Heap","defaultCmp","heapify","heappop","heappush","heappushpop","heapreplace","insort","nlargest","nsmallest","updateItem","_siftdown","_siftup","lo","hi","cmp","mid","concat","item","lastelt","returnitem","_i","_len","_ref1","_results","_results1","_j","pos","elem","los","startpos","newitem","parent","parentpos","childpos","endpos","rightpos","nodes","replace","pushpop","peek","contains","clear","empty","heap","toArray","insert","top","front","require$$0","Cluster","children","height","isLeaf","cut","list","ans","group","groups","forEach","child","traverse","cb","visit","cluster","singleLink","dKI","dKJ","completeLink","averageLink","dIJ","nj","weightedAverageLink","centroidLink","medianLink","wardLink","nk","wardLink2","ai","aj","agnes","distanceFunction","isDistanceMatrix","updateFunc","getDistanceMatrix","numLeaves","toLowerCase","clusters","distance","getSmallestDistance","cluster1","cluster2","newCluster","newClusters","newDistanceMatrix","previous","newIndex","getPreviousIndex","prevI","prevICluster","smallest","smallestI","smallestJ","prev1","prev2","nearestVector","listVectors","similarityFunction","vectorIndex","maxSim","sim","minDist","MAX_VALUE","dist","calculateDistanceMatrix","updateClusterID","centers","clusterID","updateCenters","prevCenters","K","nDim","centersLen","dim","id","hasConverged","oldCenters","tolerance","LOOP","FLOAT_MUL","sh1","sh2","sh3","multiply_uint32","nlo","XSadd","Date","now","state","Uint32Array","init","getFloat","bind","getUint32","nextState","periodCertification","PROB_TOLERANCE","randomChoice","valuesArr","cumSum","getArray","randomIndex","seedOrRandom","xsadd","XSAdd","randomGenerator","choice","randomSample","mostDistant","maxDist","minDistCent","kmeanspp","nSamples","localTrials","firstCenterIdx","closestDistSquared","cumSumClosestDistSquared","candidateIdx","distanceToCandidates","euclideanDistances","bestCandidate","bestPot","bestDistSquared","newDistSquared","newPot","A","distanceSymbol","KMeansResult","centroids","converged","iterations","nearest","centroid","computeInformation","enrichedCentroids","withIterations","initialization","step","newCenters","kmeansGenerator","stepResult","stepNumber","kmeans","separateClasses","features","classes","totalPerClasses","separatedClasses","currentIndex","GaussianNB","reload","calculateProbabilities","C1","PI","std","logPriorProbability","currentStd","getCurrentClass","modelName","currentCase","maxProbability","predictedClass","currentProbability","calculateLogProbability","C2","MultinomialNB","conditionalProbability","priorProbability","separateClass","classValues","divisor","matrixLog","Node","obj","KDTree","points","metric","dimensions","buildTree","restoreParent","toJSONImpl","point","maxNodes","maxDistance","bestNodes","BinaryHeap","nearestSearch","ownDistance","linearPoint","bestChild","linearDistance","otherChild","saveNode","content","src","dest","depth","scoreFunction","element","bubbleUp","end","sinkDown","parentN","elemScore","child2N","child1N","swap","child1","child1Score","child2","KNN","labels","kdTree","isEuclidean","euclideanDistance","getSinglePrediction","knn","nearestPoints","pointsPerClass","maxPoints","lastElement","currentClass","currentPoints","pow2array","initializeMatrices","PLS","meanX","stdDevX","meanY","stdDevY","PBQ","R2X","scaleMethod","latentVectors","rx","cx","ry","cy","ssqXcal","sumOfSquaresY","T","P","Q","W","transposeX","transposeY","tIndex","maxSumColIndex","uIndex","t1","den","pnorm","ssqYcal","E","F","KOPLS","YLoadingMat","SigmaPow","YScoreMat","predScoreMat","YOrthLoadingVec","YOrthEigen","YOrthScoreMat","toNorm","TURegressionCoeff","kernelX","kernel","orthogonalComp","predictiveComp","predictiveComponents","orthogonalComponents","compute","Identity","Sigma","diagonalMatrix","YOrthScoreNorm","TpiPrime","CoTemp","SoTemp","toiPrime","ITo","lastScoreMat","lastTpPrime","KTestTrain","YOrthScoreVector","scoreMatPrime","p1","p2","p3","prediction","predYOrthVectors","ConfusionMatrix","actual","predicted","distinctLabels","actualIdx","predictedIdx","getLabels","getTotalCount","getTrueCount","getFalseCount","getTruePositiveCount","label","getIndex","getTrueNegativeCount","getFalsePositiveCount","getFalseNegativeCount","getPositiveCount","getNegativeCount","getTruePositiveRate","getTrueNegativeRate","getPositivePredictiveValue","TP","getNegativePredictiveValue","TN","getFalseNegativeRate","getFalsePositiveRate","getFalseDiscoveryRate","FP","getFalseOmissionRate","FN","getF1Score","getMatthewsCorrelationCoefficient","getInformedness","getMarkedness","getConfusionTable","getAccuracy","correct","incorrect","getCount","actualIndex","predictedIndex","createCommonjsModule","fn","runtime","global","Op","hasOwn","hasOwnProperty","$Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","regeneratorRuntime","GenStateSuspendedStart","GenStateSuspendedYield","GenStateExecuting","GenStateCompleted","ContinueSentinel","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","Gp","GeneratorFunctionPrototype","Generator","create","GeneratorFunction","displayName","isGeneratorFunction","genFun","ctor","mark","setPrototypeOf","__proto__","awrap","arg","__await","defineIteratorMethods","AsyncIterator","async","innerFn","outerFn","self","tryLocsList","next","then","done","keys","key","Context","reset","skipTempReset","prev","sent","_sent","delegate","tryEntries","resetTryEntry","charAt","stop","rootRecord","completion","rval","dispatchException","context","handle","loc","caught","record","entry","tryLoc","hasCatch","hasFinally","catchLoc","finallyLoc","abrupt","finallyEntry","complete","afterLoc","finish","thrown","delegateYield","iterable","resultName","nextLoc","protoGenerator","generator","_invoke","makeInvokeMethod","tryCatch","err","invoke","resolve","reject","Promise","unwrapped","previousPromise","enqueue","callInvokeWithMethodAndArg","doneResult","delegateResult","maybeInvokeDelegate","return","info","pushTryEntry","locs","iteratorMethod","Function","hadRuntime","getOwnPropertyNames","oldRuntime","runtimeModule","regenerator","_callee","M","N","twiddle","_context","factory","getFolds","allIdx","current","folds","randi","testIndex","trainIndex","el","idx2","sampleAClass","classVector","fraction","classVectorSorted","JSON","parse","stringify","indexOfSelected","ind","mask","includes","leaveOneOut","Classifier","classifierOptions","leavePOut","distinct","getDistinct","confusionMatrix","initMatrix","gen","combinations","testIdx","trainIdx","validateWithCallback","validate","kFold","testFeatures","trainFeatures","testLabels","trainLabels","getTrainTest","classifier","updateConfusionMatrix","predictedLabels","OPLSNipals","numberOSC","uNew","wOrtho","tOrtho","pOrtho","filteredX","weightsXOrtho","loadingsXOrtho","scoresXOrtho","weightsXPred","loadingsXpred","scoresXpred","loadingsY","tss","OPLS","opls","meansY","stdevsY","tCV","tOrthCV","yHatCV","nComp","cvFolds","from1DArray","Q2","nc","oplsCV","modelNC","yHatk","tPredk","tOrthk","oplsk","fold","trainTest","_getTrainTest","testXk","Xk","Yk","dataCenter","dataSD","plsCV","scores","Eh","tPred","yHat","tssy","Q2y","_predictAll","xRes","XOrth","FeaturesCS","labelsCS","Xres","plsCall","R2x","R2y","plsC","pPred","wPred","betasPred","Qpc","tOrth","pOrth","wOrth","totalPred","Yres","getLogs","getScores","scoresX","scoresY","trueLabels","fromLabels","tssx","oplsC","logistic","expELU","param","softExponential","softExponentialPrime","ACTIVATION_FUNCTIONS","activation","derivate","arctan","softsign","relu","softplus","bent","sinusoid","sinc","gaussian","Layer","inputSize","outputSize","regularization","epsilon","activationParam","selectedFunction","params","actFunction","derFunction","activationFunction","mlMatrix","forward","backpropagation","delta","dW","db","aCopy","update","OutputLayer","FeedForwardNeuralNetworks","hiddenLayers","learningRate","dicts","layers","buildNetwork","dictOutputs","inputs","propagate","outputs","NodeSquare","weights","som","neighbors","adjustWeights","target","influence","getDistance","otherNode","getDistanceTorus","distX","distY","gridDim","getNeighbors","xy","torus","getPos","bestNeighbor","direction","simA","simB","getPosition","NodeHexagonal","hX","distZ","fields","randomizer","squareEuclidean","gridType","SOM","numWeights","converters","getConverters","extractor","creator","nodeType","hx","distanceMethod","getMaxDistance","times","findBMU","adjust","iterationCount","startLearningRate","mapRadius","algorithmMethod","_initNodes","normalizers","denormalizers","getNormalizer","getDenormalizer","minMax","getRandomValue","zero","one","loadModel","eval","export","includeDistance","initNodes","setTraining","convertedSet","numIterations","timeConstant","trainOne","neighbourhoodRadius","trainingSetFactor","bmu","_findBestMatchingUnit","now2","radiusLimit","xMin","xMax","yMin","yMax","theX","theY","getConvertedNodes","candidate","lowest","computePosition","_predict","getQuantizationError","fit","getFit","maybeToPrecision","digits","checkArraySize","BaseRegression","toLaTeX","score","y2","xSum","ySum","chi2","rmsd","xSquared","ySquared","xY","PolynomialRegression","degree","powers","coefficients","checkArrayLength","regress","precision","_toFormula","isLaTeX","sup","closeSup","str","json","pr","FT","SimpleLinearRegression","slope","intercept","computeX","xFactor","absIntercept","slr","numerator","ExponentialRegression","er","yl","linear","PowerRegression","newInputs","latex","xl","MultivariateLinearRegression","statistics","xt","xx","invxx","beta","fittedValues","ri","stdError","stdErrorMatrix","stdErrors","tStats","summary","regressionStatistics","standardError","observations","variables","tStat","sigma","GaussianKernel","constant","PolynomialKernel","SigmoidKernel","ANOVAKernel","len","CauchyKernel","ExponentialKernel","HistogramIntersectionKernel","LaplacianKernel","MultiquadraticKernel","RationalQuadraticKernel","kernelType","rbf","polynomial","poly","anova","cauchy","histogram","HistogramKernel","laplacian","multiquadratic","rational","RationalKernel","sigmoid","mlp","Kernel","KernelConstructor","kernelFunction","landmarks","kernelMatrix","TheilSenRegression","theilSen","slopes","medianSlope","cuts","RobustPolynomialRegression","robustPolynomial","_","tuples","getRandomTuples","calcCoefficients","residuals","residualsMedian","tuple","half","errorCalculation","parameters","parameterizedFunction","func","gradientFunction","evaluatedData","gradientDifference","paramFunction","auxParams","funcParam","matrixFunction","damping","gradientFunc","matrixFunc","inverseMatrix","levenbergMarquardt","errorTolerance","minValues","maxValues","initialValues","parLen","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","iteration","parameterValues","parameterError","sortCollectionSet","collection","objectCollection","BigInt","sorted","cssls","XtX","XtY","Pset","choXtX","luXtX","sortedPset","sortedEset","cols2Solve","vars","initialisation","Fset","D","setDifference","C","optimality","maxIter","Jset","fullSet","notPset","fcnnls","infeasIndex","Hset","ones","hRowColIdx","negRowColIdx","alphaMin","minIdx","idx2zero","findIndex","newParam","fcnnlsVector","haystack","needle","comparator","assertNumber","number","largestPrime","primeNumbers","nextPrime","binarySearch","ascending","FREE","FULL","REMOVED","defaultInitialCapacity","defaultMinLoadFactor","defaultMaxLoadFactor","HashTable","table","minLoadFactor","maxLoadFactor","freeEntries","lowWaterMark","highWaterMark","initialCapacity","capacity","chooseHighWaterMark","indexOfKey","indexOfInsertion","newCapacity","chooseGrowCapacity","rehash","remove","noRehash","maybeShrinkCapacity","delete","chooseShrinkCapacity","containsKey","hash","decrement","containsValue","indexOfValue","ensureCapacity","minCapacity","oldCapacity","oldTable","oldValues","oldState","newTable","newValues","newState","chooseLowWaterMark","forEachKey","forEachValue","forEachPair","minLoad","maxLoad","SparseMatrix","_init","elements","symmetric","forEachNonZero","bandWidth","isBanded","width","v1","v2","cardinality","getNonZeros","setThreshold","newThreshold","trans","inplaceOperator","inplaceOperatorScalar","inplaceOperatorMatrix","staticOperator","inplaceMethod","staticMethod","operators","operator","fillTemplateFunction","op","methods","mathMethod","template","RegExp","additiveSymmetric","avg","bhattacharyya","canberra","chebyshev","clark","czekanowskiSimilarity","up","down","czekanowskiDistance","dice","q1","q2","divergence","fidelity","gower","harmonicMean","hellinger","innerProduct","intersection","jaccard","jeffreys","jensenDifference","jensenShannon","kdivergence","kulczynski","kullbackLeibler","kumarHassebrook","kumarJohnson","lorentzian","manhattan","matusita","minkowski","motyka","neyman","pearson","probabilisticSymmetric","ruzicka","soergel","sorensen","squared","squaredChord","taneja","tanimoto","bitvector","inter","union","tanimotoS","topsoe","waveHedges","createTree","spectrum","minWindow","to","mainCreateTree","start","getSimilarity","gamma","treeSimilarity","getFunction","cosine","diceD","intersectionD","jaccardD","kulczynskiD","motykaD","avgA","avgB","newA","newB","squaredChordD","zeroInsteadOfNegative","checkMatrixS","originalMatrix","fastExtractNMF","res2","sqrtMaxValue","subtracting","normBy","norms","normProj","normLimits","updateMatrixA","Ainit","proximal","maxFBIteration","toleranceFB","normConstrained","lambda","St","YSt","prevA","tNext","getMax","updateMatrixS","Sinit","At","AtY","prevS","initialize","rank","randGenerator","maxInitFBIteration","toleranceFBInit","sumC","sumR","positiveSumRowIndexS","positiveSumRowS","candidateA","colCandidate","normalize","normOnA","onS","onA","DS","DA","sColumns","aRows","valueForS","valueForA","getMedians","medians","dimMADstd","updateLambda","sigmaResidue","refinementBeginning","tauMAD","lambdaInf","addStd","alY","nGMCA","maximumIteration","phaseRatio","useTranspose","pred","cutoffs","tn","tp","fp","nNeg","nPos","nPosPred","nNegPred","Performance","isDistance","predP","all","targ","currentPred","nTp","nFp","getMeasure","measure","measures","getAURC","auc","getAUDC","getDistribution","cutLength","cutLow","cutHigh","xLabels","interValues","intraValues","interCumPercent","intraCumPercent","nTP","currentTP","nFP","currentFP","thisTP","thisFP","names","acc","fpr","tpr","fnr","tnr","ppv","npv","pcfall","pcmiss","lift","rpp","rnp","arrayCase","cond","matrixCase","padArray","factorial","windowSize","derivative","pad","padValue","savitzkyGolay","J","inic","Jtranspose","det","eightBits","arr1","arr2","getBit","setBit","toBinaryString","substr","parseBinaryString","toHexString","parseHexString","toDebug","binary","SavitzkyGolay","np","fullWeights","hs","constantH","wg1","wg2","d1","d2","getHs","wg","GramPoly","Grampoly","GenFact","gf","Weight","gsd","yIn","noiseLevel","sgOptions","smoothY","heightFactor","broadRatio","maxCriteria","minMaxRatio","derivativeThreshold","realTopDetection","equalSpaced","isEqualSpaced","getNoiseLevel","yCorrection","dY","ddY","yData","SG","xData","dX","maxDdy","maxY","lastMax","lastMin","minddY","intervalL","intervalR","broadMask","minddYLen","intervalLLen","intervalRLen","broadMaskLen","possible","frequency","distanceJ","minDistance","gettingCloser","signals","signalsLen","lastK","soft","yLeft","yRight","determineRealTop","base","maxDx","minDx","stddev","averageDeviations","peakList","currentPoint","sumOfGaussians","nL","optimizeGaussianSum","opts","pInit","pMin","pMax","dt","lmOptions","pFit","LM","singleGaussian","factor2","optimizeSingleGaussian","peak","sumOfLorentzians","optimizeLorentzianSum","singleLorentzian","optimizeSingleLorentzian","optimizePeaks","functionName","factorWidth","optimizationOptions","sampling","lastIndex","groupPeaks","peaks","sampleFunction","limits","optPeaks","fitResult","nbPoints","sampleX","sampleY","upperLimit","lowerLimit","joinBroadPeaks","broadLines","candidates","fitted","broadenPeaks","overlap","nextPeak","maxCount","_options$algorithm","algorithm","_options$sumValue","_options$maxValue","absoluteSumValue","absoluteSum","currentMaxValue","sumFactor","_i2","_typeof","sequentialFill","_options","_options$from","_options$to","_options$size","_options$unbiased","_options$mean","sqrError","mergeByCentroids","originalPoints","mergedPoints","originalIndex","mergedIndex","closestX","descending","maxMerge","groupWidth","merged","maxAbscissa","calculateIndex","sortX","sortFunc","grouped","response","uniqueX","weightedMerge","weightedAbscissa","zones","NEGATIVE_INFINITY","POSITIVE_INFINITY","zone","currentZone","exclusions","exclusion","nextExclusion","zonesWithPoints","numberOfPoints","unitsPerPoint","currentTotal","integral","x0","x1","equallySpacedSmooth","xLength","halfStep","initialOriginalStep","lastOriginalStep","previousX","previousY","nextX","nextY","currentValue","sumAtMin","sumAtMax","main","equallySpacedSlot","lastStep","frontOutsideSpectra","backOutsideSpectra","equallySpaced","arrayXY","variant","xResult","yResult","zoneResult","processZone","getZones","currentFrom","filterX","currentZoneIndex","newX","newY","position","MatrixLib","normed","ArrayXY","centroidsMerge"],"mappings":"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+BAGdunD,OAAO5sC,EADP9W,OAAOkM,aAAamF,GACPvV,GACX6J,6GClBK,SAAS2+C,EAAUC,EAAQC,EAAY/mC,EAAKD,OACvDiO,EAAKD,UAEEvvB,IAARwhB,EACDA,EAAM,WAGNA,GAAU,GACD,GAAKA,GAAO6mC,EAAStoD,OAC5B,MAAM,IAAIoB,WAAW,+BAGbnB,IAATuhB,EACDA,EAAO8mC,EAAStoD,OAAS,WAGzBwhB,GAAY,GACFC,GAAOD,GAAQ8mC,EAAStoD,OAChC,MAAM,IAAIoB,WAAW,4BAGnBqgB,GAAOD,OAMXgO,GAAOg5B,EAAWF,EADlB74B,EAAMhO,GAAQD,EAAOC,IAAS,IACG8mC,EAAQ94B,EAAK64B,IAGrC,EACP7mC,EAAOgO,EAAM,MAGV,CAAA,KAAGD,EAAM,GAKZ,OAAOC,EAJPjO,EAAOiO,EAAM,SAQThO,GCzCV,SAASgnC,aAAaC,MACC,iBAAXA,QACJ,IAAIvoD,UAAU,qBAItB,cAAoB,CAACsnB,EAAMC,KAC1B+gC,aAAahhC,GACbghC,aAAa/gC,GAETlnB,OAAOwc,MAAMyK,IACR,EAGLjnB,OAAOwc,MAAM0K,GACT,EAGDD,EAAOC,cAGM,CAACD,EAAMC,KAC3B+gC,aAAahhC,GACbghC,aAAa/gC,GAETlnB,OAAOwc,MAAMyK,GACT,EAGJjnB,OAAOwc,MAAM0K,IACR,EAGFA,EAAQD,qLChCT,MAAMkhC,aAAe,WAEtBC,aAAe,CAEnBD,aAGA,EACA,GACA,GACA,GACA,GACA,IACA,IACA,IACA,KACA,KACA,KACA,MACA,MACA,MACA,OACA,OACA,OACA,OACA,QACA,QACA,QACA,SACA,SACA,SACA,UACA,UACA,UACA,UACA,WAGA,IACA,IACA,KACA,KACA,KACA,MACA,MACA,MACA,OACA,OACA,OACA,OACA,QACA,QACA,QACA,SACA,SACA,SACA,UACA,UACA,UACA,UACA,WAGA,IACA,KACA,KACA,KACA,MACA,MACA,MACA,OACA,OACA,OACA,OACA,QACA,QACA,QACA,SACA,SACA,SACA,UACA,UACA,UACA,WACA,WAGA,KACA,KACA,KACA,KACA,MACA,MACA,MACA,OACA,OACA,OACA,QACA,QACA,QACA,QACA,SACA,SACA,SACA,UACA,UACA,UACA,WAGA,GACA,GACA,IACA,IACA,IACA,KACA,KACA,KACA,KACA,MACA,MACA,MACA,OACA,OACA,OACA,QACA,QACA,QACA,QACA,SACA,SACA,SACA,UACA,UACA,UACA,WAGA,IACA,KACA,KACA,KACA,KACA,MACA,MACA,MACA,OACA,OACA,OACA,QACA,QACA,QACA,QACA,SACA,SACA,SACA,UACA,UACA,UACA,WAGA,IACA,IACA,KACA,KACA,KACA,MACA,MACA,MACA,MACA,OACA,OACA,OACA,QACA,QACA,QACA,SACA,SACA,SACA,SACA,UACA,UACA,UACA,WAGA,EACA,EACA,GACA,GACA,GACA,IACA,IACA,IACA,KACA,KACA,KACA,MACA,MACA,MACA,MACA,OACA,OACA,OACA,QACA,QACA,QACA,SACA,SACA,SACA,SACA,UACA,UACA,UACA,WAGA,GACA,GACA,IACA,IACA,IACA,KACA,KACA,KACA,MACA,MACA,MACA,MACA,OACA,OACA,OACA,QACA,QACA,QACA,SACA,SACA,SACA,SACA,UACA,UACA,UACA,WAGA,IACA,IACA,KACA,KACA,KACA,MACA,MACA,MACA,MACA,OACA,OACA,OACA,QACA,QACA,QACA,SACA,SACA,SACA,UACA,UACA,UACA,UACA,WAGA,GACA,GACA,GACA,IACA,IACA,IACA,KACA,KACA,KACA,KACA,MACA,MACA,MACA,OACA,OACA,OACA,QACA,QACA,QACA,QACA,SACA,SACA,SACA,UACA,UACA,UACA,WAGA,GACA,GACA,GACA,IACA,IACA,IACA,KACA,KACA,KACA,MACA,MACA,MACA,MACA,OACA,OACA,OACA,QACA,QACA,QACA,SACA,SACA,SACA,SACA,UACA,UACA,UACA,WAGA,GACA,IACA,IACA,IACA,IACA,KACA,KACA,KACA,MACA,MACA,MACA,OACA,OACA,OACA,OACA,QACA,QACA,QACA,SAC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"}